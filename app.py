# -*- coding: utf-8 -*-
""""AISKP"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17LMX8JNvu7EGktwxrB5itee7YaylfnnH
"""

#============= Сравнение предложений

import sys
import subprocess
def is_running_in_colab():
    try:
        import google.colab
        return True
    except ImportError:
        return False
    if 'COLAB_RELEASE_TAG' in os.environ:
        return True
    return False



if is_running_in_colab() :
  #!pip3 install sentence-transformers
  subprocess.run([sys.executable, "-m", "pip", "install", "sentence-transformers"], check=True)

  from sentence_transformers import SentenceTransformer, util

  # Загружаем предобученную модель (можно выбрать другую)
  model0 = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
  model = SentenceTransformer('paraphrase-multilingual-mpnet-base-v2')


# Два предложения для сравнения
def compareST(sentence1 = "Кошка сидит на ковре", sentence2 = "На ковре сидит кошка") :
  # Кодируем предложения в векторы
  embedding1 = model.encode(sentence1, convert_to_tensor=True)
  embedding2 = model.encode(sentence2, convert_to_tensor=True)
  cosine_sim = util.cos_sim(embedding1, embedding2)
  return cosine_sim.item()

def compareST0(sentence1 = "Кошка сидит на ковре", sentence2 = "На ковре сидит кошка") :
  # Кодируем предложения в векторы
  embedding1 = model0.encode(sentence1, convert_to_tensor=True)
  embedding2 = model0.encode(sentence2, convert_to_tensor=True)
  cosine_sim = util.cos_sim(embedding1, embedding2)
  return cosine_sim.item()

'''
print( f'{compareST("Кошка сидит на ковре", sentence2 = "На ковре сидит кошка") :.4f}')
'''#'''

a = model0.encode("Кошка сидит на ковре", convert_to_tensor=True) -\
    model0.encode("Кот сидит на ковре", convert_to_tensor=True)
b = model0.encode("Корова сидит на ковре", convert_to_tensor=True) -\
    model0.encode("Бык сидит на ковре", convert_to_tensor=True)

util.cos_sim(a, b).item()

compareST("некоторые любят погорячее", "кому-то нравится погорячее")

"""# Админ запускает :
pip3 install yandex-cloud-ml-sdk

YANDEX_API_KEY="------------ secret key -------" YANDEX_FOLDER_ID="--- Folder ID ----" python3 app.py

#PRE-RUN

как посчитать токены яндекс
Стандартный тариф: 0,4 рубля за 1000 токенов (синхронный режим с YandexGPT Lite)
Премиум тариф: 2 рубля за 1000 токенов (синхронный режим с полной версией YandexGPT)

##Библиотеки и API ключи
"""

#@title Установка библиотек

isYandex = 1
isGoogle = 0        # 0 - присваиваем тому GPT который вообще не используем (библиотеки не подключатся!) Google и Deepseek - библиотеки не совместимы!!
isDeepSeek = 0
GPT_mode = isYandex # Какой GPT использовать в данный момент

import sys
import subprocess

def is_running_in_colab():
    try:
        import google.colab
        return True
    except ImportError:
        return False
    if 'COLAB_RELEASE_TAG' in os.environ:
        return True
    return False


#--------------------------- БИБЛИОТЕКИ
if is_running_in_colab() :
  if isGoogle :
    print('--------------------- Google ------------')
    #!pip  install  tiktoken==0.4.0  langchain==0.0.231 openai==0.27.8 faiss-cpu==1.7.4 gspread oauth2client nltk pydantic==1.10.8
    subprocess.run([sys.executable, "-m", "pip", "install", "tiktoken==0.4.0 langchain==0.0.231 openai==0.27.8 faiss-cpu==1.7.4 gspread oauth2client nltk pydantic==1.10.8"], check=True)

  if isDeepSeek :
    print('--------------------- DeepSeek ------------')
    #!pip install langchain-community langchain-core

  if isYandex :
    print('--------------------- Yandex ------------')
    #!pip install yandex-cloud-ml-sdk
    subprocess.run([sys.executable, "-m", "pip", "install", "yandex-cloud-ml-sdk"], check=True)
  '''#'''

#@title Импорт библиотек
import time
import requests
import pathlib
import subprocess
import tempfile
import os
import re
import getpass
import os
import random
from random import randint
from functools import wraps
from flask import Flask, render_template, request, session, redirect, url_for, render_template_string

'''
import gdown
import ipywidgets as widgets
import gspread
from oauth2client.service_account import ServiceAccountCredentials
'''#'''

if isGoogle :
  from langchain.llms import OpenAI
  import openai as openai_Google
  from langchain.docstore.document import Document
  from langchain.embeddings.openai import OpenAIEmbeddings
  from langchain.vectorstores import FAISS
  from langchain.text_splitter import RecursiveCharacterTextSplitter
  from langchain.prompts import PromptTemplate
  import tiktoken

if isYandex :
  from yandex_cloud_ml_sdk import YCloudML

if isDeepSeek :
  #from deepseek import DeepSeek #@@
  from openai import OpenAI as OpenAI_Deep

maxTokens = 2000

Yandex_FolderID = ''
Yandex_API_Key = ''

if is_running_in_colab() :
  #--- РАФ
  Yandex_FolderID = 'b1g4k5uv15qaj5j0tv8n'
  Yandex_API_Key = '------------ secret - see sites ------'
  # Админ запускает :
  # YANDEX_API_KEY="------------ secret - see sites ------" YANDEX_FOLDER_ID="b1g4k5uv15qaj5j0tv8n" python3 app.py

Deep_API_Key = ' '
Google_API_Key = ' '

#======== Передача ключа через переменные окружения (Environment Variables)

# Админ запускает :
# YANDEX_API_KEY="..." YANDEX_FOLDER_ID="..." python3 is_www.py

modelYandexGPT = False

def init_gpt_api() :
  global modelYandexGPT   # Используется только для подсчёта num_tokens
  global clientDeep
  global Yandex_FolderID
  global Yandex_API_Key

  if isGoogle :
    openai_key = Google_API_Key
    os.environ["OPENAI_API_KEY"] = openai_key
    openai_Google.api_key = openai_key

  if isDeepSeek :
    clientDeep = OpenAI_Deep(api_key=Deep_API_Key, base_url="https://api.deepseek.com")

  if isYandex :
    sdk = YCloudML( folder_id=Yandex_FolderID, auth=Yandex_API_Key)
    modelYandexGPT = sdk.models.completions("yandexgpt") # Используется только для подсчёта num_tokens
    print('====== init_gpt_api/ Yandex_API_Key, Yandex_FolderID =', Yandex_API_Key, Yandex_FolderID)

"""## Дополнительный документ (выделение кусков) chunks - GOOGLE GPT"""

max_chunk_count = 110
count_type = "words"
top_similar_documents = 5
doc_url = ''
'''
doc_url = "https://docs.google.com/document/d/1EhuY3pHamiQtffeHoWx_AEABVguPdBZ6_wFY7NdrM74"  # Документ "инструкция по эксплуатации"
doc_url = "https://docs.google.com/document/d/1Sw-1NRSosuVOI76r0vgHs6L6222HCpeGhiLtKQbMQng/edit?usp=sharing"  # Документ  MK
'''

if doc_url != '' :
  from google.colab import drive
  drive.mount('/content/drive')

def split_text(text, max_count, count_type, verbose=0): # Фрагменты разделены <АБВГД>
    ''''''
    # Функция для подсчета количества слов в фрагменте
    def num_words(fragment):
        return len(fragment.split())

    # Функция для подсчета количества токенов в фрагменте
    def num_tokens(fragment):
        return num_tokens_from_string(fragment, "cl100k_base")
    ''''''
    # Разделение текста на фрагменты, исключая теги HTML
    fragments = [re.sub('\r\n',' ',re.sub('-\r\n *','',fragment)).strip() for fragment in re.split(r"<[^>]+>|[\ufeff]", text) if fragment.strip()]
    # Убираем переносы           ^^^^^^^^^^^^^^^^^^  ('-' в конце строк) @@@

    # Выбор функции подсчета длины в зависимости от типа подсчета
    length_function = num_words if count_type == "words" else num_tokens

    # Создание объекта разделителя текста
    splitter = RecursiveCharacterTextSplitter(chunk_size=max_count, chunk_overlap=0, length_function=length_function)

    # Список для хранения фрагментов текста
    source_chunks = []

    # Обработка каждого фрагмента текста
    for fragment in fragments:
        if verbose:
            # Вывод количества слов/токенов в фрагменте, если включен режим verbose
            count = length_function(fragment)
            print(f"{count_type} in text fragment = {count}\n{'-' * 5}\n{fragment}\n{'=' * 20}")

        # Разбиение фрагмента текста на части заданной длины с помощью разделителя и добавление каждой части в список source_chunks
        source_chunks.extend(Document(page_content=chunk, metadata={}) for chunk in splitter.split_text(fragment))

    # Возвращение списка фрагментов текста
    return source_chunks


def create_embedding(data, max_count, count_type):
    def num_tokens_from_string(string: str, encoding_name: str) -> int:
      """Возвращает количество токенов в строке"""
      encoding = tiktoken.get_encoding(encoding_name)
      num_tokens = len(encoding.encode(string))
      return num_tokens

    source_chunks = []

    source_chunks = split_text(text=data, max_count=max_count, count_type=count_type, verbose=0)


    # Создание индексов документа
    search_index = FAISS.from_documents(source_chunks, OpenAIEmbeddings(), )

    count_token = num_tokens_from_string(' '.join([x.page_content for x in source_chunks]), "cl100k_base")
    print('\n ===========================================: ')
    print('Количество токенов в документе :', count_token)
    print('ЦЕНА запроса:', 0.0004*(count_token/1000), ' $')
    return search_index, source_chunks



def load_search_indexes(url: str, max_count, count_type) -> str:
    '''
    # Extract the document ID from the URL
    match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)
    if match_ is None:
        raise ValueError('Invalid Google Docs URL')
    doc_id = match_.group(1)

    # Download the document as plain text
    url_instr = f'https://docs.google.com/document/d/{doc_id}/export?format=txt'
    '''

    url_instr = url + '/export?format=txt'
    print(url_instr) #@@
    response = requests.get(url_instr)
    response.raise_for_status()
    text = response.text
    ##print(text) ##@@@
    return create_embedding(text, max_count=max_count, count_type=count_type)

def num_tokens_from_messages(messages, model="gpt-3.5-turbo-0301"):  # returns the number of tokens used by a list of message
    try:
        encoding = tiktoken.encoding_for_model(model)
    except KeyError:
        encoding = tiktoken.get_encoding("cl100k_base")
    if model == "gpt-3.5-turbo-0301":  # note: future models may deviate from this
        num_tokens = 0
        for message in messages:
            num_tokens += 4  # every message follows <im_start>{role/name}\n{content}<im_end>\n
            for key, value in message.items():
                num_tokens += len(encoding.encode(value))
                if key == "name":  # if there's a name, the role is omitted
                    num_tokens += -1  # role is always required and always 1 token
        num_tokens += 2  # every reply is primed with <im_start>assistant
        return num_tokens
    else:
        raise NotImplementedError(f"""num_tokens_from_messages() is not presently implemented for model {model}.""")

def insert_newlines(text: str, max_len: int = 170) -> str:
    words = text.split()
    lines = []
    current_line = ""
    for word in words:
        if len(current_line + " " + word) > max_len:
            lines.append(current_line)
            current_line = ""
        current_line += " " + word
    lines.append(current_line)
    return "\n".join(lines)

"""## GPT functions"""

default_system_role = '''Ты консультант по техническим системам.
Кратко отвечай на вопрос исходя из следующего документа: '''

is_async = False

##########################  Обращение к GPT

def request_GPT( messages, temp ) :
  global modelYandexGPT
  global Yandex_API_Key
  global Yandex_FolderID

  if GPT_mode == isGoogle :
    return openai_Google.ChatCompletion.create( model="gpt-3.5-turbo", messages=messages, temperature=temp )

  if GPT_mode == isDeepSeek :
    return clientDeep.chat.completions.create( model="deepseek-chat", messages=messages, temperature=temp, stream=False )

  #------- YANDEX GPT
  if GPT_mode == isYandex :
    if modelYandexGPT :  session['total_numTokens'] = session['total_numTokens'] + len(modelYandexGPT.tokenize(messages))

    prompt  ={ "modelUri"         : f"gpt://{Yandex_FolderID}/yandexgpt", #yandexgpt-lite YandexGPT4
              "completionOptions": { "stream" : False, "temperature": temp, "maxTokens" : str(maxTokens) },
              "messages"         : messages
    }
    url     = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = { "Content-Type" : "application/json", "Authorization": f"Api-Key {Yandex_API_Key}" }
    response = requests.post(url, headers=headers, json=prompt)

    print('====== request_GPT/ Yandex_API_Key, Yandex_folderID =', Yandex_API_Key, Yandex_FolderID)
    return response

### -----------  ASYNC ------------
'''
is_async = True
def request_GPT( messages, temp ) :


  sdk = YCloudML(
      folder_id = folderID,
      auth = Yandex_API_Key,
  )

  model = sdk.models.completions("yandexgpt")
  #model = sdk.models.completions("YandexGPT4")
  #model = sdk.models.completions("yandexgpt4")

  operation = model.run_deferred(messages)

  response = operation.wait()


  return response
'''

#-----------------------------------------

def answer_index(topic, system_role, system_doc='', assistant=False, search_index=False, temp = 0.1, verbose = 0, top_similar_documents = 5):
  if verbose : verbo = verbose-1
  else :       verbo = 0
  global completion_

  if (not system_doc) :  #--- Выборка документов по схожести с вопросом
    system_doc = ''
    '''@@
    docs = search_index.similarity_search(topic, k=top_similar_documents)
    system_doc = re.sub(r'\n{2}', ' ', '\n '.join([f'\nОтрывок документа №{i+1}\n=====================' + doc.page_content + '\n' for i, doc in enumerate(docs)]))
    '''

  system_role_total = system_role + ' ' +  system_doc
  system_role_total = gpt_edit('Роль:', system_role_total)
  topic             = gpt_edit('Запрос:', topic)
  messages = [
    {"role": "system", "text": system_role_total},
    {"role": "user",   "text": topic}
    ]
  messages_google = [
    {"role": "system", "content": system_role_total},
    {"role": "user",   "content": topic}
  ]
  messages_deep = [
    {"role": "system", "content": system_role_total},
    {"role": "user",   "content": topic}
  ]
  messagesAssist_text=''
  if (assistant) :
    messagesAssist_text = assistant[0] + assistant[1]
    messagesAssist = [
      {"role": "user",      "text": assistant[0]},
      {"role": "assistant", "text": assistant[1]}
      ]
    messages =  [messages[0]] + messagesAssist + [messages[1]]
    messagesAssist = [
      {"role": "user",      "content": assistant[0]},
      {"role": "assistant", "content": assistant[1]}
      ]
    messages_google = [messages_google[0]] + messagesAssist + [messages_google[1]]
    messages_deep   = [messages_deep[0]]   + messagesAssist + [messages_deep[1]]


  if (verbo):
    print('=============  messages   ===============: ')
    for message in messages :
      print(f"--{message['role']}--")
      print(message['text'])
    print('===========================================: ')

  # Обращение к GPT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  if GPT_mode == isYandex   : msg = messages
  if GPT_mode == isGoogle   : msg = messages_google
  if GPT_mode == isDeepSeek : msg = messages_deep
  completion = request_GPT( messages=msg, temp=temp )
  completion_ = completion

  if (verbo>1):
    if GPT_mode == isGoogle   :  print('ЦЕНА запроса с ответом :', 0.002*(completion["usage"]["total_tokens"]/1000), ' $')

  return completion

def ask_gpt( user, system_role = default_system_role, system_doc = '', assistant = False, temp = 0.1, verbose=0 ) :
  if verbose : verbo = verbose-1
  else :       verbo = 0

  global modelYandexGPT

  if (verbose) :   print(f'/ask_gpt/------user-----\n{user}\n--system--\n{system_role+system_doc}')
  if verbose> 100 : return ''

  ans = answer_index( user, system_role = system_role, system_doc = system_doc, assistant =  assistant, verbose=verbo )

  if (verbose>1) :   print(f'--ans--{ans}')

  if GPT_mode == isYandex :
    try :
      if is_async : Answer = ans.alternatives[0].text
      else :        Answer = ans.json()['result']['alternatives'][0]['message']['text']
    except :
      print('/ask_gpt/yandex:', ans.json())
      Answer = ''

    response_ = ans.json()['result']['alternatives'][0]['message']

    if modelYandexGPT :  session['total_numTokens'] = session['total_numTokens'] + len(modelYandexGPT.tokenize(response_))
  else :                                              #--- Google and Deepseek GPT
    try:  Answer = ans.choices[0].message.content
    except :
      print('/ask_gpt/:',ans.json())
      Answer = ''

  return Answer

"""##ТЕКСТ

### ЗПР  оригинал и варианты
"""

#@title ЗПР старые списки

ask_zpr0 = '''
Законы развития технических систем:
1) Увеличение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте (которому принадлежит поверхность) при одновременном увеличении разнообразия контактных свойств поверхности
2) Увеличение плотности потока преобразуемой в технической системе энергии
3) Увеличение неравномерности движения и в то же время усложнение траектории движения.
4) Увеличение числа степеней свободы движения
5) Расширение области механического контакта объектов, начиная от точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат) и при этом увеличение соответственно длины, площади и объема области контакта.
6) Усложнение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве.
(Пример: Акведук -  Система оросительных каналов - Ирригационная система в пустынном регионе - Плотина со шлюзами, регулирующими водосброс)
7) Сближение пары элементов в ТС - от отсутствия контакта между ними до слияния в единый элемент.
(Пример: клавиатура и экран - клавиатура с экраном (ноутбук) - тачскрин)
8) Усложнение геометрической формы области пространства, занимаемой объектом, при расширении этой области, начиная от условной точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат).
9) Упрощение геометрического объекта (от поверхности к линии до точки), относительно которого симметрично расположены объекты в ТС.
10) Последовательное внедрение области пустого пространства внутрь объекта и последующее увеличение равномерности и неравномерности распределения области пустого пространства внутри объекта.
11) Уменьшение размера и в то же время увеличение количества отдельных цельных частей объекта, совместно выполняющих главную, основную или вспомогательную функцию
(Пример обработка материала: 1 Цельный твердый ниструмент; 2 Инструмент разделенный на части; 3 Пескоструйная обработка; 4 Резка струёй воды; 5 Плазменная резка; 6 Лазерная резка )
12) Увеличение подвижности соединения, в том числе за счет увеличения упругости и/или текучести элемента, выполняющего функции соединителя.
13) Увеличение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение четких границ между областями с различными свойствами.
'''

ask_zpr = '''
Законы развития технических систем:
1) Увеличение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте, при одновременном увеличении разнообразия контактных свойств поверхности
2) Увеличение плотности потока преобразуемой в технической системе энергии
3) Увеличение неравномерности движения и в то же время усложнение траектории движения
4) Увеличение числа степеней свободы движения
5) Расширение области механического контакта объектов, начиная от точечной, последовательно  по линии, по плоскости и по объему.
6) Усложнение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве
(Пример: Акведук -  Система оросительных каналов - Ирригационная система в пустынном регионе - Плотина со шлюзами, регулирующими водосброс)
7) Сближение пары элементов в ТС - от отсутствия контакта, до слияния в единый элемент.
(Пример: клавиатура и экран - ноутбук - тачскрин)
8) Усложнение геометрической формы области пространства, занимаемой объектом, которая расширяется, начиная от условной точечной, последовательно по линии, по плоскости и по объему.
9) Изменение центра симметрии относительно которого расположены некоторые объекты в ТС. Центр симметрии изменяется  от поверхности, к линии и точке,
10) Последовательное внедрение области пустого пространства внутрь объекта и последующее увеличение равномерности и неравномерности распределения области пустого пространства внутри объекта.
11) Уменьшение размеров и в то же время увеличение количества объектов в ТС, совместно выполняющих одну функцию. Обьекты уменьшаются вплоть до элементарных частиц.
(Пример обработка материала: 1 Цельный твердый ниструмент; 2 Инструмент разделенный на части; 3 Пескоструйная обработка; 4 Резка струёй воды; 5 Плазменная резка; 6 Лазерная резка )
12) Увеличение подвижности соединения, в том числе за счет увеличения упругости и/или текучести элемента, выполняющего функции соединителя.
13) Увеличение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение четких границ между областями с различными свойствами
'''
tpr_list = '''
Правила развития технических систем:
1) Увеличение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте, при одновременном увеличении разнообразия контактных свойств поверхности
2) Увеличение плотности потока преобразуемой в технической системе энергии
3) Увеличение неравномерности движения и в то же время усложнение траектории движения
4) Увеличение числа степеней свободы движения
5) Расширение области механического контакта объектов, начиная от точечной, последовательно  по линии, по плоскости и по объему.
6) Усложнение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве
(Пример: Акведук -  Система оросительных каналов - Ирригационная система в пустынном регионе - Плотина со шлюзами, регулирующими водосброс)
7) Сближение пары элементов в ТС - от отсутствия контакта, до слияния в единый элемент.
(Пример: клавиатура и экран - ноутбук - тачскрин)
8) Усложнение геометрической формы области пространства, занимаемой объектом, которая расширяется, начиная от условной точечной, последовательно по линии, по плоскости и по объему.
9) Изменение центра симметрии относительно которого расположены некоторые объекты в ТС. Центр симметрии изменяется  от поверхности, к линии и точке,
10) Последовательное внедрение области пустого пространства внутрь объекта и последующее увеличение равномерности и неравномерности распределения области пустого пространства внутри объекта.
11) Уменьшение размеров и в то же время увеличение количества объектов в ТС, совместно выполняющих одну функцию. Обьекты уменьшаются вплоть до элементарных частиц.
(Пример обработка материала: 1 Цельный твердый ниструмент; 2 Инструмент разделенный на части; 3 Пескоструйная обработка; 4 Резка струёй воды; 5 Плазменная резка; 6 Лазерная резка )
12) Увеличение подвижности соединения, в том числе за счет увеличения упругости и/или текучести элемента, выполняющего функции соединителя.
13) Увеличение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение четких границ между областями с различными свойствами
'''

zpr_c_list0 ='''
1) Важной частью функционирования ТС является соприкосновение поверхностей

2) В процессе функционирования ТС происходит преобразование энергии

3) В ТС происходит движение мелких частей ТС или обрабатываемого материала

4) ТС или её крупные части меняют своё положение в пространстве

5) Важной частью функционирования ТС является контакт ТС и объекта, либо контакт крупных частей ТС

6) В ТС существует элемент функциональной структуры ТС который можно преобразовать во множество элементов, либо множество элементов функциональной структуры ТС для которых можно усложнить их конфигурацию и связи между ними в пространстве.

7) В ТС существует пара отдельных подсистем ТС, которые можно сблизить или слить в одну подсистему

8) Геометрическая форма пространства, занимаемая объектом в ТС может быть усложнена, начиная от условной точечной, последовательно по линии, по плоскости и по объему.

9) В ТС существует симметрия частей ТС относительно плоскости, линии, точки.

10) В ТС существуют области пустого пространства внутри объекта в ТС или есть возможность внедрения области пустого пространства внутрь объекта

11) В ТС существует цельная часть выполняющая некую функцию, и эту часть можно заменить группой однотипных частей.  Либо в ТС существует группа однотипных частей выполняющая некую функцию

12) В ТС существует подвижное соединение между частями

13) Внутри объекта ТС существуют области с различными свойствами
'''

zpr_c_list1 ='''

1) Важной частью функционирования ТС является соприкосновение поверхностей

2) В процессе функционирования ТС происходит преобразование энергии

3) В ТС происходит движение мелких частей ТС или обрабатываемого материала

4) ТС принесет больше пользы, если можно будет менять ее положение или менять взаимрасположение её крупных частей

5) Важной частью функционирования ТС является контакт ТС и объекта, либо контакт крупных частей ТС

6) В ТС существует элемент функциональной структуры ТС который можно преобразовать во множество элементов, либо множество элементов функциональной структуры ТС для которых можно усложнить их конфигурацию и связи между ними в пространстве.

7) В ТС существует пара отдельных подсистем, которые можно сблизить в пространстве или объединить в одну подсистему

8) В ТС можно выделить объект, геометрическая форма которого может быть усложнена, начиная от условной точечной, последовательно по линии, по плоскости и по объему.

9) В ТС существует симметрия частей ТС относительно плоскости, линии, точки.

10.1) Можно внедрить область пустого пространства внутрь объекта ТС
10.2) Внутри объекта в ТС есть область или области пустого пространства

11.1) В ТС есть цельная часть, выполняющую некую функцию, и эту часть можно заменить группой однотипных частей.
11.2) В ТС существует группа однотипных частей выполняющая некую функцию

12.1) В ТС существует неподвижное соединение между частями, которое можно сделать подвижным.
12.2) В ТС существует подвижное соединение между частями

13) Внутри объекта ТС существуют области с различными свойствами
'''

zpr_c_list ='''
1) Важной частью функционирования ТС является соприкосновение поверхностей
2) В процессе функционирования ТС происходит преобразование энергии
3) В ТС происходит движение мелких частей ТС или обрабатываемого материала
4) ТС принесет больше пользы, если можно будет менять ее положение или менять взаимрасположение её крупных частей
5) Важной частью функционирования ТС является контакт ТС и объекта, либо контакт крупных частей ТС
6) В ТС существует элемент функциональной структуры ТС который можно преобразовать во множество элементов, либо множество элементов функциональной структуры ТС для которых можно усложнить их конфигурацию и связи между ними в пространстве.
7) В ТС существует пара отдельных подсистем, которые можно сблизить в пространстве или объединить в одну подсистему
8) В ТС можно выделить объект, геометрическая форма которого может быть усложнена, начиная от условной точечной, последовательно по линии, по плоскости и по объему.
9) В ТС существует симметрия частей ТС относительно плоскости, линии, точки.
10) Можно внедрить область пустого пространства внутрь объекта ТС или
    Внутри объекта в ТС есть область или области пустого пространства
11) В ТС есть цельная часть, выполняющую некую функцию, и эту часть можно заменить группой однотипных частей или
    В ТС существует группа однотипных частей выполняющая некую функцию
12) В ТС существует неподвижное соединение между частями, которое можно сделать подвижным или
    В ТС существует подвижное соединение между частями
13) Внутри объекта ТС существуют области с различными свойствами
'''


zpr_c_list_1 ='''
1) Важной частью функционирования ТС "нож" является соприкосновение поверхностей
2) В процессе функционирования ножа происходит преобразование энергии
3) В ноже происходит движение мелких частей или обрабатываемого материала
4) Нож принесет больше пользы, если можно будет менять его положение или менять взаимрасположение его крупных частей
5) Важной частью функционирования ножа является контакт его и объекта, либо контакт крупных частей ножа
6) В ноже существует элемент функциональной структуры который можно преобразовать во множество элементов,
   либо существует множество элементов функциональной структуры ножа для которых можно усложнить их конфигурацию и связи между ними в пространстве.
7) В ноже существует пара отдельных подсистем, которые можно сблизить в пространстве или объединить в одну подсистему
8) В ноже можно выделить объект, геометрическая форма которого может быть усложнена, начиная от условной точечной, последовательно по линии, по плоскости и по объему.
9) В ноже существует симметрия частей относительно плоскости, линии, точки.
10) Можно внедрить область пустого пространства внутрь объекта ножа или
    внутри ножа есть область или области пустого пространства
11) В ноже есть цельная часть, выполняющую некую функцию, и эту часть можно заменить группой однотипных частей или
    в ноже существует группа однотипных частей выполняющая некую функцию
12) В ноже существует неподвижное соединение между частями, которое можно сделать подвижным или
    в ноже существует подвижное соединение между частями
13) Внутри ножа существуют области с различными свойствами
'''

zpr_c_list_f0 ='''
1) Важной частью функционирования {TS} является соприкосновение поверхностей
2) В процессе функционирования {TS}  происходит преобразование энергии
3) В {TS} происходит движение мелких частей или обрабатываемого материала
4) {TS} принесет больше пользы, если можно будет менять ее положение или менять взаимрасположение её крупных частей
5) Важной частью функционирования {TS} является контакт с объектом, либо контакт крупных частей {TS}
6) В {TS} существует элемент функциональной структуры, который можно преобразовать во множество элементов, либо множество элементов функциональной структуры {TS} для которых можно усложнить их конфигурацию и связи между ними в пространстве
7) В {TS} существует пара отдельных подсистем, которые можно сблизить в пространстве или объединить в одну подсистему
8) В {TS}  можно выделить объект, геометрическая форма которого может быть усложнена, начиная от условной точечной, последовательно по линии, по плоскости и по объему.
9) В {TS} существует симметрия частей относительно плоскости, линии, точки.
10) Можно внедрить область пустого пространства внутрь {TS} или внутри {TS} есть область или области пустого пространства
11) В {TS}  есть цельная часть, выполняющую некую функцию, и эту часть можно заменить группой однотипных частей или в {TS} существует группа однотипных частей выполняющая некую функцию
12) В {TS} существует неподвижное соединение между частями, которое можно сделать подвижным или в {TS} существует подвижное соединение между частями
13) Внутри {TS} существуют области с различными свойствами
'''
zpr_c_list_f1 ='''
1) Для {TS} важно качество соприкосновение поверхностей и контактные свойства поверхностей
2) В процессе функционирования {TS}  происходит преобразование энергии
3) В {TS} происходит движение мелких частей или обрабатываемого материала
4) {TS} принесет больше пользы, если можно будет менять ее положение или менять взаимрасположение её крупных частей
5) Важной частью функционирования {TS} является контакт с объектом, либо контакт крупных частей {TS}
6) В {TS} существует элемент функциональной структуры, который можно преобразовать во множество элементов, либо множество элементов функциональной структуры {TS} для которых можно усложнить их конфигурацию и связи между ними в пространстве
7) В {TS} существует пара отдельных подсистем, которые можно сблизить в пространстве или объединить в одну подсистему
8) В {TS}  можно выделить объект, геометрическая форма которого может быть усложнена, начиная от условной точечной, последовательно по линии, по плоскости и по объему.
9) В {TS} существует симметрия частей относительно плоскости, линии, точки.
10) Можно внедрить область пустого пространства внутрь {TS} или внутри {TS} есть область или области пустого пространства
11) В {TS}  есть цельная часть, выполняющую некую функцию, и эту часть можно заменить группой однотипных частей или в {TS} существует группа однотипных частей выполняющая некую функцию
12) В {TS} существует неподвижное соединение между частями, которое можно сделать подвижным или в {TS} существует подвижное соединение между частями
13) Внутри {TS} существуют области с различными свойствами
'''

zpr_c_list_terms ='''
соприкосновение,  контакт поверхностей
 преобразование энергии
 движение мелких частей, движение обрабатываемого материала
4) {TS} принесет больше пользы, если можно будет менять ее положение или менять взаимрасположение её крупных частей
 контакт крупных частей {TS}
6) В {TS} существует элемент функциональной структуры, который можно преобразовать во множество элементов, либо множество элементов функциональной структуры {TS} для которых можно усложнить их конфигурацию и связи между ними в пространстве
7) В {TS} существует пара отдельных подсистем, которые можно сблизить в пространстве или объединить в одну подсистему
8) В {TS}  можно выделить объект, геометрическая форма которого может быть усложнена, начиная от условной точечной, последовательно по линии, по плоскости и по объему.
9) В {TS} существует симметрия частей относительно плоскости, линии, точки.
10) Можно внедрить область пустого пространства внутрь {TS} или внутри {TS} есть область или области пустого пространства
11) В {TS}  есть цельная часть, выполняющую некую функцию, и эту часть можно заменить группой однотипных частей или в {TS} существует группа однотипных частей выполняющая некую функцию
12) В {TS} существует неподвижное соединение между частями, которое можно сделать подвижным или в {TS} существует подвижное соединение между частями
13) Внутри {TS} существуют области с различными свойствами

Опиши функциональное строение ТС и опиши как действует ТС термин их функции применимо к её частям. Подчекрни в чем отличие от других близких по функциям ТС.
'''

#@title ЗПР оригинал

zpr_array0 = [
#1
'''Увеличение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте (которому принадлежит поверхность) при одновременном увеличении разнообразия контактных свойств поверхности.
  Различают следующие этапы развития:
  1. гладкая
  2. шероховатая хаотичная
  3. шероховатая, неровности ЗАДАННОЙ формы расположенные хаотично или неровности произвольной формы расположенные УПОРЯДОЧЕННО
  4. шероховатая, неровности ЗАДАННОЙ формы расположенные УПОРЯДОЧЕННО
  5. Поверхность с углублениями или сквозными отверстиями (неправильной или правильной формы, расположенными по поверхности хаотично или упорядоченно)
  6. Поверхность с контактными свойствами, определяемыми химическим составом и молекулярной (или нано-) структурой вещества на поверхности
    (антифрикционными, адгезионными, адсорбционными, отражающими и др.)
     или свойствами подповерхностного материала (намагниченность, высокая впитывающая способность, упругость и др.)
  7. Поверхность с возможностью замены свойств.
  8. Поверхность с возможностью замены свойств и управления их параметрами.
  9. Поверхность, состоящая из участков с возможностью замены свойств и управления их параметрами.
Пример: рукоятки
''', #2
'''
Увеличение плотности потока преобразуемой в ТС энергии
  Различают следующие этапы развития:
  1. Мускульная сила
  2. Механическая энергия (потенциальная, в том числе градиент гравитационного поля, и кинетическая).
  3. Тепловая энергия
  4. Энергия электромагнитного поля или химическая
  5. Ядерная энергия или энергия потока элементарных частиц.
Пример:  плавательное судно 1. Гребное 2. Парусное 3. Пароход 4. Дизельное судно 5. Атомоход

''', #3
'''
Увеличение неравномерности движения и в то же время усложнение траектории движения.
  Различают следующие этапы развития:
  1. Равномерное поступательное движение.
  2. Равноускоренное (равнозамедленное) поступательное движение.
  3. Неравномерное поступательное движение.
  4. Равномерное вращательное движение.
  5. Равноускоренное (равнозамедленное) вращательное движение.
  6. Неравномерное вращательное движение.
  7. Равномерное сложное движение.
  8. Равноускоренное (равнозамедленное) сложное движение.
  9. Неравномерное сложное движение.
Пример:  сушилки сыпучих материалов: 1,2 Камерная; 6 Барабанная; 9 Сушилка с псевдоожиженым слоем


''', #4
'''
Увеличение числа степеней свободы движения механического движения элементов технической системы
  Различают следующие этапы развития:
  1. Отсутствие подвижности.
  2. Одна степень свободы.
  3. Две степени свободы.
  4. Три степени свободы.
  5. Четыре степени свободы.
  6. Пять степеней свободы.
  7. Шесть степеней свободы.
Пример: Кресло; Кресло на колесиках; Кресло с подъёмным механизмом

''', #5
'''
Расширение области механического контакта объектов, начиная от точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат) и при этом увеличение соответственно длины, площади и объема области контакта.
  Различают следующие этапы развития:
  1. Точка.
  2. Множество точек.
  3. Линия.
  4. Множество линий.
  5. Комбинация точек и линий.
  6. Поверхность.
  7. Множество поверхностей.
  8. Комбинация точек, линий и поверхностей.
  9. Объем.
  10. Множество объемов.
  11. Комбинация точек, линий, поверхностей и объемов.
  12. Отсутствие контакта
Пример: 1 подголовник; 3 ремень безопасности 6. Подушка безопасности

''', #6
'''
Усложнение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве.
Различают следующие этапы развития:
  1. Линейная или кольцевая структура.
  2. Разветвленная (иерархическая) структура или структура типа «звезда».
  3. Многосвязная (в том числе сетевая, сотовая) структура.
  4. Гибридная (комбинированная) структура.
  5. Изменяющаяся во времени структура.
Пример: 1 Акведук; 2 Система оросительных каналов; 3 Ирригационная система; 5 Плотина со шлюзами

''', #7
'''
Сближение пары элементов в ТС - от отсутствия контакта между ними до слияния в единый элемент.
Различают следующие этапы развития:
  1. Элемент ТС не соприкасается с другим элементом ТС.
  2. Элемент ТС соприкасается с другим элементом ТС.
  3. Элемент ТС полностью покрывает (обволакивает) другой элемент TC.
  4. Элемент ТС частично проникает (входит) в другой элемент ТС.
  5. Элемент ТС расположен внутри другого элемента ТС, но соприкасается с внешней средой.
  6. Элемент ТС расположен внутри другого элемента ТС и не соприкасается с внешней средой.
  7. Элемент ТС разделен и распределен по частям внутри другого элемента ТС.
  8. Элемент ТС растворен внутри другого элемента ТС.
Пример: расположения клавиатуры и экрана: 1 Персональный компьютер; 4 Ноутбук; 5 Планшетный компьютер (тачскрин)

''', #8
'''
Усложнение геометрической формы области пространства, занимаемой объектом, при расширении этой области, начиная от условной точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат).
Различают следующие этапы развития:
  1. Точка.
  2. Множество точек.
  3. Прямая линия.
  4. Изогнутая линия.
  5. Множество прямых и/или изогнутых линий.
  6. Плоская поверхность.
  7. Искривленная поверхность.
  8. Множество плоских и/или искривленных поверхностей.
  9. Объем.
  10. Множество объемов.
Пример: 1 Кнопка; 3 Ползунок; 4 Колесо регулировки; 6 Сенсорная панель; 7 Шаровой манипулятор (трекбол); 9 Система разпознавания жестов

''', #9
'''
Упрощение геометрического объекта (от поверхности к линии до точки), относительно которого симметрично расположены объекты в ТС.
Различают следующие этапы развития:
  1. Асимметричность.
  2. Двусторонняя симметрия.
  3. Осевая (аксиальная, n-го порядка) симметрия.
  4. Центральная (сферическая) симметрия
Пример: 1 Лопасть; 2 Двухлопастной винт; 3 Многолопастный винт; 4 Поворотный винтовой движитель

''', #10
'''
Последовательное внедрение области пустого пространства внутрь объекта и последующее увеличение равномерности и неравномерности распределения области пустого пространства внутри объекта.
Различают следующие этапы развития:
1. Сплошной объект.
2. Область пустого пространства без прямого контакта с объектом.
3. Область пустого пространства соприкасается с объектом.
4. Область пустого пространства частично вклинивается в объект.
5. Пустое пространство внутри объекта.
6. Раздробленное (разделенное) пустое пространство внутри объекта.
7. Сквозная область пустого пространства внутри объекта.
8. Несколько сквозных областей пустого пространства внутри объекта.
9. Пористая структура объекта.
10. Капиллярная структура объекта.
11. Микрокапиллярная или микропористая структура
Пример: 1 Цельный кирпич; 4 Кирпич с рельефной поверхностью; 8 Пеноблок; 9 Пустотелый кирпич

''', #11
'''
Уменьшение размера и в то же время увеличение количества отдельных цельных частей объекта, совместно выполняющих главную, основную или вспомогательную функцию
Различают следующие этапы развития:
1. Единичный цельный объект.
2. Объект, разделенный на части.
3. Объект, разделенный до дисперсной структуры.
4. Объект, разделенный до молекул.
5. Объект, разделенный до атомов или ионов.
6. Объект, разделенный до элементарных частиц.
Пример: обработка материала: 1 Цельный твердый инструмент; 2 Инструмент разделенный на части; 3 Пескоструйная обработка; 4 Резка струёй воды; 5 Плазменная резка; 6 Лазерная резка

''', #12
'''
Увеличение подвижности соединения, в том числе за счет увеличения упругости и/или текучести элемента, выполняющего функции соединителя.
Различают следующие этапы развития:
1. Жесткое неподвижное соединение.
2. Жесткое подвижное соединение (шарнирное).
3. Упругое соединение.
4. Пластичное соединение.
5. Соединение жидкой и/или газовой средой.
6. Соединение полем.
7. Отсутствие соединения
Пример: 1 Глухая муфта; 2 Шарнирная муфта; 3 Упругая муфта; 5 Гидравлическая муфта; 6 Магнитная муфта

''', #13
'''
Увеличение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение четких границ между областями с различными свойствами.
Различают следующие этапы развития:
1. Свойства материала в объекте равномерно распределены.
2. Различные свойства материала в объекте равномерно распределены в пределах областей, имеющих четкие границы.
3. Области материала объекта имеют различные свойства с четкими границами между областями, равномерно распределенными внутри объекта.
4. Области материала объекта имеют различные свойства с четкими границами между областями и неравномерно распределены в объекте.
5. Области материала объекта имеют различные свойства с «размытыми» границами между областями с разными свойствами.
6. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые равномерно распределены в объекте.
7. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые неравномерно распределены в объекте.
8. Области материала объекта имеют различные свойства, распределенные в областях неравномерно, без определенных границ между областями или с изменяющимся во времени распределением областей и/или границами.
Пример: 1 Цельный бетон; 2 Упрочнение перекрытий стальным прокатом; 3 Железобетон; 4 Анкерное крепление; 7 Сталефибробетон
'''
]

#@title ЗПР  2 ("увеличение" ==> "изменение")
zpr_array = [
#1
'''Изменение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте (которому принадлежит поверхность) при одновременном увеличении разнообразия контактных свойств поверхности.
  Различают следующие этапы развития:
  1. гладкая
  2. шероховатая хаотичная
  3. шероховатая, неровности ЗАДАННОЙ формы расположенные хаотично или неровности произвольной формы расположенные УПОРЯДОЧЕННО
  4. шероховатая, неровности ЗАДАННОЙ формы расположенные УПОРЯДОЧЕННО
  5. Поверхность с углублениями или сквозными отверстиями (неправильной или правильной формы, расположенными по поверхности хаотично или упорядоченно)
  6. Поверхность с контактными свойствами, определяемыми химическим составом и молекулярной (или нано-) структурой вещества на поверхности
    (антифрикционными, адгезионными, адсорбционными, отражающими и др.)
     или свойствами подповерхностного материала (намагниченность, высокая впитывающая способность, упругость и др.)
  7. Поверхность с возможностью замены свойств.
  8. Поверхность с возможностью замены свойств и управления их параметрами.
  9. Поверхность, состоящая из участков с возможностью замены свойств и управления их параметрами.
Пример: рукоятки
''', #2
'''
Изменение плотности потока преобразуемой в ТС энергии
  Различают следующие этапы развития:
  1. Мускульная сила
  2. Механическая энергия (потенциальная, в том числе градиент гравитационного поля, и кинетическая).
  3. Тепловая энергия
  4. Энергия электромагнитного поля или химическая
  5. Ядерная энергия или энергия потока элементарных частиц.
Пример:  плавательное судно 1. Гребное 2. Парусное 3. Пароход 4. Дизельное судно 5. Атомоход
''', #3
'''
Изменение неравномерности движения и траектории движения.
  Различают следующие этапы развития:
  1. Равномерное поступательное движение.
  2. Равноускоренное (равнозамедленное) поступательное движение.
  3. Неравномерное поступательное движение.
  4. Равномерное вращательное движение.
  5. Равноускоренное (равнозамедленное) вращательное движение.
  6. Неравномерное вращательное движение.
  7. Равномерное сложное движение.
  8. Равноускоренное (равнозамедленное) сложное движение.
  9. Неравномерное сложное движение.
Пример:  сушилки сыпучих материалов: 1,2 Камерная; 6 Барабанная; 9 Сушилка с псевдоожиженым слоем
''', #4
'''
Изменение числа степеней свободы движения механического движения элементов технической системы
  Различают следующие этапы развития:
  1. Отсутствие подвижности.
  2. Одна степень свободы.
  3. Две степени свободы.
  4. Три степени свободы.
  5. Четыре степени свободы.
  6. Пять степеней свободы.
  7. Шесть степеней свободы.
Пример: Кресло; Кресло на колесиках; Кресло с подъёмным механизмом
''', #5
'''
Изменение области механического контакта объектов, начиная от точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат) и при этом изменение соответственно длины, площади и объема области контакта.
  Различают следующие этапы развития:
  1. Точка.
  2. Множество точек.
  3. Линия.
  4. Множество линий.
  5. Комбинация точек и линий.
  6. Поверхность.
  7. Множество поверхностей.
  8. Комбинация точек, линий и поверхностей.
  9. Объем.
  10. Множество объемов.
  11. Комбинация точек, линий, поверхностей и объемов.
  12. Отсутствие контакта
Пример: 1 подголовник; 3 ремень безопасности 6. Подушка безопасности
''', #6
'''
Изменение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве.
Различают следующие этапы развития:
  1. Линейная или кольцевая структура.
  2. Разветвленная (иерархическая) структура или структура типа «звезда».
  3. Многосвязная (в том числе сетевая, сотовая) структура.
  4. Гибридная (комбинированная) структура.
  5. Изменяющаяся во времени структура.
Пример: 1 Акведук; 2 Система оросительных каналов; 3 Ирригационная система; 5 Плотина со шлюзами

''', #7
'''
Изменение расположения пары элементов в ТС - от отсутствия контакта между ними до слияния в единый элемент.
Различают следующие этапы развития:
  1. Элемент ТС не соприкасается с другим элементом ТС.
  2. Элемент ТС соприкасается с другим элементом ТС.
  3. Элемент ТС полностью покрывает (обволакивает) другой элемент TC.
  4. Элемент ТС частично проникает (входит) в другой элемент ТС.
  5. Элемент ТС расположен внутри другого элемента ТС, но соприкасается с внешней средой.
  6. Элемент ТС расположен внутри другого элемента ТС и не соприкасается с внешней средой.
  7. Элемент ТС разделен и распределен по частям внутри другого элемента ТС.
  8. Элемент ТС растворен внутри другого элемента ТС.
Пример: расположения клавиатуры и экрана: 1 Персональный компьютер; 4 Ноутбук; 5 Планшетный компьютер (тачскрин)

''', #8
'''
Изменение геометрической формы области пространства, занимаемой объектом, при расширении этой области, начиная от условной точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат).
Различают следующие этапы развития:
  1. Точка.
  2. Множество точек.
  3. Прямая линия.
  4. Изогнутая линия.
  5. Множество прямых и/или изогнутых линий.
  6. Плоская поверхность.
  7. Искривленная поверхность.
  8. Множество плоских и/или искривленных поверхностей.
  9. Объем.
  10. Множество объемов.
Пример: 1 Кнопка; 3 Ползунок; 4 Колесо регулировки; 6 Сенсорная панель; 7 Шаровой манипулятор (трекбол); 9 Система разпознавания жестов

''', #9
'''
Изменение геометрического объекта (от поверхности к линии до точки), относительно которого симметрично расположены объекты в ТС.
Различают следующие этапы развития:
  1. Асимметричность.
  2. Двусторонняя симметрия.
  3. Осевая (аксиальная, n-го порядка) симметрия.
  4. Центральная (сферическая) симметрия
Пример: 1 Лопасть; 2 Двухлопастной винт; 3 Многолопастный винт; 4 Поворотный винтовой движитель

''', #10
'''
Изменение области пустого пространства внутри объекта и изменение равномерности и неравномерности распределения области пустого пространства внутри объекта.
Различают следующие этапы развития:
1. Сплошной объект.
2. Область пустого пространства без прямого контакта с объектом.
3. Область пустого пространства соприкасается с объектом.
4. Область пустого пространства частично вклинивается в объект.
5. Пустое пространство внутри объекта.
6. Раздробленное (разделенное) пустое пространство внутри объекта.
7. Сквозная область пустого пространства внутри объекта.
8. Несколько сквозных областей пустого пространства внутри объекта.
9. Пористая структура объекта.
10. Капиллярная структура объекта.
11. Микрокапиллярная или микропористая структура
Пример: 1 Цельный кирпич; 4 Кирпич с рельефной поверхностью; 8 Пеноблок; 9 Пустотелый кирпич

''', #11
'''
Уменьшение/увеличение размера и соответственно увеличение/уменьшение количества отдельных цельных частей объекта, совместно выполняющих главную, основную или вспомогательную функцию
Различают следующие этапы развития:
1. Единичный цельный объект.
2. Объект, разделенный на части.
3. Объект, разделенный до дисперсной структуры.
4. Объект, разделенный до молекул.
5. Объект, разделенный до атомов или ионов.
6. Объект, разделенный до элементарных частиц.
Пример: обработка материала: 1 Цельный твердый инструмент; 2 Инструмент разделенный на части; 3 Пескоструйная обработка; 4 Резка струёй воды; 5 Плазменная резка; 6 Лазерная резка

''', #12
'''
Изменение подвижности соединения, в том числе за счет изменения упругости и/или текучести элемента, выполняющего функции соединителя.
Различают следующие этапы развития:
1. Жесткое неподвижное соединение.
2. Жесткое подвижное соединение (шарнирное).
3. Упругое соединение.
4. Пластичное соединение.
5. Соединение жидкой и/или газовой средой.
6. Соединение полем.
7. Отсутствие соединения
Пример: 1 Глухая муфта; 2 Шарнирная муфта; 3 Упругая муфта; 5 Гидравлическая муфта; 6 Магнитная муфта

''', #13
'''
Изменение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение/установление четких границ между областями с различными свойствами.
Различают следующие этапы развития:
1. Свойства материала в объекте равномерно распределены.
2. Различные свойства материала в объекте равномерно распределены в пределах областей, имеющих четкие границы.
3. Области материала объекта имеют различные свойства с четкими границами между областями, равномерно распределенными внутри объекта.
4. Области материала объекта имеют различные свойства с четкими границами между областями и неравномерно распределены в объекте.
5. Области материала объекта имеют различные свойства с «размытыми» границами между областями с разными свойствами.
6. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые равномерно распределены в объекте.
7. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые неравномерно распределены в объекте.
8. Области материала объекта имеют различные свойства, распределенные в областях неравномерно, без определенных границ между областями или с изменяющимся во времени распределением областей и/или границами.
Пример: 1 Цельный бетон; 2 Упрочнение перекрытий стальным прокатом; 3 Железобетон; 4 Анкерное крепление; 7 Сталефибробетон
'''
]

#@title ЗПР 3 (добавлены этапы!!!)
zpr_array = [
#1
'''Изменение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте (которому принадлежит поверхность) при одновременном увеличении разнообразия контактных свойств поверхности.
  Различают следующие этапы развития:
  1. гладкая
  2. шероховатая хаотичная
  3. шероховатая, неровности ЗАДАННОЙ формы расположенные хаотично или неровности произвольной формы расположенные УПОРЯДОЧЕННО
  4. шероховатая, неровности ЗАДАННОЙ формы расположенные УПОРЯДОЧЕННО
  5. Поверхность с углублениями или сквозными отверстиями (неправильной или правильной формы, расположенными по поверхности хаотично или упорядоченно)
  6. Поверхность с контактными свойствами, определяемыми химическим составом и молекулярной (или нано-) структурой вещества на поверхности
    (антифрикционными, адгезионными, адсорбционными, отражающими и др.)
     или свойствами подповерхностного материала (намагниченность, высокая впитывающая способность, упругость и др.)
  7. Поверхность с возможностью замены свойств.
  8. Поверхность с возможностью замены свойств и управления их параметрами.
  9. Поверхность, состоящая из участков с возможностью замены свойств и управления их параметрами.
  10. Поверхность с микро или наноструктурами которые могут изменять свои свойства в зависимости от условий окружающей среды или внешних воздействий
  11. Поверхность с адаптивными свойствами способными автоматически подстраиваться под условия эксплуатации
  12. Поверхность с программируемыми свойствами позволяющими пользователю задавать нужные характеристики через интерфейс управления

Пример: рукоятки
''', #2
'''
Изменение плотности потока преобразуемой в ТС энергии
  Различают следующие этапы развития:
  1. Мускульная сила
  2. Механическая энергия (потенциальная, в том числе градиент гравитационного поля, и кинетическая).
  3. Тепловая энергия
  4. Энергия электромагнитного поля или химическая
  5. Солнечная энергия (фотоэлектрические панели преобразуют солнечную радиацию в электрическую энергию)
  6. Геотермальная энергия (использование тепла Земли)
  7. Ядерная энергия или энергия потока элементарных частиц.
Пример:  плавательное судно 1. Гребное 2. Парусное 3. Пароход 4. Дизельное судно 7. Атомоход
''', #3
'''
Изменение неравномерности движения и траектории движения.
  Различают следующие этапы развития:
  1. Равномерное поступательное движение.
  2. Равноускоренное (равнозамедленное) поступательное движение.
  3. Неравномерное поступательное движение.
  4. Равномерное вращательное движение.
  5. Равноускоренное (равнозамедленное) вращательное движение.
  6. Неравномерное вращательное движение.
  7. Равномерное сложное движение.
  8. Равноускоренное (равнозамедленное) сложное движение.
  9. Неравномерное сложное движение.
Пример:  сушилки сыпучих материалов: 1,2 Камерная; 6 Барабанная; 9 Сушилка с псевдоожиженым слоем
''', #4
'''
Изменение числа степеней свободы движения механического движения элементов технической системы
  Различают следующие этапы развития:
  1 Отсутствие подвижности - крепление элемента в одном положении
  2 Одна степень свободы - движение по одной оси
  3 Две степени свободы -  перемещение по двум осям
  4 Три степени свободы - перемещение по трём осям
  5 Четыре степени свободы - добавляется поворот вокруг одной из осей
  6 Пять степеней свободы - повороты вокруг двух осей
  7 Шесть степеней свободы - возможность поворота вокруг всех трёх осей
Пример: Кресло; Кресло на колесиках; Кресло с подъёмным механизмом
''', #5
'''
Изменение области механического контакта объектов, начиная от точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат) и при этом изменение соответственно длины, площади и объема области контакта.
  Различают следующие этапы развития:
  1. Отсутствие контакта
  2. Точка.
  3. Множество точек.
  4. Линия.
  5. Множество линий.
  6. Комбинация точек и линий.
  7. Поверхность.
  8. Множество поверхностей.
  9. Комбинация точек, линий и поверхностей.
  10. Объем.
  11. Множество объемов.
  12. Комбинация точек, линий, поверхностей и объемов.
Пример: 2 подголовник; 4 ремень безопасности 7. Подушка безопасности
''', #6
'''
Изменение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве.
Различают следующие этапы развития:
  1. Линейная или кольцевая структура.
  2. Разветвленная (иерархическая) структура или структура типа «звезда».
  3. Многосвязная (в том числе сетевая, сотовая) структура.
  4. Гибридная (комбинированная) структура.
  5. Изменяющаяся во времени структура (адаптивная).
Пример: 1 Акведук; 2 Система оросительных каналов; 3 Ирригационная система; 5 Плотина со шлюзами

''', #7
'''
Изменение расположения пары элементов в ТС - от отсутствия контакта между ними до слияния в единый элемент.
Различают следующие этапы развития:
  1. Элемент ТС не соприкасается с другим элементом ТС и находится далеко.
  2. Элемент ТС не соприкасается с другим элементом ТС, но находится рядом.
  3. Элемент ТС соприкасается с другим элементом ТС.
  4. Элемент ТС полностью покрывает (обволакивает) другой элемент TC.
  5. Элемент ТС частично проникает (входит) в другой элемент ТС.
  6. Элемент ТС расположен внутри другого элемента ТС, но соприкасается с внешней средой.
  7. Элемент ТС расположен внутри другого элемента ТС и не соприкасается с внешней средой.
  8. Элемент ТС разделен и распределен по частям внутри другого элемента ТС.
  9. Элемент ТС растворен внутри другого элемента ТС.
Пример: расположения клавиатуры и экрана: 2 Персональный компьютер; 5 Ноутбук; 6 Планшетный компьютер (тачскрин)

''', #8
'''
Изменение геометрической формы области пространства, занимаемой объектом, при расширении этой области, начиная от условной точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат).
Различают следующие этапы развития:
  1. Точка.
  2. Множество точек.
  3. Прямая линия.
  4. Изогнутая линия.
  5. Множество прямых и/или изогнутых линий.
  6. Плоская поверхность.
  7. Искривленная поверхность.
  8. Множество плоских и/или искривленных поверхностей.
  9. Объем.
  10. Множество объемов.
Пример: 1 Кнопка; 3 Ползунок; 4 Колесо регулировки; 6 Сенсорная панель; 7 Шаровой манипулятор (трекбол); 9 Система разпознавания жестов

''', #9
'''
Изменение геометрического объекта (от поверхности к линии до точки), относительно которого симметрично расположены объекты в ТС.
Различают следующие этапы развития:
  1. Асимметричность.
  2. Промежуточный этап между отсутствием симметрии и двусторонней симметрией.
  3. Двусторонняя симметрия.
  4. Осевая (аксиальная, n-го порядка) симметрия.
  5. Центральная (сферическая) симметрия.
  6. Комбинирование различных видов симметрии в одном объекте.
Пример: 1 Лопасть; 3 Двухлопастной винт; 4 Многолопастный винт; 5 Поворотный винтовой движитель

''', #10
'''
Изменение области пустого пространства внутри объекта и изменение равномерности и неравномерности распределения области пустого пространства внутри объекта.
Различают следующие этапы развития:
1. Сплошной объект.
2. Область пустого пространства без прямого контакта с объектом.
3. Область пустого пространства соприкасается с объектом.
4. Область пустого пространства частично вклинивается в объект.
5. Пустое пространство внутри объекта.
6. Раздробленное (разделенное) пустое пространство внутри объекта.
7. Сквозная область пустого пространства внутри объекта.
8. Несколько сквозных областей пустого пространства внутри объекта.
9. Пористая структура объекта.
10. Капиллярная структура объекта.
11. Микрокапиллярная или микропористая структура
Пример: 1 Цельный кирпич; 4 Кирпич с рельефной поверхностью; 8 Пеноблок; 9 Пустотелый кирпич

''', #11
'''
Уменьшение/увеличение размера и соответственно увеличение/уменьшение количества отдельных цельных частей объекта, совместно выполняющих главную, основную или вспомогательную функцию
Различают следующие этапы развития:
1. Единичный цельный объект.
2. Объект, разделенный на части.
3. Объект в котором отдельные части объединены в группы.
4. Объект, разделенный до дисперсной структуры.
5. Объект, разделенный до молекул.
6. Объект, разделенный до атомов или ионов.
7. Объект, разделенный до элементарных частиц.
Пример: обработка материала: 1 Цельный твердый инструмент; 2 Инструмент разделенный на части; 4 Пескоструйная обработка; 5 Резка струёй воды; 6 Плазменная резка; 7 Лазерная резка

''', #12
'''
Изменение подвижности соединения, в том числе за счет изменения упругости и/или текучести элемента, выполняющего функции соединителя.
Различают следующие этапы развития:
1. Жесткое неподвижное соединение.
2. Неподвижное соединение с возможностью регулировки (например, с использованием регулировочных болтов или гаек).
3. Жесткое подвижное соединение (шарнирное).
4. Упругое соединение.
5. Пластичное соединение.
6. Соединение жидкой и/или газовой средой.
7. Соединение полем (например электромагнитным).
8. Отсутствие соединения.
Пример: 1 Глухая муфта; 3 Шарнирная муфта; 4 Упругая муфта; 6 Гидравлическая муфта; 7 Магнитная муфта

''', #13
'''
Изменение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение/установление четких границ между областями с различными свойствами.
Различают следующие этапы развития:
1. Свойства материала в объекте равномерно распределены.
2. Различные свойства материала в объекте равномерно распределены в пределах областей, имеющих четкие границы.
3. Области материала объекта имеют различные свойства с четкими границами между областями, равномерно распределенными внутри объекта.
4. Области материала объекта имеют различные свойства с четкими границами между областями и неравномерно распределены в объекте.
5. Области материала объекта имеют различные свойства с «размытыми» границами между областями с разными свойствами.
6. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые равномерно распределены в объекте.
7. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые неравномерно распределены в объекте.
8. Области материала объекта имеют различные свойства, распределенные в областях неравномерно, без определенных границ между областями или с изменяющимся во времени распределением областей и/или границами.
9. Области материала объекта имеют различные свойства, из распределение и границы адаптивно изменяются
Пример: 1 Цельный бетон; 2 Упрочнение перекрытий стальным прокатом; 3 Железобетон; 4 Анкерное крепление; 7 Сталефибробетон
'''
]

#@title ЗПР 4 (добавлены ЭТАПЫ и перенесены ПРИМЕРЫ)
zpr_array = [
#1
'''Изменение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте (которому принадлежит поверхность) при одновременном увеличении разнообразия контактных свойств поверхности.
  Различают следующие этапы развития:
  1. гладкая
  2. шероховатая хаотичная
  3. шероховатая, неровности ЗАДАННОЙ формы расположенные хаотично или неровности произвольной формы расположенные УПОРЯДОЧЕННО
  4. шероховатая, неровности ЗАДАННОЙ формы расположенные УПОРЯДОЧЕННО (например рукоятка теннисной ракетки)
  5. Поверхность с углублениями или сквозными отверстиями (неправильной или правильной формы, расположенными по поверхности хаотично или упорядоченно)
  6. Поверхность с контактными свойствами, определяемыми химическим составом и молекулярной (или нано-) структурой вещества на поверхности
    (антифрикционными, адгезионными, адсорбционными, отражающими и др.)
     или свойствами подповерхностного материала (намагниченность, высокая впитывающая способность, упругость и др.)
  7. Поверхность с возможностью замены свойств.
  8. Поверхность с возможностью замены свойств и управления их параметрами.
  9. Поверхность, состоящая из участков с возможностью замены свойств и управления их параметрами.
  10. Поверхность с микро или наноструктурами которые могут изменять свои свойства в зависимости от условий окружающей среды или внешних воздействий
  11. Поверхность с адаптивными свойствами способными автоматически подстраиваться под условия эксплуатации
  12. Поверхность с программируемыми свойствами позволяющими пользователю задавать нужные характеристики через интерфейс управления
''', #2
'''
Изменение плотности потока преобразуемой в ТС энергии
  Различают следующие этапы развития:
  1. Мускульная сила (например: гребное судно )
  2. Механическая энергия - потенциальная, и кинетическая, в том числе энергия гравитационного поля, энергия ветра и тп. (например: парусное судно)
  3. Тепловая энергия (например: пароход)
  4. Энергия электромагнитного поля или химическая (например: дизельное судно)
  5. Солнечная энергия (фотоэлектрические панели преобразуют солнечную радиацию в электрическую энергию)
  6. Геотермальная энергия (использование тепла Земли)
  7. Ядерная энергия или энергия потока элементарных частиц.  (например: атомоход)
''', #3
'''
Изменение неравномерности движения и траектории движения.
  Различают следующие этапы развития:
  1. Равномерное поступательное движение.
  2. Равноускоренное (равнозамедленное) поступательное движение (например: камерная сушилка сыпучих материалов)
  3. Неравномерное поступательное движение.
  4. Равномерное вращательное движение.
  5. Равноускоренное (равнозамедленное) вращательное движение.
  6. Неравномерное вращательное движение  (например: барабанная сушилка сыпучих материалов)
  7. Равномерное сложное движение.
  8. Равноускоренное (равнозамедленное) сложное движение.
  9. Неравномерное сложное движение  (например: сушилка сыпучих материалов с псевдоожиженым слоем)
''', #4
'''
Изменение числа степеней свободы движения механического движения элементов технической системы
  Различают следующие этапы развития:
  1 Отсутствие подвижности - крепление элемента в одном положении (например: стационарное кресло)
  2 Одна степень свободы - движение по одной оси  (например: кресло с механизмом наклона спинки)
  3 Две степени свободы -  перемещение по двум осям (например: кресло на колесиках)
  4 Три степени свободы - перемещение по трём осям (например: кресло на колесиках с подъёмным механизмом)
  5 Четыре степени свободы - поворот вокруг одной из осей (например: вращающееся кресло)
  6 Пять степеней свободы - повороты вокруг двух осей
  7 Шесть степеней свободы - возможность поворота вокруг всех трёх осей
''', #5
'''
Изменение области механического контакта объектов, начиная от точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат) и при этом изменение соответственно длины, площади и объема области контакта.
  Различают следующие этапы развития:
  1. Отсутствие контакта
  2. Точка (например система безопасности в автомобиле: подголовник)
  3. Множество точек.
  4. Линия (например система безопасности в автомобиле: ремень безопасности)
  5. Множество линий.
  6. Комбинация точек и линий.
  7. Поверхность (например система безопасности в автомобиле: подушка безопасности)
  8. Множество поверхностей.
  9. Комбинация точек, линий и поверхностей.
  10. Объем.
  11. Множество объемов.
  12. Комбинация точек, линий, поверхностей и объемов.
''', #6
'''
Изменение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве.
Различают следующие этапы развития:
  1. Линейная или кольцевая структура (например: акведук)
  2. Разветвленная (иерархическая) структура или структура типа «звезда» (например: система оросительных каналов)
  3. Многосвязная (в том числе сетевая, сотовая) структура (например: ирригационная система)
  4. Гибридная (комбинированная) структура.
  5. Изменяющаяся во времени структура (адаптивная) (например: плотина со шлюзами)
''', #7
'''
Изменение расположения пары элементов в ТС - от отсутствия контакта между ними до слияния в единый элемент.
Различают следующие этапы развития:
  1. Элемент ТС не соприкасается с другим элементом ТС и находится далеко.
  2. Элемент ТС не соприкасается с другим элементом ТС, но находится рядом (на примере расположения клавиатуры и экрана: персональный компьютер)
  3. Элемент ТС соприкасается с другим элементом ТС (на примере расположения клавиатуры и экрана: ноутбук)
  4. Элемент ТС полностью покрывает (обволакивает) другой элемент TC.
  5. Элемент ТС частично проникает (входит) в другой элемент ТС
  6. Элемент ТС расположен внутри другого элемента ТС, но соприкасается с внешней средой (на примере расположения клавиатуры и экрана: планшетный компьютер)
  7. Элемент ТС расположен внутри другого элемента ТС и не соприкасается с внешней средой.
  8. Элемент ТС разделен и распределен по частям внутри другого элемента ТС.
  9. Элемент ТС растворен внутри другого элемента ТС.
''', #8
'''
Изменение геометрической формы области пространства, занимаемой объектом, при расширении этой области, начиная от условной точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат).
Различают следующие этапы развития:
  1. Точка (на примере ТС "элемент управления": кнопка)
  2. Множество точек.
  3. Прямая линия (на примере ТС "элемент управления": ползунок)
  4. Изогнутая линия (на примере ТС "элемент управления": колесо регулировки;)
  5. Множество прямых и/или изогнутых линий.
  6. Плоская поверхность (на примере ТС "элемент управления": сенсорная панель)
  7. Искривленная поверхность (на примере ТС "элемент управления": шаровой манипулятор - трекбол)
  8. Множество плоских и/или искривленных поверхностей.
  9. Объем (на примере ТС "элемент управления": система разпознавания жестов)
  10. Множество объемов
''', #9
'''
Изменение геометрического объекта (от поверхности к линии до точки), относительно которого симметрично расположены объекты в ТС.
Различают следующие этапы развития:
  1. Асимметричность (например: лопасть)
  2. Двусторонняя симметрия (например: двухлопастной винт)
  3. Осевая (аксиальная, n-го порядка) симметрия (например: многолопастный винт)
  4. Центральная (сферическая) симметрия (например: поворотный винтовой движитель)
  5. Комбинирование различных видов симметрии в одном объекте.
''', #10
'''
Изменение области пустого пространства внутри объекта и изменение равномерности и неравномерности распределения области пустого пространства внутри объекта.
Различают следующие этапы развития:
1. Сплошной объект (например: цельный кирпич)
2. Область пустого пространства без прямого контакта с объектом.
3. Область пустого пространства соприкасается с объектом.
4. Область пустого пространства частично вклинивается в объект (например: кирпич с рельефной поверхностью)
5. Пустое пространство внутри объекта (например: пустотелый кирпич)
6. Раздробленное (разделенное) пустое пространство внутри объекта.
7. Сквозная область пустого пространства внутри объекта.
8. Несколько сквозных областей пустого пространства внутри объекта.
9. Пористая структура объекта (например: пеноблок)
10. Капиллярная структура объекта.
11. Микрокапиллярная или микропористая структура
''', #11
'''
Уменьшение/увеличение размера и соответственно увеличение/уменьшение количества отдельных цельных частей объекта, совместно выполняющих главную, основную или вспомогательную функцию
Различают следующие этапы развития:
1. Единичный цельный объект (на примере инстументов обработки твердых материалов: цельный резак)
2. Объект, разделенный на части (на примере инстументов обработки твердых материалов: резак разделенный на части)
3. Объект в котором отдельные части объединены в группы.
4. Объект, разделенный до дисперсной структуры (на примере инстументов обработки твердых материалов: пескоструйная обработка)
5. Объект, разделенный до молекул (на примере инстументов обработки твердых материалов: резка струёй воды)
6. Объект, разделенный до атомов или ионов (на примере инстументов обработки твердых материалов:  плазменная резка)
7. Объект, разделенный до элементарных частиц (на примере инстументов обработки твердых материалов:  лазерная резка)
''', #12
'''
Изменение подвижности соединения, в том числе за счет изменения упругости и/или текучести элемента, выполняющего функции соединителя.
Различают следующие этапы развития:
1. Жесткое неподвижное соединение (например: глухая муфта)
2. Неподвижное соединение с возможностью регулировки (например, с использованием регулировочных болтов или гаек)
3. Жесткое подвижное соединение (шарнирное) (например: шарнирная муфта)
4. Упругое соединение (например: упругая муфта)
5. Пластичное соединение
6. Соединение жидкой и/или газовой средой (например: гидравлическая муфта)
7. Соединение полем  (например: магнитная муфта)
8. Отсутствие соединения
''', #13
'''
Изменение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение/установление четких границ между областями с различными свойствами.
Различают следующие этапы развития:
1. Свойства материала в объекте равномерно распределены (например: цельный бетон)
2. Различные свойства материала в объекте равномерно распределены в пределах областей, имеющих четкие границы (например: упрочнение перекрытий стальным прокатом)
3. Области материала объекта имеют различные свойства с четкими границами между областями, равномерно распределенными внутри объекта (например: железобетон)
4. Области материала объекта имеют различные свойства с четкими границами между областями и неравномерно распределены в объекте (например: анкерное крепление)
5. Области материала объекта имеют различные свойства с «размытыми» границами между областями с разными свойствами.
6. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые равномерно распределены в объекте.
7. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые неравномерно распределены в объекте (например: сталефибробетон)
8. Области материала объекта имеют различные свойства, распределенные в областях неравномерно, без определенных границ между областями или с изменяющимся во времени распределением областей и/или границами.
9. Области материала объекта имеют различные свойства, из распределение и границы адаптивно изменяются
'''
]

#@title ЗПР 5 переформулировка
zpr_array = [
#1
'''Изменение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте (которому принадлежит поверхность) при одновременном увеличении разнообразия контактных свойств поверхности.
  Различают следующие этапы развития:
  1. гладкая
  2. шероховатая хаотичная
  3. шероховатая, неровности ЗАДАННОЙ формы расположенные хаотично или неровности произвольной формы расположенные УПОРЯДОЧЕННО
  4. шероховатая, неровности ЗАДАННОЙ формы расположенные УПОРЯДОЧЕННО (например рукоятка теннисной ракетки)
  5. Поверхность с углублениями или сквозными отверстиями (неправильной или правильной формы, расположенными по поверхности хаотично или упорядоченно)
  6. Поверхность с контактными свойствами, определяемыми химическим составом и молекулярной (или нано-) структурой вещества на поверхности
    (антифрикционными, адгезионными, адсорбционными, отражающими и др.)
     или свойствами подповерхностного материала (намагниченность, высокая впитывающая способность, упругость и др.)
  7. Поверхность с возможностью замены свойств.
  8. Поверхность с возможностью замены свойств и управления их параметрами.
  9. Поверхность, состоящая из участков с возможностью замены свойств и управления их параметрами.
  10. Поверхность с микро или наноструктурами которые могут изменять свои свойства в зависимости от условий окружающей среды или внешних воздействий
  11. Поверхность с адаптивными свойствами способными автоматически подстраиваться под условия эксплуатации
  12. Поверхность с программируемыми свойствами позволяющими пользователю задавать нужные характеристики через интерфейс управления
''', #2
'''
Изменение плотности потока преобразуемой в ТС энергии
  Различают следующие этапы развития:
  1. Мускульная сила (например: гребное судно )
  2. Механическая энергия - потенциальная, и кинетическая, в том числе энергия гравитационного поля, энергия ветра и тп. (например: парусное судно)
  3. Тепловая энергия (например: пароход)
  4. Энергия электромагнитного поля или химическая (например: дизельное судно)
  5. Солнечная энергия (фотоэлектрические панели преобразуют солнечную радиацию в электрическую энергию)
  6. Геотермальная энергия (использование тепла Земли)
  7. Ядерная энергия или энергия потока элементарных частиц.  (например: атомоход)
''', #3
'''
Изменение неравномерности движения и траектории движения.
  Различают следующие этапы развития:
  1. Равномерное поступательное движение.
  2. Равноускоренное (равнозамедленное) поступательное движение (например: камерная сушилка сыпучих материалов)
  3. Неравномерное поступательное движение.
  4. Равномерное вращательное движение.
  5. Равноускоренное (равнозамедленное) вращательное движение.
  6. Неравномерное вращательное движение  (например: барабанная сушилка сыпучих материалов)
  7. Равномерное сложное движение.
  8. Равноускоренное (равнозамедленное) сложное движение.
  9. Неравномерное сложное движение  (например: сушилка сыпучих материалов с псевдоожиженым слоем)
''', #4
'''
Изменение числа степеней свободы движения механического движения элементов технической системы
  Различают следующие этапы развития:
  1 Отсутствие подвижности - крепление элемента в одном положении (например: стационарное кресло)
  2 Одна степень свободы - движение по одной оси  (например: кресло с механизмом наклона спинки)
  3 Две степени свободы -  перемещение по двум осям (например: кресло на колесиках)
  4 Три степени свободы - перемещение по трём осям (например: кресло на колесиках с подъёмным механизмом)
  5 Четыре степени свободы - поворот вокруг одной из осей (например: вращающееся кресло)
  6 Пять степеней свободы - повороты вокруг двух осей
  7 Шесть степеней свободы - возможность поворота вокруг всех трёх осей
''', #5
'''
Изменение области механического контакта объектов, начиная от точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат) и при этом изменение соответственно длины, площади и объема области контакта.
  Различают следующие этапы развития:
  1. Отсутствие контакта
  2. Точка (например система безопасности в автомобиле: подголовник)
  3. Множество точек.
  4. Линия (например система безопасности в автомобиле: ремень безопасности)
  5. Множество линий.
  6. Комбинация точек и линий.
  7. Поверхность (например система безопасности в автомобиле: подушка безопасности)
  8. Множество поверхностей.
  9. Комбинация точек, линий и поверхностей.
  10. Объем.
  11. Множество объемов.
  12. Комбинация точек, линий, поверхностей и объемов.
''', #6
'''
Изменение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве.
Различают следующие этапы развития:
  1. Линейная или кольцевая структура (например: акведук)
  2. Разветвленная (иерархическая) структура или структура типа «звезда» (например: система оросительных каналов)
  3. Многосвязная (в том числе сетевая, сотовая) структура (например: ирригационная система)
  4. Гибридная (комбинированная) структура.
  5. Изменяющаяся во времени структура (адаптивная) (например: плотина со шлюзами)
''', #7
'''
Изменение расположения пары элементов в ТС - от отсутствия контакта между ними до слияния в единый элемент.
Различают следующие этапы развития:
  1. Элемент ТС не соприкасается с другим элементом ТС и находится далеко.
  2. Элемент ТС не соприкасается с другим элементом ТС, но находится рядом (на примере расположения клавиатуры и экрана: персональный компьютер)
  3. Элемент ТС соприкасается с другим элементом ТС (на примере расположения клавиатуры и экрана: ноутбук)
  4. Элемент ТС полностью покрывает (обволакивает) другой элемент TC.
  5. Элемент ТС частично проникает (входит) в другой элемент ТС
  6. Элемент ТС расположен внутри другого элемента ТС, но соприкасается с внешней средой (на примере расположения клавиатуры и экрана: планшетный компьютер)
  7. Элемент ТС расположен внутри другого элемента ТС и не соприкасается с внешней средой.
  8. Элемент ТС разделен и распределен по частям внутри другого элемента ТС.
  9. Элемент ТС растворен внутри другого элемента ТС.
''', #8
'''
Изменение геометрической формы области пространства, занимаемой объектом, при расширении этой области, начиная от условной точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат).
Различают следующие этапы развития:
  1. Точка (например элемент управления: кнопка)
  2. Множество точек.
  3. Прямая линия (например элемент управления: ползунок)
  4. Изогнутая линия (например элемент управления: колесо регулировки;)
  5. Множество прямых и/или изогнутых линий.
  6. Плоская поверхность (например элемент управления: сенсорная панель)
  7. Искривленная поверхность (например элемент управления: шаровой манипулятор - трекбол)
  8. Множество плоских и/или искривленных поверхностей.
  9. Объем (например элемент управления: система разпознавания жестов)
  10. Множество объемов
''', #9
'''
Изменение геометрического объекта (от поверхности к линии до точки), относительно которого симметрично расположены объекты в ТС.
Различают следующие этапы развития:
  1. Асимметричность (например: лопасть)
  2. Двусторонняя симметрия (например: двухлопастной винт)
  3. Осевая (аксиальная, n-го порядка) симметрия (например: многолопастный винт)
  4. Центральная (сферическая) симметрия (например: поворотный винтовой движитель)
  5. Комбинирование различных видов симметрии в одном объекте.
''', #10
'''
Изменение области пустого пространства внутри объекта и изменение равномерности и неравномерности распределения области пустого пространства внутри объекта.
Различают следующие этапы развития:
1. Сплошной объект (например: цельный кирпич)
2. Область пустого пространства без прямого контакта с объектом.
3. Область пустого пространства соприкасается с объектом.
4. Область пустого пространства частично вклинивается в объект (например: кирпич с рельефной поверхностью)
5. Пустое пространство внутри объекта (например: пустотелый кирпич)
6. Раздробленное (разделенное) пустое пространство внутри объекта.
7. Сквозная область пустого пространства внутри объекта.
8. Несколько сквозных областей пустого пространства внутри объекта.
9. Пористая структура объекта (например: пеноблок)
10. Капиллярная структура объекта.
11. Микрокапиллярная или микропористая структура
''', #11
'''
Уменьшение/увеличение размера и соответственно увеличение/уменьшение количества отдельных цельных частей объекта, совместно выполняющих главную, основную или вспомогательную функцию
Различают следующие этапы развития:
1. Единичный цельный объект (например инстумент обработки твердых материалов: цельный резак)
2. Объект, разделенный на части (например инстумент обработки твердых материалов: резак разделенный на части)
3. Объект в котором отдельные части объединены в группы.
4. Объект, разделенный до дисперсной структуры (например инстумент обработки твердых материалов: пескоструйная обработка)
5. Объект, разделенный до молекул (например инстумент обработки твердых материалов: резка струёй воды)
6. Объект, разделенный до атомов или ионов (например инстумент обработки твердых материалов:  плазменная резка)
7. Объект, разделенный до элементарных частиц (например инстумент обработки твердых материалов:  лазерная резка)
''', #12
'''
Изменение подвижности соединения, в том числе за счет изменения упругости и/или текучести элемента, выполняющего функции соединителя.
Различают следующие этапы развития:
1. Жесткое неподвижное соединение (например: глухая муфта)
2. Неподвижное соединение с возможностью регулировки (например, с использованием регулировочных болтов или гаек)
3. Жесткое подвижное соединение (шарнирное) (например: шарнирная муфта)
4. Упругое соединение (например: упругая муфта)
5. Пластичное соединение
6. Соединение жидкой и/или газовой средой (например: гидравлическая муфта)
7. Соединение полем  (например: магнитная муфта)
8. Отсутствие соединения
''', #13
'''
Изменение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение/установление четких границ между областями с различными свойствами.
Различают следующие этапы развития:
1. Свойства материала в объекте равномерно распределены (например: цельный бетон)
2. Различные свойства материала в объекте равномерно распределены в пределах областей, имеющих четкие границы (например: упрочнение перекрытий стальным прокатом)
3. Области материала объекта имеют различные свойства с четкими границами между областями, равномерно распределенными внутри объекта (например: железобетон)
4. Области материала объекта имеют различные свойства с четкими границами между областями и неравномерно распределены в объекте (например: анкерное крепление)
5. Области материала объекта имеют различные свойства с «размытыми» границами между областями с разными свойствами.
6. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые равномерно распределены в объекте.
7. Области материала объекта имеют различные свойства с «размытыми» границами между областями, которые неравномерно распределены в объекте (например: сталефибробетон)
8. Области материала объекта имеют различные свойства, распределенные в областях неравномерно, без определенных границ между областями или с изменяющимся во времени распределением областей и/или границами.
9. Области материала объекта имеют различные свойства, из распределение и границы адаптивно изменяются
'''
]

#@title ЗПР 6 переформулировка заголовков
zpr_array = [
#1
'''Изменение глубины расположения и плотности распределения источников контактных свойств поверхности в объекте в технической системе, при одновременном увеличении разнообразия контактных свойств поверхности.
  Различают следующие этапы развития:
  1. гладкая
  2. шероховатая хаотичная
  3. шероховатая, неровности ЗАДАННОЙ формы расположенные хаотично или неровности произвольной формы расположенные УПОРЯДОЧЕННО
  4. шероховатая, неровности ЗАДАННОЙ формы расположенные УПОРЯДОЧЕННО (например рукоятка теннисной ракетки)
  5. Поверхность с углублениями или сквозными отверстиями (неправильной или правильной формы, расположенными по поверхности хаотично или упорядоченно)
  6. Поверхность с контактными свойствами, определяемыми химическим составом и молекулярной (или нано-) структурой вещества на поверхности
    (антифрикционными, адгезионными, адсорбционными, отражающими и др.)
     или свойствами подповерхностного материала (намагниченность, высокая впитывающая способность, упругость и др.)
  7. Поверхность с возможностью замены свойств.
  8. Поверхность с возможностью замены свойств и управления их параметрами.
  9. Поверхность, состоящая из участков с возможностью замены свойств и управления их параметрами.
  10. Поверхность с микро или наноструктурами которые могут изменять свои свойства в зависимости от условий окружающей среды или внешних воздействий
  11. Поверхность с адаптивными свойствами способными автоматически подстраиваться под условия эксплуатации
  12. Поверхность с программируемыми свойствами позволяющими пользователю задавать нужные характеристики через интерфейс управления
''', #2
'''
Изменение плотности потока преобразуемой в технической системе энергии
  Различают следующие этапы развития:
  1. Мускульная сила (например: гребное судно )
  2. Механическая энергия - потенциальная, и кинетическая, в том числе энергия гравитационного поля, энергия ветра и тп. (например: парусное судно)
  3. Тепловая энергия (например: пароход)
  4. Энергия электромагнитного поля или химическая (например: дизельное судно)
  5. Солнечная энергия (фотоэлектрические панели преобразуют солнечную радиацию в электрическую энергию)
  6. Геотермальная энергия (использование тепла Земли)
  7. Ядерная энергия или энергия потока элементарных частиц.  (например: атомоход)
''', #3
'''
Изменение неравномерности движения и траектории движения.
  Различают следующие этапы развития:
  1. Равномерное поступательное движение.
  2. Равноускоренное (равнозамедленное) поступательное движение (например: камерная сушилка сыпучих материалов)
  3. Неравномерное поступательное движение.
  4. Равномерное вращательное движение.
  5. Равноускоренное (равнозамедленное) вращательное движение.
  6. Неравномерное вращательное движение  (например: барабанная сушилка сыпучих материалов)
  7. Равномерное сложное движение.
  8. Равноускоренное (равнозамедленное) сложное движение.
  9. Неравномерное сложное движение  (например: сушилка сыпучих материалов с псевдоожиженым слоем)
''', #4
'''
Изменение числа степеней свободы движения элементов технической системы
  Различают следующие этапы развития:
  1 Отсутствие подвижности - крепление элемента в одном положении (например: стационарное кресло)
  2 Одна степень свободы - движение по одной оси  (например: кресло с механизмом наклона спинки)
  3 Две степени свободы -  перемещение по двум осям (например: кресло на колесиках)
  4 Три степени свободы - перемещение по трём осям (например: кресло на колесиках с подъёмным механизмом)
  5 Четыре степени свободы - поворот вокруг одной из осей (например: вращающееся кресло)
  6 Пять степеней свободы - повороты вокруг двух осей
  7 Шесть степеней свободы - возможность поворота вокруг всех трёх осей
''', #5
'''
Изменение формы механического контакта объектов (контакт в точке, по линии, по плоскости, по объёму) и при этом изменение соответственно длины, площади и объема области контакта.
  Различают следующие этапы развития:
  1. Отсутствие контакта
  2. Точка (например система безопасности в автомобиле: подголовник)
  3. Множество точек.
  4. Линия (например система безопасности в автомобиле: ремень безопасности)
  5. Множество линий.
  6. Комбинация точек и линий.
  7. Поверхность (например система безопасности в автомобиле: подушка безопасности)
  8. Множество поверхностей.
  9. Комбинация точек, линий и поверхностей.
  10. Объем.
  11. Множество объемов.
  12. Комбинация точек, линий, поверхностей и объемов.
''', #6
'''
Изменение конфигурации элементов функциональной структуры ТС и связей между ними в пространстве.
Различают следующие этапы развития:
  1. Линейная или кольцевая структура (например: акведук)
  2. Разветвленная (иерархическая) структура или структура типа «звезда» (например: система оросительных каналов)
  3. Многосвязная (в том числе сетевая, сотовая) структура (например: ирригационная система)
  4. Гибридная (комбинированная) структура.
  5. Изменяющаяся во времени структура (адаптивная) (например: плотина со шлюзами)
''', #7
'''
Изменение расположения пары элементов в технической системе - от отсутствия контакта между ними до слияния в единый элемент.
Различают следующие этапы развития:
  1. Элемент технической системы не соприкасается с другим элементом ТС и находится далеко.
  2. Элемент технической системы не соприкасается с другим элементом ТС, но находится рядом (например расположение клавиатуры и экрана: персональный компьютер)
  3. Элемент технической системы соприкасается с другим элементом (например расположения клавиатуры и экрана: ноутбук)
  4. Элемент технической системы полностью покрывает (обволакивает) другой элемент.
  5. Элемент технической системы частично проникает (входит) в другой элемент
  6. Элемент технической системы расположен внутри другого элемента, но соприкасается с внешней средой (например расположение клавиатуры и экрана: планшетный компьютер)
  7. Элемент технической системы расположен внутри другого элемента и не соприкасается с внешней средой.
  8. Элемент технической системы разделен и распределен по частям внутри другого элемента.
  9. Элемент технической системы растворен внутри другого элемента.
''', #8
'''
Изменение геометрической формы области пространства, занимаемой объектом, при расширении этой области, начиная от условной точечной, последовательно в трех взаимно перпендикулярных направлениях (по трем осям прямоугольной системы координат).
Различают следующие этапы развития:
  1. Точка (например элемент управления: кнопка)
  2. Множество точек.
  3. Прямая линия (например элемент управления: ползунок)
  4. Изогнутая линия (например элемент управления: колесо регулировки;)
  5. Множество прямых и/или изогнутых линий.
  6. Плоская поверхность (например элемент управления: сенсорная панель)
  7. Искривленная поверхность (например элемент управления: шаровой манипулятор - трекбол)
  8. Множество плоских и/или искривленных поверхностей.
  9. Объем (например элемент управления: система разпознавания жестов)
  10. Множество объемов
''', #9
'''
Изменение элемента симметрии (от поверхности к линии до точки), относительно которого симметрично расположены некоторые части технической системы.
Различают следующие этапы развития:
  1. Асимметричность (например: лопасть)
  2. Двусторонняя симметрия (например: двухлопастной винт)
  3. Осевая (аксиальная, n-го порядка) симметрия (например: многолопастный винт)
  4. Центральная (сферическая) симметрия (например: поворотный винтовой движитель)
  5. Комбинирование различных видов симметрии в одном объекте.
''', #10
'''
Внедрение области пустого пространства внутрь объекта и изменение равномерности распределения области пустого пространства внутри объекта.
Различают следующие этапы развития:
1. Сплошной объект (например: цельный кирпич)
2. Область пустого пространства без прямого контакта с объектом.
3. Область пустого пространства соприкасается с объектом.
4. Область пустого пространства частично вклинивается в объект (например: кирпич с рельефной поверхностью)
5. Пустое пространство внутри объекта (например: пустотелый кирпич)
6. Раздробленное (разделенное) пустое пространство внутри объекта.
7. Сквозная область пустого пространства внутри объекта.
8. Несколько сквозных областей пустого пространства внутри объекта.
9. Пористая структура объекта (например: пеноблок)
10. Капиллярная структура объекта.
11. Микрокапиллярная или микропористая структура
''', #11
'''
Изменение количества и соответствующее изменение размеров отдельных отднотипных частей объекта, совместно выполняющих определённую функцию
Различают следующие этапы развития:
1. Единичный цельный объект (например инстумент обработки твердых материалов: цельный резак)
2. Объект, разделенный на части (например инстумент обработки твердых материалов: резак разделенный на части)
3. Объект в котором отдельные части объединены в группы.
4. Объект, разделенный до дисперсной структуры (например инстумент обработки твердых материалов: пескоструйная обработка)
5. Объект, разделенный до молекул (например инстумент обработки твердых материалов: резка струёй воды)
6. Объект, разделенный до атомов или ионов (например инстумент обработки твердых материалов:  плазменная резка)
7. Объект, разделенный до элементарных частиц (например инстумент обработки твердых материалов:  лазерная резка)
''', #12
'''
Изменение подвижности соединения, в том числе за счет изменения упругости и/или текучести элемента, выполняющего функции соединителя.
Различают следующие этапы развития:
1. Жесткое неподвижное соединение (например: глухая муфта)
2. Неподвижное соединение с возможностью регулировки (например, с использованием регулировочных болтов или гаек)
3. Жесткое подвижное соединение (шарнирное) (например: шарнирная муфта)
4. Упругое соединение (например: упругая муфта)
5. Пластичное соединение
6. Соединение жидкой и/или газовой средой (например: гидравлическая муфта)
7. Соединение полем  (например: магнитная муфта)
8. Отсутствие соединения
''', #13
'''
Изменение количества и неравномерности распределения внутри объекта областей с различными свойствами, а также устранение/установление четких границ между областями с различными свойствами.
Различают следующие этапы развития:
1. Свойства материала в объекте равномерно распределены (например: цельный бетон)
2. Различные свойства материала в объекте равномерно распределены в пределах областей, имеющих четкие границы (например: упрочнение перекрытий стальным прокатом)
3. Области материала объекта имеют различные свойства с четкими границами между областями, равномерно распределенными внутри объекта (например: железобетон)
4. Области материала объекта имеют различные свойства с четкими границами между областями и неравномерно распределены в объекте (например: анкерное крепление)
5. Области материала объекта имеют различные свойства с нечеткими границами между областями с разными свойствами.
6. Области материала объекта имеют различные свойства с нечеткими границами между областями, которые равномерно распределены в объекте.
7. Области материала объекта имеют различные свойства с нечеткими границами между областями, которые неравномерно распределены в объекте (например: сталефибробетон)
8. Области материала объекта имеют различные свойства, с изменяющимся во времени распределением областей и четкости границ.
9. Области материала объекта имеют различные свойства, их распределение и границы адаптивно изменяются
'''
]

#@title ЗПР списки version 1-13
#========= ЗПР    =================
#========= ЗПР    =================
#========= ЗПР    =================

zpr_c_list_long = [i for i in range(1,150)] # !!! версии 101,... - это версии 1,.. для СИСТЕМАТИК !!!!
zpr_c_list_long[0]='''
1) Полезность {TS} зависит от контактных свойств поверхностей составляющих её объектов
2) В {TS} происходит преобразование энергии
3) В {TS} происходит движение мелких частей
4) {TS} принесёт больше пользы, если можно будет менять её положение или взаимрасположение её крупных частей
5) Важной частью функционирования {TS} является контакт с объектом
6) Элемент функциональной структуры {TS}, можно преобразовать во множество элементов
7) Отдельные подсистемы {TS} можно сблизить в пространстве или объединить в одну подсистему
8) Геометрическую форму одного из объектов {TS} можно рассматривать условно как точку или плоскость
9) В {TS} существует симметрия относительно плоскости или линии
10) Полезно внедрить область пустого пространства внутрь {TS}
11) В {TS}  есть цельная часть, выполняющую некую функцию, и эту часть можно заменить группой однотипных частей
12) Между частями {TS} существует неподвижное соединение, которое можно сделать подвижным
13) Внутри {TS} существуют области с различными свойствами

14) Для множество элементов функциональной структуры {TS} можно усложнить конфигурацию и связи между ними в пространстве
15) В {TS} есть область или области пустого пространства
16) В {TS} существует группа однотипных частей, выполняющая некую функцию
17) Между частями {TS} существует подвижное соединение
18) {TS} соприкасается с рукой человека
19) В {TS} происходит движение обрабатываемого материала
20) Контакт крупных частей {TS} является важной частью функционирования
'''

#переформулировка
zpr_c_list_long[1]='''
1) Полезность {TS} определяется контактными свойствами поверхностей составляющих её объектов.
2) В {TS} происходит преобразование энергии.
3) В {TS} происходит движение мелких деталей.
4) {TS} будет более полезной, если можно будет менять её положение или взаимное расположение крупных частей.
5) Важной частью работы {TS} является контакт с объектом.
6) Элемент функциональной структуры {TS} можно преобразовать в множество элементов.
7) Отдельные подсистемы {TS} можно сблизить в пространстве или объединить в одну подсистему.
8) Геометрическую форму одного из объектов {TS} можно условно рассматривать как точку или плоскость.
9) В {TS} есть симметрия относительно плоскости или линии.
10) Полезно создать область пустого пространства внутри {TS}.
11) В {TS} есть цельная деталь, которую можно заменить группой однотипных деталей.
12) Между частями {TS} есть неподвижное соединение, которое можно сделать подвижным.
13) Внутри {TS} есть области с разными свойствами.
14) Для множества элементов функциональной структуры {TS} можно усложнить конфигурацию и связи между ними в пространстве.
15) В {TS} есть область или области пустого пространства.
16) В {TS} есть группа однотипных деталей, выполняющая определённую функцию.
17) Между частями {TS} есть подвижное соединение.
18) {TS} соприкасается с рукой человека.
19) В {TS} происходит движение обрабатываемого материала.
20) Контакт крупных частей {TS} является важной частью функционирования.
'''
#=========2
zpr_c_list_long[2]='''
1) Полезность {TS} зависит от свойств поверхностей составляющих её частей.
2) Полезность {TS} зависит от преобразования энергии.
3) Главная функция {TS} реализуется в результате механического движения элементов
4) {TS} будет более полезной, если можно будет менять её положение или взаимное расположение крупных частей.
5) Полезность {TS} зависит от характеристик механического контакта её частей между собой или другими объектами
6) Функциональная структура {TS} характеризуется взаимным расположением её частей в пространстве в виде линии, или кольца, или ветвления, или звезды, или сети, или сотов
7) Известно расположение части {TS} в пространстве относительно расположенных рядом других частей
8) Геометрическую форму наиболее значимой части {TS} можно упрощенно представить в виде точки, линии или плоскости
9) Все известные модификации {TS} имеют одинаковую симметрию или асимметрию расположения частей
10) Полезно создать область пустого пространства внутри {TS}.
11) Одну из цельный частей {TS} можно заменить группой однотипных деталей.
12) Между частями {TS} есть неподвижное соединение, которое можно сделать подвижным.
13) Внутри значимой части {TS} есть области вещества с различными свойствами.
14) Для множества элементов функциональной структуры {TS} можно усложнить конфигурацию и связи между ними в пространстве.
15) В {TS} есть область или области пустого пространства.
16) В {TS} есть группа однотипных деталей, выполняющая определённую функцию.
17) Между частями {TS} есть подвижное соединение.
18) В {TS} происходит движение обрабатываемого материала.
19) Контакт крупных частей {TS} является важной частью функционирования.
20) {TS} соприкасается с рукой человека.
'''
#=========3 - Документ от 30.01
zpr_c_list_long[3]='''
1) Полезность {TS} значительно зависит от свойств поверхности {TS} или одного из основных элементов {TS}
2) Преобразование энергии значительно влияет на реализацию главной функции {TS}
3) Главная функция {TS} реализуется в результате механического движения элементов {TS} или других объектов внутри {TS}
4) Главная функция {TS} реализуется в результате механического движения элементов {TS} или других объектов внутри {TS}
5) Полезность {TS} значительно зависит от характеристик механического контакта между элементами {TS} или между {TS} и окружающей средой, пользователем или другими техническими системами  влияет на реализацию главной функции {TS}
6) Функциональная структура {TS} характеризуется взаимным расположением элементов {TS} в пространстве в виде линии, или кольца, или ветвления, или звезды, или сети, или сотов
7) Известно расположение элемента  {TS}, наиболее значимого для реализации главной функции {TS}, в пространстве относительно расположенных рядом других элементов {TS}
8) Известна геометрическая форма элемента  {TS}, наиболее значимого для реализации главной функции {TS}
9) Все известные модификации и исполнения {TS} имеют одинаковую симметрию или асимметрию расположения элементов {TS}
10) Внутри {TS} или в непосредственном контакте с поверхностью {TS} существуют одна или несколько областей заполненного только вакуумом или газом пространства
11) Элемент  {TS}, наиболее значимый для реализации главной функции {TS}, представляет собой один цельный элемент, или разделена на несколько частей, или представляет собой дисперсную структуру, или представляет собой жидкость, или представляет собой поток ионов, или представляет собой поток элементарных частиц
12) Полезность {TS} значительно зависит от характеристик соединения {TS} с окружающей средой, или другой технической системой, или пользователем
13) Внутри вещества, из которого состоит элемент {TS}, наиболее значимый для реализации главной функции {TS}, существуют области с различными свойствами
14) Для множества элементов функциональной структуры {TS} можно усложнить конфигурацию и связи между ними в пространстве.
15) В {TS} есть область или области пустого пространства.
16) В {TS} есть группа однотипных деталей, выполняющая определённую функцию.
17) Между частями {TS} есть подвижное соединение.
18) В {TS} происходит движение обрабатываемого материала.
19) Контакт крупных частей {TS} является важной частью функционирования.
20) {TS} соприкасается с рукой человека.
'''
#=========4 Переформулировка - Документ от 30.01
zpr_c_list_long[4]='''
1. Полезность {TS} во многом определяется свойствами её поверхности или одного из ключевых элементов.
2. Преобразование энергии существенно влияет на выполнение основной функции {TS}.
3. Основная функция {TS} реализуется за счёт механического движения элементов {TS} или других объектов внутри системы.
4. Основная функция {TS} реализуется благодаря механическому движению элементов {TS} или других объектов внутри системы.
5. Эффективность {TS} сильно зависит от характеристик механического контакта между её элементами или между {TS} и окружающей средой, пользователем или другими техническими системами, что влияет на выполнение основной функции.
6. Функциональная структура {TS} характеризуется расположением её элементов в пространстве в виде линии, кольца, ветвления, звезды, сети или сот.
7. Известно положение элемента {TS}, который наиболее важен для выполнения основной функции, относительно других элементов в пространстве.
8. Геометрическая форма элемента {TS}, наиболее значимого для реализации главной функции, известна.
9. Все известные модификации и исполнения {TS} имеют одинаковую симметрию или асимметрию расположения элементов.
10. Внутри {TS} или в непосредственной близости от её поверхности есть одна или несколько областей, заполненных вакуумом или газом.
11. Элемент {TS}, ключевой для выполнения основной функции, представляет собой цельную деталь, разделён на несколько частей, имеет дисперсную структуру, является жидкостью, потоком ионов или потоком элементарных частиц.
12. Эффективность {TS} во многом зависит от характеристик соединения с окружающей средой, другой технической системой или пользователем.
13. В элементе {TS}, который наиболее важен для реализации основной функции, есть области с разными свойствами.
14. Конфигурацию и связи между элементами функциональной структуры {TS} можно усложнить.
15. В {TS} есть область или области пустого пространства.
16. В {TS} есть группа однотипных деталей, выполняющая определённую функцию.
17. Между частями {TS} есть подвижное соединение.
18. В {TS} происходит движение обрабатываемого материала.
19. Контакт крупных частей {TS} является важной частью функционирования.
20. {TS} соприкасается с рукой человека.
'''
#=========5 +
zpr_c_list_long[5]='''
1. Полезность {TS} зависит от свойств её поверхности или одного из ключевых элементов
2. Преобразование энергии существенно влияет на выполнение основной функции {TS}.
3. Основная функция реализуется за счёт механического движения элементов {TS} или других объектов внутри системы.
4. Основная функция реализуется благодаря механическому движению элементов {TS} или других объектов внутри системы.
5. Эффективность {TS} сильно зависит от характеристик механического контакта между её элементами, окружающей средой, пользователем или другими техническими системами.
6. Функциональная структура {TS} характеризуется расположением её элементов в пространстве в виде линии, кольца, ветвления, звезды, сети или сот.
7. Известно положение элемента {TS}, который наиболее важен для выполнения основной функции, относительно других элементов в пространстве.
8. Геометрическая форма элемента {TS}, наиболее значимого для реализации главной функции, известна.
9. Все известные модификации и исполнения {TS} имеют одинаковую симметрию или асимметрию расположения элементов.
10. Внутри {TS} или в непосредственной близости от её поверхности есть одна или несколько областей, заполненных вакуумом или газом.
11. Элемент {TS}, ключевой для выполнения основной функции, представляет собой цельную деталь, разделён на несколько частей, имеет дисперсную структуру, является жидкостью, потоком ионов или потоком элементарных частиц.
12. Эффективность {TS} во многом зависит от характеристик соединения с окружающей средой, другой технической системой или пользователем.
13. В элементе {TS}, который наиболее важен для реализации основной функции, есть области с разными свойствами.
14. Конфигурацию и связи между элементами функциональной структуры {TS} можно усложнить.
15. В {TS} есть область или области пустого пространства.
16. В {TS} есть группа однотипных деталей, выполняющая определённую функцию.
17. Между частями {TS} есть подвижное соединение.
18. В {TS} происходит движение обрабатываемого материала.
19. Контакт крупных частей {TS} является важной частью функционирования.
20. {TS} соприкасается с рукой человека.
'''

zpr_c_list_long[6]='''
1. На выполнение основной функции {TS} существенно влияют контактные свойства поверхностей, например шероховатость
2. Преобразование энергии существенно влияет на выполнение основной функции {TS}.
3. Основная функция реализуется за счёт механического движения элементов {TS} или других объектов внутри системы.
4. Основная функция реализуется благодаря механическому движению элементов {TS} или других объектов внутри системы.
5. Эффективность {TS} определяется геометрией контакта её элементов, такой, как точка, линия, плоскость, объём
6. Функциональная структура {TS} характеризуется расположением её элементов в пространстве в виде линии, кольца, ветвления, звезды, сети или сот.
7. Некоторые важные элементы {TS} можно сблизить в пространстве или слить в один элемент, как например клавиатура и экран в компьютере
8. Известна геометрическая форма наиболее значимого для реализации главной функции элемента {TS}.
9. Все известные модификации и исполнения {TS} имеют одинаковую симметрию или асимметрию расположения элементов.
10. Внутри {TS} или в непосредственной близости от её поверхности есть одна или несколько областей, заполненных вакуумом или газом.
11. Элемент {TS}, ключевой для выполнения основной функции, представляет собой цельную деталь, разделён на несколько частей, имеет дисперсную структуру, является жидкостью, потоком ионов или потоком элементарных частиц.
12. Эффективность {TS} во многом зависит от характеристик соединения с окружающей средой, другой технической системой или пользователем.
13. В наиболее важном для реализации основной функции элементе {TS} есть области с разными свойствами.
14. Конфигурацию и связи между элементами функциональной структуры {TS} можно усложнить.
15. В {TS} есть область или области пустого пространства.
16. В {TS} есть группа однотипных деталей, выполняющая определённую функцию.
17. Между частями {TS} есть подвижное соединение.
18. В {TS} происходит движение обрабатываемого материала.
19. Контакт крупных частей {TS} является важной частью функционирования.
'''

zpr_c_eq =  { 14 : 6, 15 : 10, 16 : 11, 17 : 12, 18: 3, 19:5}

# Мешают сравнению: кавычки, ё, запятые

############################

#7 Улучшения //// 3-4 одинаковы
zpr_c_list_long[7]='''
1. На выполнение основной функции {TS} существенно влияют контактные свойства поверхностей, например шероховатость
2. Преобразование энергии существенно влияет на выполнение основной функции {TS}.
3. Основная функция реализуется за счёт механического движения элементов {TS} или других объектов внутри системы.
4. Можно увеличить подвижность {TS} или её элементов.
5. Эффективность {TS} определяется геометрией контакта её элементов, такой, как точка, линия, плоскость, объём
6. Функциональная структура {TS} характеризуется расположением её элементов в пространстве в виде линии, кольца, ветвления, звезды, сети или сот.
7. Некоторые важные элементы {TS} можно сблизить в пространстве или слить в один элемент, как например клавиатура и экран в компьютере
8. Известна геометрическая форма наиболее значимого для реализации главной функции элемента {TS}.
9. {TS} имеет симметрию или асимметрию расположения элементов.
10. Внутри {TS} или в непосредственной близости от её поверхности есть одна или несколько областей, заполненных вакуумом или газом.
11. Ключевой элемент {TS} представляет собой цельную деталь либо разделён на несколько частей, имеет дисперсную структуру, является жидкостью, потоком ионов или потоком элементарных частиц.
12. В {TS} существует соединение между частями, которое можно сделать подвижным или изменить его подвижность
13. В наиболее важном для реализации основной функции элементе {TS} есть области с разными свойствами.
'''

zpr_c_list_long[8]='''
1) Можно улучшить {TS}, изменяя контактные свойства поверхностей в технической системе
2) Можно улучшить {TS}, увеличив плотность потока преобразуемой в технической системе энергии
3) Можно улучшить {TS}, усложнив траекторию движения элементов в технической системе
4) Можно улучшить {TS}, увеличив число степеней свободы движения технической системы или её элементов
5) Можно улучшить {TS}, расширяя области механического контакта объектов, согласно правилу: от точки к линии, от линии к плоскости, от плоскости к объёму
6) Можно улучшить {TS}, усложнив конфигурацию элементов функциональной структуры ТС и связей между ними в пространстве.
7) Можно улучшить {TS}, сблизив некоторые её элементы, возможно, вплоть до слияния в единый элемент
8) Можно улучшить {TS}, расширив один из элементов ТС по линии, плоскости или объёму
9) Можно улучшить {TS}, расположив некоторые элементы ТС симметрично относительно точки, линии или плоскости
10) Можно улучшить {TS}, изменив форму или распределение пустого пространства внутри ТС
11) Можно улучшить {TS}, уменьшив размер и увеличив количество отдельных цельных частей объекта, совместно выполняющих некую функцию ТС
12) Можно улучшить {TS}, увеличив подвижность соединения некоторых элементов ТС
13) Можно улучшить {TS}, увеличив количество и неравномерность распределения областей с различными свойствами внутри ТС или размыв границы между такими областями
'''

zpr_c_list_long[9]='''
1) {TS} можно улучшить, изменив контактные свойства поверхностей, входящих в её состав.
2) {TS} можно улучшить, увеличив плотность потока энергии, преобразуемой в ней.
3) {TS} можно улучшить, изменив траекторию движения её элементов на более сложную.
4) {TS} можно улучшить, увеличив количество степеней свободы движения как самой системы, так и её отдельных элементов.
5) {TS} можно улучшить, увеличивая площадь механического контакта между объектами. Это можно сделать, переходя от точечного контакта к линейному, от линейного к поверхностному, от поверхностного к объёмному.
6) {TS} можно улучшить, изменив конфигурацию её элементов и связей между ними в пространстве.
7) {TS} можно усовершенствовать, объединив некоторые её компоненты в один элемент.
8) {TS} можно усовершенствовать, увеличив размеры одного из её элементов в линейном, плоскостном или объёмном направлении.
9) {TS} можно улучшить, разместив некоторые её элементы симметрично относительно определённой точки, линии или плоскости.
10) {TS} можно усовершенствовать, оптимизируя форму и расположение свободного пространства внутри неё.
11) {TS} можно улучшить, разделив её на более мелкие и многочисленные цельные части, которые вместе выполняют определённую функцию системы.
12) {TS} можно улучшить, повысив подвижность соединений между некоторыми её элементами.
13) {TS} можно улучшить, увеличив количество областей с различными свойствами внутри неё и сделав распределение этих областей неравномерным, а также размыв границы между этими областями.
'''

# Переформулированный 9
zpr_c_list_long[10]='''
1) Можно улучшить работу {TS}, изменяя характеристики поверхностей, которые контактируют друг с другом.
2) Можно повысить эффективность {TS}, увеличив плотность потока энергии, преобразуемой в ней.
3) Можно улучшить {TS}, изменив траекторию движения её элементов на более сложную.
4) Можно улучшить {TS}, увеличив количество степеней свободы движения самой системы или её компонентов.
5) Можно улучшить {TS}, увеличивая области механического контакта объектов, следуя принципу: от точечного контакта к линейному, от линейного к поверхностному, от поверхностного к объёмному.
6) Можно улучшить {TS}, изменив конфигурацию её элементов и связей между ними в пространстве.
7) Можно улучшить {TS}, объединив некоторые её элементы в один.
8) Можно улучшить {TS}, расширив один из её элементов в направлении линии, плоскости или объёма.
9) Можно улучшить {TS}, расположив некоторые её элементы симметрично относительно точки, линии или плоскости.
10) Можно улучшить {TS}, изменив форму или распределение свободного пространства внутри неё.
11) Можно улучшить {TS}, разделив её на более мелкие и автономные части, которые будут выполнять определённые функции совместно.
12) Можно улучшить {TS}, повысив подвижность соединений между некоторыми её элементами.
13) Чтобы улучшить {TS}, можно увеличить количество областей с разными свойствами внутри неё и неравномерно распределить эти области, а также сделать границы между ними более размытыми.
'''

#------ УЛУЧШЕНИЕ характеристик {Ulutshit_eto}
zpr_c_list_long[11]='''
1) Можно {Ulutshit_eto} {TS}, изменяя характеристики поверхностей, которые контактируют друг с другом.
2) Можно {Ulutshit_eto} {TS}, увеличив плотность потока энергии, преобразуемой в ней.
3) Можно {Ulutshit_eto} {TS}, изменив траекторию движения её элементов на более сложную.
4) Можно {Ulutshit_eto} {TS}, увеличив количество степеней свободы движения самой системы или её компонентов.
5) Можно {Ulutshit_eto} {TS}, увеличивая области механического контакта объектов, следуя принципу: от точечного контакта к линейному, от линейного к поверхностному, от поверхностного к объёмному.
6) Можно {Ulutshit_eto} {TS}, изменив конфигурацию её элементов и связей между ними в пространстве.
7) Можно {Ulutshit_eto} {TS}, объединив некоторые её элементы в один.
8) Можно {Ulutshit_eto} {TS}, расширив один из её элементов в направлении линии, плоскости или объёма.
9) Можно {Ulutshit_eto} {TS}, расположив некоторые её элементы симметрично относительно точки, линии или плоскости.
10) Можно {Ulutshit_eto} {TS}, изменив форму или распределение свободного пространства внутри неё.
11) Можно {Ulutshit_eto} {TS}, разделив её на более мелкие и автономные части, которые будут выполнять определённые функции совместно.
12) Можно {Ulutshit_eto} {TS}, повысив подвижность соединений между некоторыми её элементами.
13) Чтобы {Ulutshit_eto} {TS}, можно увеличить количество областей с разными свойствами внутри неё и неравномерно распределить эти области, а также сделать границы между ними более размытыми.
'''

#
# Изменена system_role = f'Ты консультант по техническим системам. Выбери из имеющихся правил три которые помогут {Ulutshit_eto}'
zpr_c_list_long[12]='''
1) Изменить в {TS} характеристики поверхностей, которые контактируют друг с другом.
2) Изменить в {TS} плотность потока энергии, преобразуемой в ней.
3) Изменить в {TS} траекторию движения её элементов на более сложную.
4) Изменить в {TS} количество степеней свободы движения самой системы или её компонентов.
5) Изменить в {TS} вид механического контакта объектов, исходя и следующих видов контакта: точечный, линейный, поверхностный, объёмный.
6) Изменить в {TS} конфигурацию её элементов и связей между ними в пространстве.
7) Объединить в {TS} некоторые её элементы в один.
8) Изменить форму элемента {TS} в направлении линии, плоскости или объёма.
9) Расположить некоторые элементы {TS} симметрично относительно точки, линии или плоскости.
10) Изменить в {TS} форму или распределение свободного пространства внутри.
11) Разделить элемент {TS} на более мелкие и автономные части, которые будут выполнять определённые функции совместно.
12) Изменить подвижность соединений между некоторыми элементами {TS}.
13) Увеличить количество областей с разными свойствами внутри {TS} и неравномерно распределить эти области, а также сделать границы между ними более размытыми.
'''

#Изменено  ts_name = f'«{TS_Original}»' !!!!!!  НЕВЕРНО: f'ТС «{TS_Original}»'
zpr_c_list_long[13]='''
1) Изменить в технической системе {TS} характеристики поверхностей, которые контактируют друг с другом.
2) Изменить в технической системе {TS} плотность потока энергии, преобразуемой в ней.
3) Изменить в технической системе {TS} траекторию движения её элементов на более сложную.
4) Изменить в технической системе {TS} количество степеней свободы движения самой системы или её компонентов.
5) Изменить в технической системе {TS} вид механического контакта объектов, исходя и следующих видов контакта: точечный, линейный, поверхностный, объёмный.
6) Изменить в технической системе {TS} конфигурацию её элементов и связей между ними в пространстве.
7) Объединить в технической системе {TS} некоторые её элементы в один.
8) Изменить форму элемента технической системы {TS} в направлении линии, плоскости или объёма.
9) Расположить некоторые элементы технической системы {TS} симметрично относительно точки, линии или плоскости.
10) Изменить в технической системе {TS} форму или распределение свободного пространства внутри.
11) Разделить элемент технической системы {TS} на более мелкие и автономные части, которые будут выполнять определённые функции совместно.
12) Изменить подвижность соединений между некоторыми элементами технической системы {TS}.
13) Увеличить количество областей с разными свойствами внутри технической системы {TS} и неравномерно распределить эти области, а также сделать границы между ними более размытыми.
'''

#@title ЗПР списки version 14-...


# Изменена system_role = f'Ты консультант по техническим системам. Выбери из имеющихся правил три которые помогут {Ulutshit_eto}'
#  ts_name = f'«{TS_Original}»' !!!!!!  НЕВЕРНО: f'ТС «{TS_Original}»'
zpr_c_list_long[14]='''
1) Изменить характеристики поверхностей, которые контактируют друг с другом в технической системе {TS}.
2) Изменить плотность потока энергии, преобразуемой в технической системе {TS}.
3) Усложнить или упростить траекторию движения элементов технической системы {TS}.
4) Изменить количество степеней свободы движения технической системы {TS} или её компонентов.
5) Изменить вид механического контакта объектов в технической системе {TS}, исходя из следующих видов контакта: точечный, линейный, поверхностный, объёмный.
6) Изменить конфигурацию элементов технической системы {TS} и связи между ними в пространстве.
7) Объединить некоторые элементы технической системы {TS} в один.
8) Изменить форму элемента технической системы {TS} в направлении линии, плоскости или объёма.
9) Расположить некоторые элементы технической системы {TS} симметрично относительно точки, линии или плоскости.
10) Изменить форму или распределение свободного пространства внутри технической системы {TS}
11) Разделить элемент технической системы {TS} на части, которые будут выполнять определённые функции совместно.
12) Изменить подвижность соединений между некоторыми элементами технической системы {TS}.
13) Изменить количество и распределение областей с разными свойствами внутри технической системы {TS} и/или размытость границ между такими областями.
'''


# Переформулированный 14
zpr_c_list_long[15]='''
1) Изменить свойства поверхностей, которые соприкасаются друг с другом в технической системе {TS}.
2) Изменить количество энергии, которое проходит через техническую систему за определённое время.
3) Изменить траекторию движения компонентов технической системы, сделав её более сложной или, наоборот, более простой.
4) Увеличить или уменьшить количество направлений, в которых техническая система или её части могут свободно перемещаться.
5) Нужно преобразовать способ, которым объекты в технической системе соприкасаются механически. Есть такие варианты: точечный, линейный, поверхностный и объёмный.
6) Переделать расположение и соединение деталей технической системы.
7) Соединить определённые части технической системы в одну.
8) Преобразовать элемент технической системы так, чтобы он соответствовал линиям, плоскостям или объёмам.
9) Разместить определённые компоненты технической системы таким образом, чтобы они были зеркально одинаковы относительно точки, линии или плоскости.
10) Переделать свободное пространство внутри технической системы, поменять его форму и способ распределения.
11) Нужно поделить компонент технической системы на части, чтобы каждая из них выполняла свою функцию в совокупности с остальными.
12) Сделать соединения между некоторыми деталями технической системы более подвижными или менее подвижными.
13) Изменить число и расположение зон с различными характеристиками внутри технической системы, а также сделать границы между этими зонами более или менее чёткими.
'''

# Переформулированный  редакция
zpr_c_list_long[16]='''
1) Изменить свойства поверхностей, которые соприкасаются друг с другом в технической системе {TS}.
2) Изменить плотность потока энергии, преобразуемой в технической системе {TS}.
3) Изменить траекторию движения компонентов технической системы {TS}, сделав её более сложной или, наоборот, более простой.
4) Изменить количество направлений, в которых техническая система {TS} или её части могут свободно перемещаться
5) Изменить тип (точечный, линейный, поверхностный и объёмный) механического контакта объектов в технической системе {TS}.
6) Изменить конфигурацию элементов технической системы {TS} и связи между ними в пространстве.
7) Сблизить в пространстве или объединить некоторые части технической системы {TS} в одну.
8) Преобразовать форму определённой части технической системы {TS} по линии, плоскости или объёму
9) Расположить определённые компоненты технической системы {TS} симметрично относительно точки, линии или плоскости.
10) Изменить форму или распределение свободного пространства внутри технической системы {TS}
11) Разделить элемент технической системы {TS} на части, совместно выполняющие ту же функцию
12) Изменить подвижность соединений между некоторыми элементами технической системы {TS}
13) Изменить количество и распределение областей с разными свойствами внутри технической системы {TS}, а также изменить четкость границ между этими областями.
'''

# Переформулированный   редакция
zpr_c_list_long[17]='''
1) Изменить свойства поверхностей, которые соприкасаются друг с другом в технической системе {TS}
2) Изменить плотность потока энергии, преобразуемой в технической системе {TS}
3) Изменить траекторию движения компонентов технической системы {TS}, сделав её более сложной или, наоборот, более простой.
4) Изменить количество направлений, в которых техническая система {TS} или её части могут перемещаться
5) Изменить геометрию механического контакта объектов в технической системе {TS} (точечный, линейный, поверхностный или объёмный контакт)
6) Изменить конфигурацию компонентов технической системы {TS} и связи между ними в пространстве
7) Сблизить в пространстве или объединить в одну некоторые части технической системы {TS}, выполняющие разные функции
8) Изменить форму определённой части технической системы {TS} по линии, плоскости или объёму
9) Изменить элемент симметрии расположения определённых компонентов технической системы {TS} (точка, линия или плоскость), либо ввести симметрию, если её нет
10) Изменить форму или распределение свободного пространства внутри технической системы {TS}
11) Разделить компонент технической системы {TS} на части, совместно выполняющие ту же функцию, либо объединить части, совместно выполняющие ту же функцию, в один компонент
12) Изменить подвижность соединений между некоторыми частями технической системы {TS} (заменить жесткое на подвижное или наоборот)
13) Изменить количество, распределение, а также четкость границ для областей с разными свойствами внутри технической системы {TS}
'''
# Разделены на части некоторые правила
zpr_c_list_long[18]='''
1) Изменить свойства поверхностей, которые соприкасаются друг с другом в технической системе {TS}
2) Изменить плотность потока энергии, преобразуемой в технической системе {TS}
3) Изменить траекторию движения компонентов технической системы {TS}, сделав её более сложной или, наоборот, более простой.
4) Изменить количество направлений, в которых техническая система {TS} или её части могут перемещаться
5) Изменить геометрию механического контакта объектов в технической системе {TS} (точечный, линейный, поверхностный или объёмный контакт)
6) Изменить конфигурацию компонентов технической системы {TS} и связи между ними в пространстве
7) Сблизить в пространстве или объединить в одну некоторые части технической системы {TS}, выполняющие разные функции
8) Изменить форму определённой части технической системы {TS} по линии, плоскости или объёму
9) Изменить элемент симметрии расположения определённых компонентов технической системы {TS} (точка, линия или плоскость)
10) Изменить форму или распределение свободного пространства внутри технической системы {TS}
11) Разделить компонент технической системы {TS}, выполняющий определённую функцию, на части, совместно выполняющие эту функцию
12) Изменить подвижность соединений между некоторыми частями технической системы {TS} (заменить жесткое на подвижное или наоборот)
13) Изменить количество, распределение, а также четкость границ для областей с разными свойствами внутри технической системы {TS}
14) Разделить компонент, выполняющий несколько функций в технической системе {TS} на части, каждая из которых будет выполнять свою функцию
15) Расположить определённые компоненты технической системы {TS} симметрично
16) Уменьшить количество и увеличить размеры однотипных частей технической системы {TS}, совместно выполняющих определённую функцию, или объёдинить их в один компонент
17) Разделить на множество более мелких однотипные части технической системы {TS}, совместно выполняющие определённую функцию
'''
ZPR_Mapping = {14:7, 15:9, 16:11, 17:11}


# Переформулированный более расплывчато
zpr_c_list_long[18]='''
1) Изменить свойства поверхностей, которые соприкасаются друг с другом в технической системе {TS}
2) Изменить плотность потока энергии, преобразуемой в технической системе {TS}
3) Изменить траекторию движения компонентов технической системы {TS}, сделав её более сложной или, наоборот, более простой.
4) Изменить количество направлений, в которых техническая система {TS} или её части могут перемещаться
5) Изменить форму механического контакта объектов в технической системе {TS} (точечный, линейный, поверхностный или объёмный контакт)
6) Изменить конфигурацию компонентов технической системы {TS} и связи между ними в пространстве (линейная, иерархическая, многосвязная, изменяющаяся структура)
7) Сблизить в пространстве или объединить в один компонент некоторые части технической системы {TS}, выполняющие разные функции, либо разделить на части единый компонент выболняющий несколько функций.
8) Изменить форму определённой части технической системы {TS} по линии, плоскости или объёму
9) Изменить элемент симметрии расположения определённых компонентов технической системы {TS} (точка, линия или плоскость), либо расположить симметрично некоторые компоненты технической системы
10) Внедрить области пустого пространства в техническую систему {TS} или изменить форму или распределение областей пустого пространства внутри технической системы
11) Разделить компонент технической системы {TS} на части, совместно выполняющие ту же функцию, либо объединить части, совместно выполняющие ту же функцию, в один компонент
12) Изменить подвижность соединений между некоторыми частями технической системы {TS}, сделать более жестким или более подвижным
13) Изменить количество, распределение, а также четкость или размытость границ для областей с разными свойствами внутри технической системы {TS}
'''

#@title Примеры "ТС - улучшение"
#=============================================================================
#                                П Р О Б Ы                                   =
#=============================================================================

examples_ulutchit_lst = [
 ['рукоятка теннисной ракетки','уменьшить нагрев'],
 ['дизельный корабль','увеличить эффективность'],
 ['Барабанная сушилка сыпучих материалов','повысить качество'],
 ['Кресло','улучшить мобильность'],
 ['ремень безопасности','повысить безопасность'],
 ['Система оросительных каналов','повысить управляемость'],
 ['Ноутбук','уменьшить габариты при сохранении размеров визуализации'],
 ['Ползунок регулировки','повысить точность'],
 ['Двухлопастной винт','уменьшить износ'],
 ['Система укладки кирпичей','сделать так чтобы швы герметично смыкались без раствора'],
 ['Пескоструйная обработка деталей',''],
 ['Упругая муфта',''],
 ['Железобетон',''],
 ['смартфон',''],
 ['Консервный нож',''],
 ['Кофеварка',''],
 ['зонтик',''],
 ['соковыжималка',''],
 ['Рукоятка ножа',''],
 ['овощерезка',''],
 ['эскалатор',''],
 ['дверь',''],
 ['фен для волос','уменьшить шум']
]


examples_ulutchit_lst_2 = [
  ['зубная щётка', 'повысить качество чистки зубов'],
  ['бытовой холодильник', 'уменьшить шумность'],
  ['двуспальная кровать', 'повысить качество сна'],

  ['офисный принтер', 'увеличить скорость печати'],
  ['умные часы', 'расширить функциональность'],
  ['клавиатура компьютера', 'повысить удобство набора текста'],

  ['квадрокоптер', ' снизить стоимость производства'],
  ['пассажирский авиалайнер', ' уменьшить расход топлива'],
  ['магистральный газопровод', 'повысить взрывобезопасность и пожаробезопасность'],
  ['магистральный газопровод', 'дистанционно обнаруживать места утечек газа'],
  ['концертный зал', 'улучшить акустику (повысить качество звучания музыки внутри зала)'],
  ['книга (печатное издание)', 'повысить удобство чтения (сидя, лежа, стоя)'],
  ['плавательный бассейн', 'повысить безопасность плавания, в том числе для слабовидящих и незрячих']
]

examples_ulutchit_lst += examples_ulutchit_lst_2 # [examples_ulutchit_lst_2[4], examples_ulutchit_lst_2[9]]
'''
 умные часы / расширить функциональность - [6, 7, 11] - ans1 ans3
'''
examples_ulutchit_lst = [k for k in examples_ulutchit_lst if k[1]]

"""###Misc - Главная функция, структура, свойства, Cистематики, Потребности"""

#@title Главная функция, структура, свойства
manual_chat_promt0 = '''Ты консультант по улучшению технических систем
Рассматриривай все как технические системы.
Отвечай максимально точно и используй только информацию из документов, не добавляй ничего своего.
Документ с информацией для ответа пользователю: '''


manual_chat_promt1 = '''Ты консультант по улучшению технических систем.
Отвечай максимально точно и используй только информацию из следующего документа: '''

manual_chat_promt = '''Ты консультант по техническим системам.
Четко отвечай на вопрос исходя из следующего документа: '''


ask_main_fun0 = '''
Главная Функция технической системы описывается так:
1) описание действия (воздействия или противодействия) материального объекта или явления, направленного на изменение свойств или состояния другого материального объекта или явления;
2) описание материального объекта или явления, на которые направлено действие (воздействие или противодействие);
3) описание особых условий или ограничений, при которых выполняется действие (воздействие или противодействие).
Например, «измерять температуру воды в море на глубине 8 км».
Правила формулирования функций включают четыре основных тезиса.
1. Действие (воздействие или противодействие) в функции должно выражаться глаголом неопределенной формы; при этом глагол не должен указывать на способ реализации (например, вместо «раздробить», «разрезать», «разорвать» лучше «разъединять», а вместо «расплавить», «кристаллизовать» лучше «изменить состояние»).
2. Не следует использовать при описании действия (воздействия или противодействия) глаголы косвенно-переходного действия (например, «улучшить», «исключить», «повысить», «добиться», «обеспечить», «предотвратить», «понизить», «углубить» и др.).
3. При формулировании действия (воздействия или противодействия) не следует использовать частицу «не», то есть функция должна отражать прямое действие (например, вместо «не пропускать» лучше «ограничивать перемещение»).
4. При описании объекта или явления, на которые направлено действие, лучше использовать обобщенное описание объекта или явления (например, вместо «вода», «воздух», «почва», «материал» использовать «вещество»). Это полезно для того чтобы, например, технические решения, реализованные в ТС, используемых для перемещения воды, могли бы  быть использованы в ТС для перемещения воздуха или других текучих сред.

Исходя из этого определения Главной Функции, кратко, одной фразой ответь какая главная функция у технической системы '''




ask_main_fun1 = '''
Главная Функция технической системы это:
1) глагол в неопределенной формы, описывающий целевое действие технической системы
2) одно-два слова, описывающие материальный объект или явлени, на которые направлено действие
3) несколько слов, описывающие особые условия или ограничения, при которых выполняется действие
Например, «измерять температуру воды в море на глубине 8 км».
Подбирать слова нужно по следующим правилам:
1. Действие должно выражаться глаголом неопределенной формы; при этом глагол не должен указывать на способ реализации (например, вместо «раздробить», «разрезать», «разорвать» лучше «разъединять», а вместо «расплавить», «кристаллизовать» лучше «изменить состояние»).
2. Следует избегать при описании действия (воздействия или противодействия) глаголы косвенно-переходного действия (например, «улучшить», «исключить», «повысить», «добиться», «обеспечить», «предотвратить», «понизить», «углубить» и др.).
3. Следует избегать использования частицы "не" при формулировании действия (например, вместо «не пропускать» лучше «ограничивать перемещение»).
4. Следует использовать обобщенное описание объекта или явления (например, вместо «вода», «воздух», «почва», «материал» использовать «вещество»).
'''

ask_main_fun = '''
Главная Функция технической системы это:
1) глагол в неопределенной формы, описывающий целевое действие технической системы
2) одно-два слова, описывающие материальный объект или явление, на которые направлено действие
3) несколько слов, описывающие особые условия или ограничения, при которых выполняется действие
Например, «измерять температуру воды в море на глубине 8 км».
Подбирать слова нужно по следующим правилам:
1. Действие должно выражаться глаголом, которые не указывает на способ реализации (например, вместо «раздробить», «разрезать», «разорвать» лучше «разъединять», а вместо «расплавить», «кристаллизовать» лучше «изменить состояние»).
2. Следует избегать при описании действия глаголы типа «улучшить», «исключить», «повысить», «добиться», «обеспечить», «предотвратить», «понизить», «углубить» и тп.
3. Следует избегать отрицания при формулировании действия (например, вместо «не пропускать» лучше «ограничивать перемещение»).
4. Следует использовать обобщенное описание объекта или явления (например, вместо «вода», «воздух», «почва», «материал» использовать «вещество»).
'''
ask_structure = '''
Функциональная структура технической системы это:
Совокупность функций каждая из которых описана следующим образом:
1) глагол в неопределенной формы, описывающий действие в этой части технической системы. при этом глагол не должен указывать на способ реализации
2) одно-два слова, обобщенно описывающие материальный объект или явление, на которые направлено действие,
3) несколько слов, описывающие особые условия или ограничения, при которых выполняется действие
'''

#======================================================================
#======================================================================
#======================================================================

ask_parts0 = '''
Техническая система выполняет свою главную функцию.
При этом техническая система состоит из подсистем, каждая из которых выполняет определенную подфункцию главной функции.
'''
ask_parts = '''
Техническая система выполняет свою главную функцию.
При этом техническая система состоит из подсистем, каждая из которых выполняет определенную подфункцию главной функции.
'''


chars_def0 = '''
В общем виде свойства ТС — форма существования признаков (качественной определенности) ТС, с помощью которых устанавливается сходство или различие с другими ТС. Различают качественные и количественные характеристики свойств.
Качественная характеристика определяется наличием или отсутствием свойства (например, есть радиация или нет), а количественная характеристика (параметр) определяет меру свойства (в приведенном примере мерой является уровень радиации, измеряемый в беккерелях (один беккерель равен одному радиоактивному распаду в секунду)).
Отдельные свойства объектов, явлений, технических систем могут возникать, меняться и исчезать.

Свойства ТС группируют по двум различным основаниям. По значимости (основание 1) различают общие значимые, целевые и специальные значимые свойства.
По назначению (основание 2) различают функциональные, технологические, экологические и эргономические, экономические свойства.

К общим значимым свойствам ТС относятся свойства, присущие различным классам технических систем: производительность, габариты, масса, энергопотребление,
 стоимость, экологические и эргономические свойства, технологичность изготовления, эксплуатации и ремонта, эстетические свойства, надежность и долговечность и др.
К целевым свойствам ТС относятся свойства, присущие данному классу ТС и непосредственно определяющие потребительскую ценность и полезность ТС.
 Например, к целевым свойствам легкового электромобиля будут относиться максимальная скорость движения, мощность двигателя, число пассажиров. Эти свойства присущи любым легковым автомобилям и непосредственно определяют их полезность — обеспечение возможности быстрого перемещения людей.
К специальным значимым свойствам, которые в общем случае характеризуют эффективность функционирования основных узлов ТС, процессов их эксплуатации,
 транспортировки, хранения и утилизации технических систем. Например, к специальным значимым свойствам электромобиля можно отнести расход электроэнергии на 100 км пути, максимальная масса груза, минимальный радиус поворота, время разгона до максимальной скорости, габариты транспортного средства,
то есть те, которые непосредственно не влияют на возможность быстрого перемещения людей.

В целом свойства ТС делят на две большие группы:
1) свойства, непосредственно влияющие на полезность (потребительскую ценность) ТС;
2) свойства, определяющие плату за полезность.
'''

chars_def1 = '''
В общем виде свойства технической системы — форма существования признаков (качественной определенности) технической системы, с помощью которых устанавливается сходство или различие с другими техническими системами. Различают качественные и количественные характеристики свойств.
Качественная характеристика определяется наличием или отсутствием свойства (например, есть радиация или нет), а количественная характеристика (параметр) определяет меру свойства (в приведенном примере мерой является уровень радиации, измеряемый в беккерелях (один беккерель равен одному радиоактивному распаду в секунду)).
Отдельные свойства объектов, явлений, технических систем могут возникать, меняться и исчезать.

Среди свойств технической системы различают общие значимые и целевые значимые свойства.

К общим значимым свойствам технической системы относятся свойства, присущие различным классам технических систем: производительность, габариты, масса, энергопотребление,
 стоимость, экологические и эргономические свойства, технологичность изготовления, эксплуатации и ремонта, эстетические свойства, надежность и долговечность и др.
К целевым свойствам технической системы относятся свойства, присущие данному классу технической системы и непосредственно определяющие потребительскую ценность и полезность технической системы.
 Например, к целевым свойствам легкового электромобиля будут относиться максимальная скорость движения, мощность двигателя, число пассажиров. Эти свойства присущи любым легковым автомобилям и непосредственно определяют их полезность — обеспечение возможности быстрого перемещения людей.

В целом свойства ТС делят на две  группы:
1) свойства, непосредственно влияющие на полезность (потребительскую ценность) ТС;
2) свойства, определяющие плату за полезность.
'''

chars_def2 = '''
В общем виде свойства технической системы — форма существования признаков (качественной определенности) технической системы, с помощью которых устанавливается сходство или различие с другими техническими системами. Различают качественные и количественные характеристики свойств.

Среди свойств технической системы различают общие  и целевые  свойства.

К общим  свойствам технической системы относятся свойства, присущие различным классам технических систем: производительность, габариты, масса, энергопотребление,
 стоимость, экологические и эргономические свойства, технологичность изготовления, эксплуатации и ремонта, эстетические свойства, надежность и долговечность и др.
К целевым свойствам технической системы относятся свойства, присущие данному классу технической системы и непосредственно определяющие потребительскую ценность и полезность технической системы.
 Например, к целевым свойствам легкового электромобиля будут относиться максимальная скорость движения, мощность двигателя, число пассажиров. Эти свойства присущи любым легковым автомобилям и непосредственно определяют их полезность — обеспечение возможности быстрого перемещения людей.

Свойства технической системы включают свойства непосредственно влияющие на полезность (потребительскую ценность) технической системы и
свойства, определяющие плату за полезность.
'''
chars_def = '''
В общем виде свойства технической системы — форма существования признаков (качественной определенности) технической системы,
с помощью которых устанавливается сходство или различие с другими техническими системами.
Различают качественные и количественные характеристики свойств.

Свойства технической системы подразделяются на две категории:

1) Общие свойства: Свойства, присущие различным классам технических систем: производительность, габариты, масса, энергопотребление,
 стоимость, экологические и эргономические свойства, технологичность изготовления, эксплуатации и ремонта, эстетические свойства, надежность и долговечность и др.
2) Целевые свойства: Cвойства, присущие данному классу технической системы и непосредственно определяющие потребительскую ценность и полезность технической системы.
 Например, к целевым свойствам легкового электромобиля будут относиться максимальная скорость движения, мощность двигателя, число пассажиров. Эти свойства присущи любым легковым автомобилям и непосредственно определяют их полезность — обеспечение возможности быстрого перемещения людей.

Свойства технической системы включают как свойства непосредственно влияющие на полезность (потребительскую ценность), так и
свойства, определяющие плату за полезность (расходы на энергию, констукцию и тп)
'''

#@title ЭВРИСТИКИ

Prilagatelnye = '''
Новые свойства технической системы нужно формировать с помощью «хороших» прилагательных типа:
- антисептический
- антиколебательный
- водонепроницаемый
- невпитывающий
- нервущийся
- антирезонансный
- сверхабсорбирующий
- самонастраивающийся
- раздельный
'''

Protivorechie = '''
Понятие усиленного противоречия, методика формирования усиленных противоречий и способы разрешение противоречий:
Противоречие  – взаимодействие противоположных, взаимоисключающих сторон и тенденций предметов и явлений, которые вместе с тем находятся во внутреннем единстве и взаимопроникновении, выступая источником самодвижения и развития объективного мира и познания.
Формирование усиленного противоречия в ТС или при взаимодействии ТС с окружающей средой полностью или в значительной степени устраняет у разработчика барьер мышления, мешающий найти революционное решение (или хотя бы эффективный компромисс), а также препятствует возникновению такого барьера.
Общий подход к формированию усиленного противоречия в технической сфере заключается в том, что первая часть противоречия (потребность человека, свойство или состояние ТС или окружающей ее среды), отражающая положительный эффект или возможность (условие) функционирования или существования ТС или окружающей ее среды, формулируется как и в обычном техническом противоречии,
а вторая часть формулируется как противоречивая, но без отрицательного эффекта.
При формировании усиленного противоречия к свойствам ТС (или ее элемента, или процесса) или к окружающей ТС среде одновременно предъявляются взаимоисключающие требования: объект или явление должны быть и не быть, двигаться и стоять, быть твердыми и мягкими, холодными и горячими, длинными и короткими и др.

Пример из транспортной системы:  Есть потребность быстро перемещаться по дорогам, в том числе преодолевая перекрестки (это отражение желаемого положительного эффекта), однако при этом на перекрестках снижается безопасность движения (возможный отрицательный эффект). Тогда, на основе этого технического противоречия, усиленное противоречие формулируется следующим образом: «Для перемещения людей, грузов автомобили должны двигаться, а в целях полной безопасности автомобили должны не двигаться».
Пример из плотиностроения: Для подъема уровня воды в реке или для создания водохранилища строят водосливную плотину, которая обеспечивает перелив воды и течение воды в реке после водохранилища& Однако при больших паводковых водах плотина может не справиться с переливом воды, что приводит к разливам воды перед плотиной и даже к наводнениям. Усиленное противоречие в этом случае: «В связи с паводком усиливается приток воды к водосливной плотине, приводящий к наводнению района перед плотиной, однако для того, чтобы плотина справлялась со сливом воды, усиленного притока воды к плотине быть не должно».
Пример из истории авиации: Как только самолет с крыльями, перпендикулярными фюзеляжу, достигал сверхзвуковой скорости, на передней кромке крыльев возникал скачок давления и плотности воздуха, от чего крылья разрушались . Усиленное противоречие в этом случае: «При превышении скорости звука самолетом с крыльями, перпендикулярными фюзеляжу, скачок давления и плотности воздуха на передней кромке крыльев должен быть (за счет законов физики), а для сохранения крыльев от разрушения такого скачка давления и плотности воздуха быть не должно».
Пример из быта: Известно, что чай большинство людей пьют горячим или сильно охлажденным. Однако если налить нормально горячий чай   в обычный граненый стакан, то напиток быстро остынет и станет просто теплым, что,  резко ухудшает его свойства. А если налить в обычный стакан чай-кипяток (чтобы дольше не остывал) и сразу начать его пить, можно обжечься. Усиленное противоречие в этом случае: «Чай в стакане должен быть очень горячий (чтобы во время чаепития сохранял высокую температуру) и одновременно не очень горячий (чтобы не обжечься)».

Способы разрешения усиленного противоречия:
Разделить противоречивые свойства во времени, в пространстве, во времени и в пространстве
'''


Analogii0 = ''' Аналоги и аналогии в технике и природе

1) Аналогия свойств — это умозаключение, в котором признаком сходства аналогов (прототипа) разрабатываемой ТС являются их свойства.
Упрощенно аналогию свойств в научно-техническом творчестве можно описать следующим образом:
Разрабатываемая техническая системы имеет признаки a, b, c. Объект A в рассматриваемой предметной области имеет признаки a, b, c. Кроме того, объект А имеет признак d. Вероятно, что в разрабатываемой ТС может быть использован признак d.
Например, при разработке детского стульчика (кресла) при поиске аналогов могут быть использованы признаки:
наличие сиденья, ножек, спинки (признаки a, b, c), по которым могут быть найдены разные типы кресел — тронное, дачное, дворцовое, будуарное, театральное, детское и другие; затем можно выбрать, например, у тронного кресла признак d (характеризующий принадлежность к трону) и с вероятным успехом использовать этот признак (например, корону) при создании кресла для маленькой принцессы (принца).
2) Аналогия отношений — это умозаключение, в котором признаками сходства аналогов разрабатываемой технической системы являются отношения между элементами технической системы, между технической системой и человеком, окружающей средой, другими объектами.
Упрощенно аналогию отношений в научно-техническом творчестве можно описать следующим образом. Разрабатываемая техническая системы (А) подобна другой(С). Объект B в рассматриваемой предметной области подобен объекту D. Между(C) и объектом D имеются отношения R. Вероятно, между разрабатываемой технической системой (A) и объектом B имеются отношения R.

Виды аналогий:
1) Функциональная аналогия определяется сходством функциональной структуры сравниваемых объектов и явлений
2) Структурная аналогия определяется общностью материальной основы сравниваемых объектов и явлений. Субстратом всех известных физических процессов выступают элементарные частицы и поля, фундаментальные взаимодействия которых обусловливают физико-химические формы движения.
3) Субстратная аналогия определяется общностью элементарных «единиц» нашей предметной области
Субстратом химической реакции являются атомы, остающиеся устойчивыми при образовании и превращении веществ. Субстратом биологических процессов в живых организмах служат молекулы нуклеиновых кислот (ДНК и РНК) и белковых веществ.
Субстратом социальных форм движения является человек.
4) Аналогия внешней формы определятеся многообразием форм, а также характерными особенности поверхности
5) Аналогия отношений определяется сходством отношений (связей) между структурными  между элементами технической системы, между технической системой и человеком, окружающей средой, другими объектами.

Чем более отдалена аналогия между сравниваемыми объектами, тем более оригинален вывод.
Аналогия второстепенных и побочных, на первый взгляд, свойств и отношений часто обладает высокой степенью эвристичности, что объясняется раскрытием в процессе аналогизирования ранее не замеченной существенности аналогии.
Чем более общие свойства и отношения используются в процессе аналогизирования, тем большее пространство поиска новых идей можно использовать.
Аналогия между особым и общим случаем более эвристична по сравнению с аналогией между особыми случаями.
Чем больше разнородность классов, к которым принадлежат аналоги, тем более оригинальным является вывод
'''


Analogii2 = ''' Аналоги и аналогии в технике и природе
Для поиска аналогов (прототипов) разрабатываемой ТС используются аналогизация свойств и аналогизация отношений.

Аналогизация свойств — это умозаключение, в котором признаком сходства аналогов (прототипа) разрабатываемой ТС являются их свойства.
Упрощенно аналогию свойств в научно-техническом творчестве можно описать следующим образом:
Разрабатываемая техническая системы имеет признаки a, b, c. Объект A в рассматриваемой предметной области имеет признаки a, b, c. Кроме того, объект А имеет признак d. Вероятно, что в разрабатываемой ТС может быть использован признак d.
Например, при разработке детского стульчика (кресла) при поиске аналогов могут быть использованы признаки:
наличие сиденья, ножек, спинки (признаки a, b, c), по которым могут быть найдены разные типы кресел — тронное, дачное, дворцовое, будуарное, театральное, детское и другие; затем можно выбрать, например, у тронного кресла признак d (характеризующий принадлежность к трону) и с вероятным успехом использовать этот признак (например, корону) при создании кресла для маленькой принцессы (принца).

Аналогизация отношений — это умозаключение, в котором признаками сходства аналогов разрабатываемой технической системы являются отношения между элементами технической системы, между технической системой и человеком, окружающей средой, другими объектами.
Упрощенно аналогию отношений в научно-техническом творчестве можно описать следующим образом. Разрабатываемая техническая системы (А) подобна другой(С). Объект B в рассматриваемой предметной области подобен объекту D. Между(C) и объектом D имеются отношения R. Вероятно, между разрабатываемой технической системой (A) и объектом B имеются отношения R.

Аналогизация свойств и аналогизация отношений используется при выявлении следующих пяти типов аналогий:
1) Функциональная аналогия определяется сходством функциональной структуры сравниваемых объектов и явлений
2) Структурная аналогия определяется общностью материальной основы сравниваемых объектов и явлений. Субстратом всех известных физических процессов выступают элементарные частицы и поля, фундаментальные взаимодействия которых обусловливают физико-химические формы движения.
3) Субстратная аналогия определяется общностью элементарных единиц нашей предметной области
Субстратом химической реакции являются атомы, остающиеся устойчивыми при образовании и превращении веществ. Субстратом биологических процессов в живых организмах служат молекулы нуклеиновых кислот (ДНК и РНК) и белковых веществ.
Субстратом социальных форм движения является человек.
4) Аналогия внешней формы определятеся многообразием форм, а также характерными особенности поверхности
5) Аналогия отношений определяется сходством отношений (связей) между структурными  между элементами технической системы, между технической системой и человеком, окружающей средой, другими объектами.

Чем более отдалена аналогия между сравниваемыми объектами, тем более оригинален вывод.
Аналогия второстепенных и побочных, на первый взгляд, свойств и отношений часто обладает высокой степенью эвристичности, что объясняется раскрытием в процессе аналогизирования ранее не замеченной существенности аналогии.
Чем более общие свойства и отношения используются в процессе аналогизирования, тем большее пространство поиска новых идей можно использовать.
Аналогия между особым и общим случаем более эвристична по сравнению с аналогией между особыми случаями.
Чем больше разнородность классов, к которым принадлежат аналоги, тем более оригинальным является вывод
'''


Analogii3 = ''' Аналоги и аналогии в технике и природе
Для поиска аналогов (прототипов) разрабатываемой технической системы используются два подхода - поиск сходства по свойствам и  поиск сходства по отношениям.
При поиске сходства по свойствам признаком сходства аналогов с имеющейся технической системой являются их свойства.
При поиске сходства по отношениям признаками сходства аналогов с имеющейся технической системой являются отношения между элементами технической системы, технической системой и человеком, окружающей средой, другими объектами.

Поиск сходства свойст как и поиск сходства отношений используется при выявлении следующих пяти типов аналогий:
1) Функциональная аналогия определяется сходством функциональной структуры сравниваемых объектов и явлений
2) Структурная аналогия определяется общностью материальной основы сравниваемых объектов и явлений. Субстратом всех известных физических процессов выступают элементарные частицы и поля, фундаментальные взаимодействия которых обусловливают физико-химические формы движения.
3) Субстратная аналогия определяется общностью элементарных единиц нашей предметной области
Субстратом химической реакции являются атомы, остающиеся устойчивыми при образовании и превращении веществ. Субстратом биологических процессов в живых организмах служат молекулы нуклеиновых кислот (ДНК и РНК) и белковых веществ.
Субстратом социальных форм движения является человек.
4) Аналогия внешней формы определятеся многообразием форм, а также характерными особенности поверхности
5) Аналогия отношений определяется сходством отношений (связей) между структурными  между элементами технической системы, между технической системой и человеком, окружающей средой, другими объектами.

Чем более отдалена аналогия между сравниваемыми объектами, тем более оригинален вывод.
Аналогия второстепенных и побочных, на первый взгляд, свойств и отношений часто обладает высокой степенью эвристичности, что объясняется раскрытием в процессе аналогизирования ранее не замеченной существенности аналогии.
Чем более общие свойства и отношения используются в процессе аналогизирования, тем большее пространство поиска новых идей можно использовать.
Аналогия между особым и общим случаем более эвристична по сравнению с аналогией между особыми случаями.
Чем больше разнородность классов, к которым принадлежат аналоги, тем более оригинальным является вывод
'''
Analogii1 = ''' Аналоги и аналогии в технике и природе

1) Аналогия свойств — это умозаключение, в котором признаком сходства аналогов (прототипа) разрабатываемой ТС являются их свойства.
Упрощенно аналогию свойств в научно-техническом творчестве можно описать следующим образом:
Разрабатываемая техническая системы имеет признаки a, b, c. Объект A в рассматриваемой предметной области имеет признаки a, b, c. Кроме того, объект А имеет признак d. Вероятно, что в разрабатываемой ТС может быть использован признак d.
Например, при разработке детского стульчика (кресла) при поиске аналогов могут быть использованы признаки:
наличие сиденья, ножек, спинки (признаки a, b, c), по которым могут быть найдены разные типы кресел — тронное, дачное, дворцовое, будуарное, театральное, детское и другие; затем можно выбрать, например, у тронного кресла признак d (характеризующий принадлежность к трону) и с вероятным успехом использовать этот признак (например, корону) при создании кресла для маленькой принцессы (принца).
2) Аналогия отношений — это умозаключение, в котором признаками сходства аналогов разрабатываемой технической системы являются отношения между элементами технической системы, между технической системой и человеком, окружающей средой, другими объектами.
Упрощенно аналогию отношений в научно-техническом творчестве можно описать следующим образом. Разрабатываемая техническая системы (А) подобна другой(С). Объект B в рассматриваемой предметной области подобен объекту D. Между(C) и объектом D имеются отношения R. Вероятно, между разрабатываемой технической системой (A) и объектом B имеются отношения R.

Чем более отдалена аналогия между сравниваемыми объектами, тем более оригинален вывод.
Аналогия второстепенных и побочных, на первый взгляд, свойств и отношений часто обладает высокой степенью эвристичности, что объясняется раскрытием в процессе аналогизирования ранее не замеченной существенности аналогии.
Чем более общие свойства и отношения используются в процессе аналогизирования, тем большее пространство поиска новых идей можно использовать.
Аналогия между особым и общим случаем более эвристична по сравнению с аналогией между особыми случаями.
Чем больше разнородность классов, к которым принадлежат аналоги, тем более оригинальным является вывод
'''

Analogii = ''' Аналоги и аналогии в технике и природе
Виды аналогий:
1) Функциональная аналогия определяется сходством функциональной структуры сравниваемых объектов и явлений
2) Структурная аналогия определяется общностью материальной основы сравниваемых объектов и явлений. Субстратом всех известных физических процессов выступают элементарные частицы и поля, фундаментальные взаимодействия которых обусловливают физико-химические формы движения.
3) Субстратная аналогия определяется общностью элементарных «единиц» нашей предметной области
Субстратом химической реакции являются атомы, остающиеся устойчивыми при образовании и превращении веществ. Субстратом биологических процессов в живых организмах служат молекулы нуклеиновых кислот (ДНК и РНК) и белковых веществ.
Субстратом социальных форм движения является человек.
4) Аналогия внешней формы определятеся многообразием форм, а также характерными особенности поверхности
5) Аналогия отношений определяется сходством отношений (связей) между структурными  между элементами технической системы, между технической системой и человеком, окружающей средой, другими объектами.

Чем более отдалена аналогия между сравниваемыми объектами, тем более оригинален вывод.
Аналогия второстепенных и побочных, на первый взгляд, свойств и отношений часто обладает высокой степенью эвристичности, что объясняется раскрытием в процессе аналогизирования ранее не замеченной существенности аналогии.
Чем более общие свойства и отношения используются в процессе аналогизирования, тем большее пространство поиска новых идей можно использовать.
Аналогия между особым и общим случаем более эвристична по сравнению с аналогией между особыми случаями.
Чем больше разнородность классов, к которым принадлежат аналоги, тем более оригинальным является вывод
'''


IKR = '''
Понятие «идеальный конечный результат» и методика его формирования
1) определение «идеальный конечный результат»: «Техническая система как будто нет, а функция выполняется».
2) использование в названии технической системы корня «сам-», а также допущения, что потребность каким-то образом реализуется без специально предназначенной для нее технической системы
3) повышения эффективности (идеальности) технической системы является разработка технических решений, обеспечивающих максимальное увеличение полезности технической системы  и уменьшение платы за полезность. Например, основные полезные характеристики транспортных средств: вес груза, скорость транспортировки. К характеристикам платы за полезность относятся общий вес транспортного средства (с грузом), энергозатраты и др. Идеальным является транспортное средство, у которого общий вес транспортного средства с грузом равен весу груза (то есть вес сооружений, оборудования, обеспечивающих движение, управление транспортным средством, а на кораблях — и проживание экипажа, равен нулю). Другими словами, этих сооружений и оборудования быть не должно.
4) Сформировать «идеальный конечный результат» помогает принцип «обрати вред в пользу». Например, в некоторых гидротехнических сооружениях скорость воды, выполнившей свою работу, чрезмерно велика, и при сбросе в реку она разрушает дно. Существенно уменьшить затраты на погашение скорости может решение, при котором поток воды делится на 2–3 потока, которые, соударяясь при слиянии, взаимно гасят свои скорости.
'''

IKR1 = '''
Определение понятия «идеальный конечный результат»: «Техническая система как будто нет, а функция выполняется».
Методы поиска реализаций на основе этого понятия:
1) формирование названия новой технической системы с использованием корня «сам-»,
2) использование допущения, что потребность каким-то образом реализуется без специально предназначенной для нее технической системы
3) разработка технических решений, обеспечивающих максимальное увеличение полезности технической системы  и уменьшение платы за полезность. Например, основные полезные характеристики транспортных средств: вес груза, скорость транспортировки. К характеристикам платы за полезность относятся общий вес транспортного средства (с грузом), энергозатраты и др. Идеальным является транспортное средство, у которого общий вес транспортного средства с грузом равен весу груза. Другими словами, этих сооружений и оборудования быть не должно.
4) использование принципа «обрати вред в пользу». Например, в некоторых гидротехнических сооружениях скорость воды, выполнившей свою работу, чрезмерно велика, и при сбросе в реку она разрушает дно. Существенно уменьшить затраты на погашение скорости может решение, при котором поток воды делится на 2–3 потока, которые, соударяясь при слиянии, взаимно гасят свои скорости.
'''

IKR2 = '''Идеальный конечный результат:
С точки зрения философии, достичь невозможно, но целесообразно ставить задачи по формированию ИКР, обеспечивающего характеристики созданной ТС близкими к идеальным (когда ТС нет, а требуемая функция выполняется), т.е. когда полезность ТС стремится к максимуму, а плата за полезность ничтожна (или даже отсутствует).
Конечно, при этом ТС «как бы нет», но какая-то ТС всегда есть, и, может быть, выполнена скрытно и реализует заданную функцию с обязательной платой (может быть очень мелкой) за полезность.
Известны следующие 7 способов, способствующих разработке таких ТС:
1) использование корня «сам» в названиях разрабатываемых ТС (по аналогии с «хорошими» прилагательными, образованными при помощи основы «сам-» и соединительной гласной «о»);
2) максимальное увеличение полезности и уменьшение платы за полезность (например, практически бесплатной является сплавная транспортировка бревен по реке, а с малыми затратами доставляют пресную воду по океану буксировкой айсбергов);
3) замена «неприятной» функции на другую, более «приятную» (например, мытье посуды может быть заменено на сбор и утилизацию одноразовой посуды);
4) исключение функций за счет изменения свойств объекта (например, глажение может быть исключено при использовании немнущихся тканей, а мытья посуды можно избежать, если посуда съедобна);
5) специализация за счет увеличения разновидностей относительно простых ТС (например, есть ножи армейские, столовые, перочинные, разделочные, для пиццы, мясные, сырные, грибные, хлебные, рыбные, для фигурной резки – карвинга и др.);
6) интеграция одной ТС в другую ТС и/или в живые организмы, в том числе в человека (глазные линзы, чипы в теле человека);
7) использование эвристического приема «обрати вред в пользу» (например, на основе эффекта разрушения металла электрической дугой, возникающей при замыкании и размыкании контактов, разработали технологию электроискровой обработки особо твердых металлов, а эффект кавитации, разрушающий водопроводные трубы, успешно реализован при создании супер-скоростных торпед).
'''
Glagoly0 = '''«Хорошие» и «плохие» глаголы и рекомендации по их использованию:
Cледует формировать функции технической системы на основе «хороших» глаголов, которые обозначают полезные функции или предотвращают или уменьшают негативные последствия функционирования технической системы.
Следуюет использовать «плохие» глаголы для выявления возможных вредных функций технической системы.
'''

Glagoly1 = '''«Хорошие» и «плохие» глаголы и рекомендации по их использованию:
Cледует формировать полезные функции технической системы на основе «хороших» глаголов.
Следуюет использовать «плохие» глаголы для выявления возможных вредных функций технической системы.
Следует избегать использования частицы "не" при формулировании действия (например, вместо «не пропускать» лучше «ограничивать перемещение»).
'''

Glagoly2 = '''«Хорошие» и «плохие» глаголы и рекомендации по их использованию:
Cледует формировать полезные функции технической системы на основе «хороших» глаголов.
Следуюет использовать «плохие» глаголы для выявления возможных вредных функций технической системы.
Следует избегать отрицания при формулировании действия (например, вместо «не пропускать» лучше «ограничивать перемещение»).
При описании функции следует вместо конструкции типа: глагол широкого значения + отглагольное существительное, использовать один специфицирующий глагол
'''

Glagoly3 = '''«Хорошие» и «плохие» глаголы и рекомендации по их использованию:
Cледует формировать полезные функции технической системы на основе «хороших» глаголов.
Следуюет использовать «плохие» глаголы для выявления возможных вредных функций технической системы.
Следует избегать отрицания при формулировании действия (например, вместо «не пропускать» лучше «ограничивать перемещение»).
При описании функции следует не использовать конструкции типа: глагол широкого значения + отглагольное существительное, а использовать один специфицирующий глагол
'''

Glagoly = '''«Хорошие» и «плохие» глаголы и рекомендации по их использованию:
Cледует формировать функции технической системы на основе «хороших» глаголов, которые обозначают полезные функции или предотвращают или уменьшают негативные последствия функционирования технической системы.
Следуюет использовать «плохие» глаголы для выявления возможных вредных функций технической системы.
Функция технической системы это:
1) глагол в неопределенной формы, описывающий некое действие технической системы
2) одно-два слова, описывающие материальный объект или явление, на которые направлено действие
3) несколько слов, описывающие особые условия или ограничения, при которых выполняется действие
Например, «измерять температуру воды в море на глубине 8 км».
Подбирать слова нужно по следующим правилам:
1. Действие должно выражаться глаголом, которые не указывает на способ реализации (например, вместо «раздробить», «разрезать», «разорвать» лучше «разъединять», а вместо «расплавить», «кристаллизовать» лучше «изменить состояние»).
2. При описании функции следует не использовать конструкции типа: глагол широкого значения + отглагольное существительное, а использовать один специфицирующий глагол
3. Следует избегать отрицания при формулировании действия (например, вместо «не пропускать» лучше «ограничивать перемещение»).
4. Следует использовать обобщенное описание объекта или явления (например, вместо «вода», «воздух», «почва», «материал» использовать «вещество»).
'''



Resursi = '''
Поиск скрытых ресурсов технической системы:
1) использовать ресурсы, возникающие за счет полезных, вредных и нейтральных функций рассматриваемой технической системы, в других технических системах для реализации их полезных функций.
2) для реализации полезных функций в рассматриваемой технической системы необходимо найти "чужие" ресурсы и соответственно технические системы, их порождающие
Использование как готовых, модифицированных и преобразованных ресурсов, так и механизмов их возникновения, которые на основе конвергенции (сближения, переноса) знаний могут быть задействованы при эксплуатации, совершенствовании или создании новой технической системы

Классы ресурсов:
1) Вещественный
Любые отходы производства и потребления, а также жизнедеятельности человека и живой природы, вещества естественного происхождения в окружении ТС, играющие вредную или нейтральную роль при выполнении полезных функций ТС. Материально-вещественная часть ТС, которая может быть использована как составная часть другой ТС.
2) Пространственный
Имеющиеся в ТС или ее окружении свободные пространства (в том числе на микроуровне), заполненные газом или являющиеся вакуумом.
Часть используемого пространства ТС, которая может быть задействована (как правило, временно) для реализации новых полезных функций.
3) Временной
Неиспользованное в ТС время до начала или после окончания технологического цикла, процесса, операции, приема, действия.
Время выполнения ТС технологического цикла, процесса, операции, приема, действия, которое параллельно может быть использовано для выполнения других технологических циклов, процессов, операций, приемов, действий.
4) Информационный
Любая информация, характеризующая состояния окружающей среды, фактические свойства ТС, их возможные изменения при эксплуатации, хранении, утилизации, захоронении ТС.
Наличие определенных объектов окружающей среды или их характеристики, косвенно указывающие на наличие других объектов окружающей среды.
5) Функциональный
Вредные и нейтральные функции, возникающие в ТС при ее эксплуатации, хранении, утилизации, захоронении или под воздействием окружающей среды.
Полезные функции ТС, которые могут быть использованы (как правило, временно) в качестве главной и основных функций другой ТС.
6) Энергетический
Все виды энергии, возникающие при эксплуатации, хранении, утилизации, захоронении ТС или под воздействием окружающей среды, как вредные или нейтральные факторы.
Неиспользуемые при эксплуатации, хранении, утилизации, захоронении ТС излишки энергии, либо энергия естественного происхождения (доступная из окружающей среды).
Часть энергии, применяемой в ТС, которая может быть использована (как правило, временно) для реализации новых полезных функций.
7) Полевой
Все виды физических полей, возникающие при эксплуатации, хранении, утилизации, захоронении ТС или под воздействием окружающей среды, как вредные или нейтральные факторы.
Физические поля в окружающей ТС среде, действующие как вредные или нейтральные факторы. Физические поля, обусловленные окружающей средой, используемые в ТС, которые могут быть задействованы (как правило, временно) для реализации новых полезных функций.
8) Системный
Комплексы взаимосвязанных вредных и нейтральных функций, возникающие при эксплуатации, хранении, утилизации, захоронении ТС, а также под воздействием окружающей среды.
Комплексы взаимосвязанных полезных функций ТС, которые могут быть использованы (как правило, временно) в другой ТС.
'''


Resursi1 = '''Cкрытые ресурсы технической системы (ТС)
Методы использования скрытых ресурсов технической системы:
1) использовать ресурсы, возникающие за счет полезных, вредных и нейтральных функций рассматриваемой технической системы для реализации полезных функций в самой системе или других технических системах
2) использовать ресурсы из других технических систем или внешнего мира для реализации полезных функций в рассматриваемой технической системы
Использование как готовых, модифицированных и преобразованных ресурсов, так и механизмов их возникновения, которые на основе конвергенции (сближения, переноса) знаний могут быть задействованы при эксплуатации, совершенствовании или создании новой технической системы

Классы ресурсов:
1) Вещественный
Любые отходы производства и потребления, а также жизнедеятельности человека и живой природы, вещества естественного происхождения в окружении ТС, играющие вредную или нейтральную роль при выполнении полезных функций ТС. Материально-вещественная часть ТС, которая может быть использована как составная часть другой ТС.
2) Пространственный
Имеющиеся в ТС или ее окружении свободные пространства (в том числе на микроуровне), заполненные газом или являющиеся вакуумом.
Часть используемого пространства ТС, которая может быть задействована (как правило, временно) для реализации новых полезных функций.
3) Временной
Неиспользованное в ТС время до начала или после окончания технологического цикла, процесса, операции, приема, действия.
Время выполнения ТС технологического цикла, процесса, операции, приема, действия, которое параллельно может быть использовано для выполнения других технологических циклов, процессов, операций, приемов, действий.
4) Информационный
Любая информация, характеризующая состояния окружающей среды, фактические свойства ТС, их возможные изменения при эксплуатации, хранении, утилизации, захоронении ТС.
Наличие определенных объектов окружающей среды или их характеристики, косвенно указывающие на наличие других объектов окружающей среды.
5) Функциональный
Вредные и нейтральные функции, возникающие в ТС при ее эксплуатации, хранении, утилизации, захоронении или под воздействием окружающей среды.
Функции ТС, которые могут быть использованы в качестве полезных функций другой ТС
6) Энергетический
Все виды энергии, возникающие при эксплуатации, хранении, утилизации, захоронении ТС или под воздействием окружающей среды, как вредные или нейтральные факторы.
Неиспользуемые при эксплуатации, хранении, утилизации, захоронении ТС излишки энергии, либо энергия естественного происхождения (доступная из окружающей среды).
Часть энергии, применяемой в ТС, которая может быть использована для реализации новых полезных функций.
7) Полевой
Все виды физических полей, возникающие при эксплуатации, хранении, утилизации, захоронении ТС или под воздействием окружающей среды, как вредные или нейтральные факторы.
Физические поля в окружающей ТС среде, действующие как вредные или нейтральные факторы. Физические поля, обусловленные окружающей средой, используемые в ТС, которые могут быть задействованы для реализации новых полезных функций.
8) Системный
Комплексы взаимосвязанных вредных и нейтральных функций, возникающие при эксплуатации, хранении, утилизации, захоронении ТС, а также под воздействием окружающей среды.
Комплексы взаимосвязанных полезных функций ТС, которые могут быть использованы в другой ТС.
'''

if is_running_in_colab() :
  #-----------------
  request = type('Request', (), {'form': {'Resursi': ''}})
  session = {'Evristiki':'', 'TS_Original':''}
  session["TS_Original"] = 'фен для волос'

  def redirect(a) : return 0
  def url_for(a) : return 0
  def iiiit() :
    return 0


  #-------- Эвристики ------------




  session["TS_Original"] = 'фен для волос'
  iiiit()
  print(session['Evristiki'])

#@title Потребности

'''
Технически реализуемые потребности описываются в следующем порядке:
указание (описание) действия (Д), приводящего к реализации потребности;
указание (описание) объекта (О), предмета труда;
указание (описание) особых условий (У) и ограничений, при которых выполняется действие (Д).
Примеры описаний технически реализуемых потребностей приведены в таблице 1.
'''
Potrebnosti_definition='''
Технически реализуемые потребности описываются в виде словосочетания, состоящего из трех следующих частей:
обобщенное действие (глагол)
предмет действия (существительное)
ограничения или особые условия
В описании потребности нельзя указывать технический способ реализации.
Например, потребность реализуемая ТС "налобный фонарик": освещать пространство без использования рук
'''

Potrebnosti_list = '''
Постоянные устойчивые потребности человека (или группы потребностей):
Защищать (профилактировать) от болезней и боли, неприятных ощущений (зуда, громкого звука, яркого света, неприятного запаха, потливости и др.), от вредных воздействий окружающей среды и действий людей, а также лечить
Иметь защитные и спасательные средства для критических ситуаций
Получать, хранить и передавать информацию

Периодические устойчивые потребности человека:
Обеспечивать многофункциональность ТС, в том числе за счет реализации бытовых функций (отрезать, проколоть, открыть, отвинтить или завинтить, закрепить, нагреть, охладить, увеличить изображение, очистить, осветить и др.)
Обеспечивать совместимость функций, свойств, отношений (и их параметров) в различных ТС, обществе
Самостоятельно преобразовывать и аккумулировать энергию
Изменять свойства и параметры ТС при их функционировании, транспортировке, хранении, утилизации или захоронении
Упорядочивать расположение объектов и их элементов (в том числе знаков, символов, звуков), форму объектов, виды и характеристики движений, связи между объектами и их элементами или заменять существующий порядок на другой
Резервировать (для повышения надежности ТС или организационной структуры, жизнеспособности объекта живой природы) технические системы, значения их прочностных, деформационных и других характеристик, связи, энергию, время, пространство, информацию, кадры, внешние и внутренние биологические органы
Развивать умственные, творческие, физические способности, а также развиваться духовно
Развлекаться, развлекать и релаксировать
Иметь приятные запахи, тактильные свойства, звук (или беззвучность), цвет (или бесцветность)
Обозначать принадлежность к нации, религии, профессии, фирме, виду спорта (другим увлечениям), команде, клубу и др.
Охранять и рационально использовать природу
Иметь удобную и эффективную технологию утилизации продуктов жизнедеятельности человека и др.
Реализовывать потребность в красоте, гармонии (эстетические потребности)
'''

Potrebnosti_list_RAF = '''
Потребности человека и социума классифицируются следующим образом:
1. Потребности персональные
  1.1 Психическое/информационное ("пища" для мозга, чувства, ощущения)
    1.1.1 Получение информации/впречатлений
    1.1.2 Устранение отходов информации
    1.1.3 Защита (от внешних/внутренних психических и информационных угроз)
      1.1.3.1 Быстрые угрозы (дезинформация или неприятые ощущения, краткосрочные или мгновенные по воздействию)
      1.1.3.2 Медленные угрозы (каждодневное загрязнение личного информационного потока, деградация личной эстетики, внешние и внутренние психологческие факторы, ухудшающие радость от жизни)
  1.2 Физическое
    1.2.1 Получение энергии, вещества необходимых для жизни организма на уровне физиологии (пища, воздух, вода, солнце, естественная радиация, естественная сила тяжести)
    1.2.2 Устранение отходов (туалетные, продукты дыхания, влага, шелуха с кожи, ногти, волосы)
    1.2.3 Защита (от внешних/внутренних физических угроз)
      1.2.3.1 Быстрые угрозы (персональная защита от терактов, аварий)
      1.2.3.2 Медленные угрозы (болезни, загрязнение пищи/воздуха, излучения, старение)
2. Потребности социума
  2.1 Психическое/информационное (обмен информацией/чувства/ощущения)
    2.1.1 Получение информации/впречатлений социумом и системой управления социумом
    2.1.2 Устранение отходов информации
    2.1.3 Защита (от внешних/внутренних психических и информационных угроз)
      1.1.3.1 Быстрые угрозы (дезинформация, эмоциональные скачки в социуме краткосрочные или мгновенные по воздействию)
      1.1.3.2 Медленные угрозы (каждодневное загрязнение  информационного потока, деградация эстетики социума, внешние и внутренние психо-информационные факторы, ухудшающие гармонию социума)
  2.2 Физическое
    2.2.1 Получение энергии, вещества (сжигаем уголь в буржуйках, привозим камни для постройки /получаем электричество с АЭС, синтезируем быстросохнущую пену для построек/..)
    2.2.2 Устранение отходов (золы в печке/ дыр в земле от добычи руды/)
    2.2.3 Защита (от внешних/внутренних)
      2.2.3.1 Быстрые угрозы (общественная защита от терактов, природных катаклизмов, войн)
      2.2.3.2 Медленные угрозы
'''

MK_Etap3 = '''
Потребность удовлетворяемая технической системой или изменения характеристик технической системы реализуются с помощью
функции реализации.
Функцию реализации нужно описывать с помощью определяющего способ реализации глагола типа:
- экранировать
- охлаждать
- информировать
- разделять
- демпфировать
- защищать (профилактировать) от болезней и боли
'''

#@title Систематики

zpr_c_list_long [101]='''
1. Виды энергии
2. Свойства ТС, параметры которых следует увеличивать (резервировать)
3. Химические эффекты
4. Биологические эффекты
5. Классификация веществ по степени нарастания чистоты (10 классов)
6. Отрасли технической сферы
7. Перечень технических систем и пространств для проведения
- энергии
- вещества
- информации
в том числе беспроводные среды
8. 109 различий мужчины и женщины
9. Виды спорта
10. Органы чувств человека
11. Виды мебели (ГОСТ 20400 «Продукции мебельного производства. Термины и определения»)
12. Виды летательных аппаратов. Классификация летательных аппаратов
13. Систематика. Классификация живых организмов
14. Классификация химических реакций
15. Классификация природных ресурсов
16. Классификация растений
17. Виды классификации авто
18. Классификация бытовой техники
19. Виды и классификация опасностей (15 групп)
20. Классификация видов спорта. Олимпийская классификация видов спорта
21. Классификация ножей
22. Классификация лодок по разных критериям
23. Классификация беспилотных летательных аппаратов (БПЛА) по разных критериям
24. Классификация почв
25. Общероссийский классификатор стран мира
26. Федеральный классификационный каталог отходов (ФККО) 2024 (rpn.gov.ru)
27. Характеристики классов скрытых ресурсов
28. Межотраслевой фонд эвристических приемов
29. Виды часов
30. Виды узлов и способы их вязки
31. Виды галстучных узлов и способы их вязки
32. 20 узлов, которые вам нужно знать
33. Виды изделий из стекла
34. Виды мужской обуви и их названия
35. Виды женской обуви и их названия
36. Список видов и типов тканей
37. Группы профессиональных заболеваний
38. Виды рассасывающихся нитей
39. Классификация металлов и сплавов по ГОСТ
40. Классификация пластмасс оп разным признакам
41. Классы материалов с необычными свойствами
42. Классификация протезов конечностей
43. Классификация табака и табачных изделий
44. Пищевая промышленность
45. Отрасли сельского хозяйства
46. Рыбоводство и рыбное хозяйство
47. Классификация лекарственных препаратов
48. Лекарственные формы и их классификация
49. Способы приготовления лекарственных препаратов
50. Классификация видов массажа
51. Классификация деревьев и кустарников
52. Классификация травяных растений
53. Классификация видов асфальта
54. Классификация видов бетона
55. Классификация клеев
56. Классификация медицинских отходов
57. Классификация оксидов
58. Классификация солей в химии
59. Классификация щелочей в химии и фармакологии
60. Классификация оснований и кислот
61. 100 выдающихся достижений человечества
62. Классификация неорганических веществ
63. Классификация химических реакций
64. Критерии креативности педагогических технологий учебников и учебных пособий
65. Перечень «хороших» глаголов (функций)
66. Перечень «хороших» прилагательных (свойств)
67. Критерий необычности свойств материалов
68. Перечень устойчивых потребностей человека
69. Причины возникновения и основные группы потребностей человека в защите
70. Перечень экологических законов
71. Характеристики групп традиционных ресурсов
72. Перечень существительных, рекомендуемых для исследования в методе фокальных объектов
73. Перечень функций воображения
74. Виды ассоциаций
75. Виды аналогии и их характеристики
76. Виды интуиции
77. Виды и примеры противоречий в различных отраслях и сферах, в которых проявляются
противоречия
78. Виды мотиваций к творчеству
79. Перечень качеств и компетенций, обеспечивших успешную творческую деятельность гениев
80. Перечень рекомендуемых эвристик
81. Свойства технической системы, сгруппированные по различным основаниям
82. Характеристики классов нетрадиционных (скрытых) ресурсов
83. Основные агрегатные состояния вещества
84. Приемы формирования новых образов при воображении в научно-техническом и
художественном творчестве
85. Виды барьеров творчества
86. Перечень сбывшихся предсказаний писателей-фантастов
87. Перечень результатов интеллектуальной деятельности, которым в Российской Федерации
предоставляет правовая охрана
88. Перечень фундаментальных функций труда
89. Типы задач, характеризующих лжепотребности человека
90. Виды функциональных структур технических систем
91. Перечень основных обобщающих функций технических систем и синонимов обобщающих
функций
92. Перечень общих значимых свойств технических систем
93. Перечень законом и закономерностей развития технических систем
94. Классификация морских судов
95. Перечень качеств творческой личности
96. Виды иллюзий
97. Перечень явлений и процессов, происходящих в атмосфере, космосе, земной коре, а также
следствие этих процессов
98. Классификация металлургических процессов
99. Способы обработки металлов
100. Перечень продуктов, получаемых из нефти
101. Методы обогащения руд
102. Виды учреждений дополнительного образования детей
103. Дисциплины гуманитарных наук
104. Виды и классификация мебели
105. Общероссийский классификатор занятий
106. Общероссийский классификатор продукции по видам экономической деятельности (ОКПД
2)
107. Общероссийский классификатор видов экономической деятельности (ОКВЭД2)
108. Общероссийский классификатор основных фондов (ОКОФ)
109. Общероссийский классификатор территорий муниципальных образований (ОКТМО)
110. Общероссийский классификатор объектов административно-территориального деления
(ОКАТО)
111. Общероссийский классификатор специальностей по образованию (ОКСО)
112. Общероссийский классификатор организационно-правовых форм (ОКОПФ)
113. Общероссийский классификатор управленческой документации (ОКУД)
114. Товарная номенклатура внешнеэкономической деятельности (ТН ВЭД)
115. Общероссийский классификатор единиц измерения (ОКЕИ)
116. Общероссийский классификатор информации о населении (ОКИН)
117. Общероссийский классификатор занятий (ОКЗ)
118. Общероссийский классификатор государственной власти и управления (ОКОГУ)
119. Общероссийский классификатор стран мира (ОКСМ)
120. Общероссийский классификатор форм собственности (ОКФС)
121. Общероссийский классификатор валют (ОКВ)
122. Общероссийский классификатор полезных ископаемых и полезных вод (ОКПИ и ПВ)
123. Общероссийский классификатор специальностей высшей научной квалификации
(ОКСВНК)
124. Общероссийский классификатор народных художественных промыслов и мест
традиционного бытования (ОКНХП)
125. Общероссийский классификатор трансформационных событий (ОКТС)
126. Общероссийский классификатор стандартов (ОКС)
127. Общероссийский классификатор направлений природоохранной деятельности и
деятельность по управлению природными ресурсами (ОКПД УПР)
128. Общероссийский классификатор финансовых инструментов (ОКФИ)
129. Классификатор институциональных единиц по секторам экономики (КИЕС)
130. Перечень элементарных операций для описания функциональных структур технических
систем
131. Классификация возобновляемых источников энергии
132. Классификация ветроэнергетических установок и станций
133. Классификация продуктов, получаемых из природного газа
134. Классификация продуктов, получаемых из угля
135. Приложение 1. Перечень видов продукции, относимой к сельскохозяйственной продукции к
постановлению Правительства РФ от 25 июля 2006 г. No458 (в редакции постановления
Правительства РФ от 30 декабря 2016г. No1563)
136. Классификация предприятий общественного питания
137. Классификация медицинских учреждений
138. Рекомендации по классификации, обнаружению, распознаванию и описанию опасностей
(утверждены Министерством руда и социальной защиты Российской Федерации, приказ от 31
января 2022 г. No36)
139. Классификация природных катаклизмов
140. Классификация ресурсов земных недр
141. Методы комплексного освоения недр
142. Классификация игр детей дошкольного возраста
143. Современная классификация детских игр
144. Ольфакторная классификация (классификация ароматов)
145. Флаги стран мира
146. Классификация цветов RAL CLASSIK полный каталог
147. Классификация продуктов питания
148. Виды спусковых устройств («Десантер», «Анти-Паник», GriGri, I’D, «Решетка».
«Восьмерка», «Корзинка» и др.)
149. Основные виды преобразователей энергии
150. Классификация горных пород
151. Классификация кристаллов
152. Виды зрелищного искусства
153. Виды музыкального искусства
154. Виды объектов изобразительного искусства
155. Роды, жанры, приемы, стили литературного творчества
156. Виды профилактики заболеваний
157. Виды боевых искусств
158. Классификация ядовитых веществ
159. Классификация драгоценных камней (К. Клюге, Г. Гюриха, М. Бауэра – А.Е. Феремана, В.И.
Соболевского, Е.Я. Киевленко, Е.П.Менльникова, промышленная классификация ювелирных и
поделочных камней ВНИИювелирпрома)
160. Национальный состав Российской Федерации – список народов России (более 190 народов)
161. 100 главных русских блюд
162. Классификация видов сварки
163. Классификация соединений деталей машин
164. Классификация древесных материалов
165. Способы переработки и утилизации пластика
166. Международная классификация болезней (МКБ-10)
167. Классификация и свойства нетканых материалов
168. Безопасность в чрезвычайных ситуациях. Аварийно-спасательные средства.
Классификация. Национальный стандарт Российской Федерации ГОСТ Р 22.9.22-2014
169. Оригами из бумаги для начинающих
170. Классификация животных
171. Основные виды преобразователей энергии
172. Виды сухопутных, водных, космических движетелей и движетелей амфибий
173. Средства коллективной защиты работающих от воздействия механических факторов.
Классификация ГОСТ 12.4.125-83 (1985) ССБТ
174. Классификация судовых насосов по принципу действия и назначению
175. Типы сцепления в автомобилях
176. Классификация коробок передач
177. Классификация взрывателей
178. Классификация двигателей внутреннего сгорания
179. Классификация глубинных электромеханических вибраторов для уплотнения бетона
180. Классификация вибраторов для перемещения материалов
181. Способы создания подъемной или движущей силы для летательного аппарата
182. Виды тормозных механизмов
183. Классификация малых архитектурных форм (МАФ)
184. Классификация текстильных волокон
185. Свойства волокон
186. Виды кузовов легковых автомобилей
187. Классификация легковых автомобилей в разных странах мира
188. Классификация артиллеристских орудий
189. Классификация мостовых сооружений по ГОСТ 33178-2014
190. Классификация соединительных муфт
191. Классификация генераторов электрических сигналов
192. Классификация резиновых изделий
193. Элементы конструкции крыши и кровли
194. «Канаты стальные. Технические условия» ГОСТ 7666-80
195. Классификация спортивных сооружений
196. Классификация проволоки по форме сечения и назначению
197. Классификация двигателей и их принципы действия
198. Отрасли машиностроения
199. Перечень общих значимых свойств ТС
200. Перечень резервов свойств, необходимых для сохранения соответствия между функциями и
структурой ТС
'''

"""##Функции работы с текстом

"""

daList = ['','да','д','y','ye','yes','ok','ок' ]
netList = ['нет','неверно','неправильно','не','н','n','no','non' ]
unknownList = ['не является', 'неизвестно','неизвестна','невозможно','технической', 'системой', 'могу', 'удаётся', 'определить', 'техническую', ' или']
unknown_strS = ['неизвестно','неизвестна','невозможно','не могу'] # Улучшения - не используется

def isListInStr(lst, str) :
  return True in [k in str for k in lst]

ZPR_heads_list = []                                 #   список заголовков ЗПР
for i in range(0,13)  :
  ZPR_heads_list.append(f'{i+1}. ' + re.sub('\n', '', re.split(r'Различают', zpr_array[i])[0] ))

verbose = 0
num_zpr_ts = 3          # Максимальное количество ЗПР для применения к ТС
num_chars = 3           # Максимальное количество свойств ТС
num_parts = 3           # Максимальное количество подсистем системы для рассмотрения

#========= Функции работы с ТЕКCТОМ     =================

def removeNonWords(stroka, lower = True, removeStars=True, removeMany=True ) : # Убрать мусор вначале и в конце, понизить заглавные буквы, убрать * в середине
  remove_it = '[\d\s\.\*\(\)\-:=#$№@;]*'
  if removeMany :
    stroka = re.sub(r'[\d\s\.\*\(\-:=#$№@;]*$', '', re.sub(r'^[\d\s\.\*\(\)\-:=#$№@;]*', '', stroka) )
  if removeStars : stroka = re.sub(r'\*+', '', stroka)
  # в конце строки   ^^^^^^^^^^^^^^^^^^^^^^^^\)    вначале  ^^^^^^^^^^^^^^^^^^^^^^^^^
  if lower : stroka =  stroka[0:1].lower() + stroka[1:]
  return stroka

import textwrap
def wrap_text(text, width=119) :
  text_list = text.split('\n')
  wrapped_text = ''
  for txt_line in text_list :
    for txt in textwrap.wrap(txt_line, width=width ) : wrapped_text = wrapped_text + ('\n' if wrapped_text else '')  + txt
  return wrapped_text

def MakeList( txt, shuffle=[], putNums = False, EOL = '\n', removeNotListLines=False, removeStars=False, lower = False ) :

  txt_list = txt.split('\n')          # Сделать список из текста
  if removeNotListLines :                               # Убрать все строки где нет цифр или *
    txt_list = [ stroka for stroka in txt_list if len(re.findall(r'[\d\*]',stroka)) > 0 ]
  txt_list = [ removeNonWords(stroka, removeStars=removeStars, lower = lower) for stroka in txt_list ]
  txt_list = list(filter(None, txt_list))    # Убрать пустые строки

  try :
    if shuffle : txt_list = [txt_list[i-1] for i in shuffle]
  except:
    print( f'/MakeList/txt={txt}\ntxt_list={txt_list}\n i={i}. shuffle={shuffle}')
  txt_ = ''

  for num, t in enumerate(txt_list) :
    if putNums : txt_ = txt_ + str(num+1) + '. ' # Добавить номера вначале
    txt_ = txt_ + t
    txt_ = txt_ + EOL               # Добавить что-то в конце
  return txt_, txt_list

"""##Функции выбора ЗПР

"""

#@title OLD  choose_zpr
#################### ZPR номера, начиная с 1
def choose_zpr_old( ts_name, Ulutshit_eto = False,           # ts_name = f'ТС «{TS_Original}»'
                verbose=0, version=0, mapping=False,
                shuffle = [],
                ask_question = ' ',
                system_role = '',
                num_zpr = 3,
                temp=0.1) :

  if verbose : print('Version=', version)
  TS_Original = ts_name
  ## ts_name = f'ТС «{TS_Original}»'  #
  if Ulutshit_eto :
    zpr_lng = zpr_c_list_long[version].format(TS=ts_name, Ulutshit_eto=Ulutshit_eto)
  else :
    zpr_lng = zpr_c_list_long[version].format(TS=ts_name)

  zpr_lng, zpr_lng_list   = MakeList(zpr_lng, shuffle)
  zpr_lng_n, zpr_lng_list = MakeList(zpr_lng, putNums=True, EOL='.\n') # Добавить номера и точки(нафига?)

  #@@@for i, t in enumerate(zpr_lng_list, start=1) : zpr_lng_txt  =  zpr_lng_txt + f'{i}) {t}.\n'  # Добавить номера в начале и точки в конце

  #------------------------------ Yandex GPT / Google GPT
  if GPT_mode == isYandex or GPT_mode == isGoogle :
    if GPT_mode == isYandex :
      if not system_role : system_role = 'Ты консультант для определения верности утверждений '
      if ask_question == ' ' :
        ask_question = [
          'Выбери самое верное утверждение из следующих:\n',
          'Выбери два самых верных утверждения из следующих:\n',
          'Выбери три самых верных утверждения из следующих:\n'] [num_zpr-1]
    if GPT_mode == isGoogle :
      if not system_role : system_role = 'Ты консультант для определения верности утверждений. Отвечай кратко'
      if ask_question == ' ' :
        ask_question = [
          'Выбери самое верное утверждение из следующих:\n',
          'Выбери два самых верных утверждения из следующих:\n',
          'Выбери три самых верных утверждения из следующих:\n'] [num_zpr-1]

    Answer  = ask_gpt( ask_question + zpr_lng, system_role = system_role, system_doc = ' ', verbose = verbose, temp = temp )
    answer =  Answer
    answer, answer_list = MakeList(answer)

    try :
      ZPR_Nums =  [zpr_lng_list.index(ans)+1 for ans in answer_list]
      if verbose : print(f'-------/choose_zpr/ ZPR_Nums={ZPR_Nums}=answer_list={answer_list}\n')
    except:               # ------ Одно из утверждений GPT сформулировал нестандартно
      ZPR_Nums = []
      for z in answer_list :
        try :
          ZPR_Nums.append(zpr_lng_list.index(z)+1)
        except :
          Answer_a = ask_gpt(
            f'Напиши порядковый номер похожего утверждения в списке: ' + zpr_lng_n,
            system_role = 'Ты консультант для поиска утверждений похожих на утверждение: ',
            system_doc = z,
            verbose = 0,
            temp = temp
          )
          if verbose : print(f'== Попытка распознать:"{z}"')
          try :    ZPR_Nums.append(int(re.findall(r'\d+', Answer_a)[0]))
          except : print(f'==не распознано:"{z}"\nans>>"{Answer_a}" ')

  #--------------------------------------------------- Deep Seek GPT
  else :
    if not system_role : system_role = 'Ты консультант для определения верности утверждений. Отвечай максимально кратко '
    if ask_question == ' ' :
      ask_question = [
        'Выбери самое верное утверждение из следующих и напиши его номер:\n',
        'Выбери два самых верных утверждения из следующих и напиши их номера:\n',
        'Выбери три самых верных утверждения из следующих и напиши их номера:\n'] [num_zpr-1]

    Answer  = ask_gpt( ask_question + zpr_lng_n, system_role = system_role, system_doc = ' ', verbose = verbose, temp = temp
    )

    try :    ZPR_Nums = [int(x) for x in re.findall(r'\d+', Answer)]
    except :
      print(f'==не распознано:\n ans>>"{Answer}" ')
      ZPR_Nums = []
  #--------------------------------------------------- end of if-else GPT



  # Привести утверждения к формату согласно маппингу
  ZPR_Nums_old = ZPR_Nums
  try :
    if shuffle :  ZPR_Nums = [shuffle[ZNum-1] for ZNum in ZPR_Nums]
    if mapping :  ZPR_Nums = [zpr_c_eq[x] if x in zpr_c_eq.keys() else x for x in ZPR_Nums]
  except:
    print(f'zpr_lng="{zpr_lng}"\nanswer="{Answer}"')
    print(f'ZPR_Nums_old={ZPR_Nums_old} ZPR_Nums={ZPR_Nums}\nshuffle={shuffle}')
    if shuffle :  ZPR_Nums = [shuffle[ZNum-1] for ZNum in ZPR_Nums]
  ### ZPR_Nums = [zpr_c_eq[x+1]-1 if x+1 in zpr_c_eq.keys() else x for x in ZPR_Nums]

  if verbose :  print(f'======== {ZPR_Nums}==Answer>>"{Answer}"')

  return ZPR_Nums

#@title OLD choose_zpr_global
def choose_zpr_global__old(TS_Original, Ulutshit_eto=False, verbose=0) :
  versions = [7,11,11]
  ZPR_grps = [ [1, 4, 6, 2, 12], [5, 3, 7, 13, 10, 11], [8, 9]] # Ранжированы по частотности - частотные группы
  ZPR_all = list(range(1,13+1))
  ZPR_to_ver = { 8:10, 9:7}
  ZPR_Nums = []
  MAX_grade = 10
  max_format = 44

  ts_name = TS_Original #@@@ f'ТС «{TS_Original}»'

  if verbose : print(f'----"{ TS_Original}"---')
  TS_Original_formated = TS_Original + ' '*(max_format-len(TS_Original))

  #--------------------------- Deep Seek GPT
  if GPT_mode == isDeepSeek :
    ZPR_group = ZPR_all
    ZPR_Nums_grp   = []
    num_zpr = 3
    for shuffle in [ZPR_group, list(reversed(ZPR_group))] : #--  прямой-обратный порядок
      if Ulutshit_eto : version= versions[1]
      else :            version= versions[0]
      ZPR_Nums_add = choose_zpr( ts_name, Ulutshit_eto, version=version, shuffle=shuffle, num_zpr = num_zpr, verbose=verbose )
      ZPR_Nums_grp = ZPR_Nums_grp + ZPR_Nums_add

    one_space = ' ' if version<10 else ''
    extra_spaces = ' '*(max_format-len(f'{ZPR_group}'))
    if verbose : print(f'---v{version}{one_space}---{ZPR_group}=>{extra_spaces}{ZPR_Nums_grp}')

    ZPR_Nums = ZPR_Nums_grp
    # Отставить только частые и не сортировать
    ZPR_Nums_cut = [i for i in ZPR_Nums if ZPR_Nums.count(i)>1]
    ZPR_Nums_cut = list(dict.fromkeys(ZPR_Nums_cut))
    #@@ ZPR_Nums_cut = sorted(set(ZPR_Nums_cut), key=ZPR_Nums_cut.count, reverse=True)

    ZPR_Nums_final = ZPR_Nums_cut
    return ZPR_Nums_final

  #--------------------------- Yandex GPT or Google GPT

  ZPR_group = ZPR_all
  #--- По уменьшающейся группе = для следующего шага вычитаем из группы найденые и иногда соответствующую шагу частотную группу
  num_grp = 0
  while True : #= not len(ZPR_group) <= 3 :
    ZPR_Nums_grp = []
    bigGroup    = (len(ZPR_group) >= 10)
    littleGroup = (len(ZPR_group) <= 3 )

    #-----  Выбор да/нет - рейтинг по каждому зпр ----
    if littleGroup :
      if Ulutshit_eto : version = versions[2]
      else            : version = versions[0]
      sss, zpr_list = MakeList(zpr_c_list_long[version])
      for z_num in ZPR_group :
        #print(f'!!!v{version}-{z_num}=>{ZPR_Nums_grp}--')
        statement  = zpr_list[z_num-1].format(TS=ts_name, Ulutshit_eto=Ulutshit_eto)
        Answer = ask_gpt(
          f'По шкале от 0 до {MAX_grade} насколько верно утверждение "{statement}"?',
          system_role = 'Ты консультант для определения верности утверждений. Отвечай кратко',
          system_doc = ' ', verbose=0)
        try :   grade = int(re.findall(r'\d+', Answer)[0])
        except: grade = 0
        #@@results[z_num] =  results[z_num] + [grade]
        if grade == MAX_grade :
          ZPR_Nums_grp.append(z_num)
      #--
    #-----  Выбор из нескольких  ----
    else :
      ZPR_Nums_grp   = []
      num_zpr = 3 if bigGroup else 2 #!!!!
      for shuffle in [ZPR_group, list(reversed(ZPR_group))] : #--  прямой-обратный порядок
        if Ulutshit_eto : version= versions[1]
        else :            version= versions[0]
        ZPR_Nums_grp_add = choose_zpr( ts_name, Ulutshit_eto, version=version, shuffle=shuffle, num_zpr = num_zpr, verbose=verbose )
        ZPR_Nums_grp = ZPR_Nums_grp + ZPR_Nums_grp_add
      #--  завершение цикла прямой-обратный порядок

    one_space = ' ' if version<10 else ''
    extra_spaces = ' '*(max_format-len(f'{ZPR_group}'))
    if verbose : print(f'---v{version}{one_space}---{ZPR_group}=>{extra_spaces}{ZPR_Nums_grp}')


    ZPR_group   = [i for i in ZPR_group if i not in ZPR_Nums_grp]       # ВЫЧЕСТЬ найденные зпр из группы зпр
    bigGroup    = (len(ZPR_group) >= 4)
    if bigGroup :
      ZPR_group = [i for i in ZPR_group if i not in ZPR_grps[num_grp]]  # ВЫЧЕСТЬ частые    зпр из группы зпр
    num_grp = num_grp + 1

    ZPR_Nums = ZPR_Nums + ZPR_Nums_grp
    if littleGroup :
      ZPR_Nums = ZPR_Nums + ZPR_Nums_grp       # Удвоить полученные из littleGroup - чтобы пройти контроль частотности
      break

    if GPT_mode == isGoogle : break            # Не манипулируем с найденными ZPR если Google GPT
  #--- Конец цикла: for ZPR_group in ZPR_grps :


  # Отставить только частые и не сортировать
  ZPR_Nums_cut = [i for i in ZPR_Nums if ZPR_Nums.count(i)>1]
  ZPR_Nums_cut = list(dict.fromkeys(ZPR_Nums_cut))

  ZPR_Nums_final = ZPR_Nums_cut

  #if GPT_mode == isGoogle : break            # Не манипулируем с найденными ZPR если Google GPT
  #------------- Исправляем полученый список зпр
  while (len(ZPR_Nums_final)>3) or (len(ZPR_Nums_final)<2) :
    if (len(ZPR_Nums_final)>3) :                    # Если слишком много ЗПР выбрали - уменьшим до 3, ! последнее сохраним,
      ZPR_Nums_cut_last = ZPR_Nums_cut[-1]
      ZPR_Nums_cut = list(ZPR_Nums_cut[:-1]) #@@list(reversed(ZPR_Nums_cut[:-1]))
      if Ulutshit_eto : version= versions[1]
      else :            version= versions[0]
      ZPR_Nums_final = choose_zpr( ts_name, Ulutshit_eto, version=version, shuffle=ZPR_Nums_cut,  num_zpr = 2, verbose=verbose )
      ZPR_Nums_cut.append( ZPR_Nums_cut_last )
      ZPR_Nums_final.append( ZPR_Nums_cut_last )

    if (len(ZPR_Nums_final)<2) :                    # Если слишком мало ЗПР  - добавим 2
      if verbose : print(f'--len(ZPR_Nums_cut)<2)--{ZPR_Nums_cut}')
      ZPR_group = [i for i in ZPR_all if i not in ZPR_Nums_cut]
      ZPR_group_shuffle = ZPR_group
      random.shuffle(ZPR_group_shuffle)
      ZPR_Nums_1 = []
      for shuffle in [ZPR_group, ZPR_group_shuffle] : #--  прямой-обратный порядок
        if Ulutshit_eto : version= versions[1]
        else :            version= versions[0]
        ZPR_Nums_grp_add = choose_zpr( ts_name, Ulutshit_eto, version=version, shuffle=ZPR_group_shuffle,  num_zpr = 2, verbose=verbose )
        ZPR_Nums_1 = ZPR_Nums_1 + ZPR_Nums_grp_add
      # Отставить только частые
      ZPR_Nums_cut_1 = [i for i in ZPR_Nums_1 if ZPR_Nums_1.count(i)>1]
      ZPR_Nums_cut_1 = list(dict.fromkeys(ZPR_Nums_cut_1))

      ZPR_Nums_final = ZPR_Nums_cut_1  + ZPR_Nums_final            # Обратный порядок, чтобы интересные были последними
      if ZPR_Nums_cut_1== [] : break           # Если не удалось добавить к малому найденному числу ЗПР - выходим из беск
      #@@ZPR_Nums_cut = ZPR_Nums_final
  #--- Конец цикла: while (len(ZPR_Nums_cut)>3) or (len(ZPR_Nums_cut)<2) :

  ZPR_Nums_final.reverse()
  if verbose :
     print(f'--------------------- ZPR_Nums ---------------------------------------------{ZPR_Nums_final}{ZPR_Nums_cut}{ZPR_Nums}')
  return ZPR_Nums_final

def last_index(lst,element) :
  return len(lst) - 1 - lst[::-1].index(element)

def choose_zpr_global(TS_Original, Ulutshit_eto=False, mapping = False, version = 17, non_standart = False,
                      ZPR_Nums = [], ZPR_Nums_unitersected = [], verbose=0) :
  if verbose : verbo = verbose-1
  else :       verbo = 0

  # if version>17 : mapping = True
  ZPR_often =  [6, 5, 1] # Ранжированы по частотности - частотные группы
  ZPR_all = list(range(1,13+1))
  ZPR_Nums_Lines_unitersected = ZPR_Nums_unitersected.copy() # Чисто для заполнения первых значений. Мы их не будем использовать
  old_unitersected_len = len(ZPR_Nums_unitersected)
  MAX_num_zpr = 3
  MAX_grade = 10
  max_format = 44

  ts_name = f'«{TS_Original}»'

  if verbose : print(f'----{ts_name}---')

  #--------------------------- Deep Seek GPT
  if GPT_mode == isDeepSeek :
    return [] # ZPR_Nums_final

  #--------------------------- Yandex GPT or Google GPT

  ZPR_group = ZPR_all
  #--- По уменьшающейся группе = для следующего шага вычитаем из группы найденые и иногда соответствующую шагу частотную группу
  num_zpr = MAX_num_zpr
  if ZPR_Nums :
    ZPR_group = [k for k in ZPR_group if (k not in ZPR_Nums)]     # Убираем уже выбранные
    ZPR_group = [k for k in ZPR_group if (k not in ZPR_often) ]   # Убираем часто встречающиеся
    num_zpr -= 1

  ZPR_Nums_grp,  ZPR_Nums_grp_Lines  = choose_zpr( ts_name, Ulutshit_eto, version=version, shuffle=ZPR_group,                 num_zpr = num_zpr, verbose=verbo )
  ZPR_Nums_grpR, ZPR_Nums_grpR_Lines = choose_zpr( ts_name, Ulutshit_eto, version=version, shuffle=list(reversed(ZPR_group)), num_zpr = num_zpr, verbose=verbo )
  ZPR_Nums_grp_inter = list(set(ZPR_Nums_grp).intersection(ZPR_Nums_grpR))
  ZPR_Nums += ZPR_Nums_grp_inter
  ZPR_Nums_unitersected       += ZPR_Nums_grp       + ZPR_Nums_grpR
  ZPR_Nums_Lines_unitersected += ZPR_Nums_grp_Lines + ZPR_Nums_grpR_Lines

  #--- Добавляем обязательно те, что переформулировала система нестандартно
  ZPR_Nums_add = []
  if non_standart :
    ZPR_Nums_add = [k for k in ZPR_Nums_grp + ZPR_Nums_grpR
                  if (ZPR_Nums_Lines_unitersected[last_index(ZPR_Nums_unitersected,k)][0]==' ') and (k not in ZPR_Nums)
                  ]
    ZPR_Nums += ZPR_Nums_add


  #----  Находим сдвоенные из оставшихся ( убрав уже выбранные и часто встречающиеся )
  ZPR_Nums_unitersected_cut = [k for k in ZPR_Nums_unitersected if (k not in ZPR_often) and (k not in ZPR_Nums)]
  ZPR_Nums_add = list(set([k for k in ZPR_Nums_unitersected_cut if ZPR_Nums_unitersected_cut.count(k) > 1]))
  ZPR_Nums += ZPR_Nums_add

  print('-------ZPR_Nums_unitersected, ZPR_Nums_add :',ZPR_Nums_unitersected, ZPR_Nums_add)


  #===========================


  ZPR_Nums_Lines = [ZPR_Nums_Lines_unitersected[last_index(ZPR_Nums_unitersected,k)] for k in ZPR_Nums]
  ZPR_Nums_Lines = [k if not isinstance(k, str) else
                    k[1:] if k[0]==' ' else k for k in ZPR_Nums_Lines] #Убрать сигнальные пробелы в формулировках
  ZPR_Nums_Lines = [k if not isinstance(k, str) else
                    k[:1].lower()+k[1:] for k in ZPR_Nums_Lines] # Убрать заглавные вначале
  # for k in ZPR_Nums_Lines_unitersected : print(k) #@@@
  if mapping :   ZPR_Nums = [ZPR_Mapping[x] if x in ZPR_Mapping.keys() else x for x in ZPR_Nums]

  print('-------ZPR_Nums_unitersected, ZPR_Nums :',ZPR_Nums_unitersected, ZPR_Nums)
  return ZPR_Nums, ZPR_Nums_Lines, ZPR_Nums_unitersected # Найдено нужное количество ЗПР

#========= Функции для ЗПР без номеров    =================
#################### ZPR номера, начиная с 1
def choose_zpr( ts_name, Ulutshit_eto = False,           # ts_name = f'«{TS_Original}»'
                verbose=0, version=0, mapping=False,
                shuffle = [],
                ask_question = '', system_role = '', num_zpr = 3,
                temp=0.1) :
  if verbose : verbo = verbose-1
  else :       verbo = 0

  if verbose : print('Version=', version)
  TS_Original = ts_name
  if version<13 : ts_name = f'ТС «{TS_Original}»'
  else:           ts_name = f'«{TS_Original}»'

  zpr_lng = zpr_c_list_long[version].format(TS=ts_name, Ulutshit_eto=Ulutshit_eto)

  zpr_lng,   zpr_lng_list = MakeList(zpr_lng, shuffle)
  zpr_lng_n, _            = MakeList(zpr_lng, putNums=True, EOL='\n') # Добавить номера

  #-- Делаем обрезанный список для более надежного сравнения
  _,   zpr_lng_list_truncated = MakeList(zpr_c_list_long[version], shuffle)
  min_to_ts = len(zpr_lng_list_truncated[0])
  for z in zpr_lng_list_truncated :
    ii = z.find('{TS}')
    if ii==-1 : print('ERROR!!!!: ZPR без {TS} :', z)
    else :
      iii = z.find('техническ')
      if ii-iii < 24 : ii = iii
      if min_to_ts > ii : min_to_ts = ii
  zpr_lng_list_truncated = [z[:min_to_ts] for z in zpr_lng_list_truncated]

  #------------------------------ Yandex GPT / Google GPT
  if GPT_mode == isYandex or GPT_mode == isGoogle :
    if version<12 : #
      if not system_role : system_role = 'Ты консультант для определения верности утверждений '
      if ask_question == ' ' :
        ask_question = [
          'Выбери самое верное утверждение из следующих:\n',
          'Выбери два самых верных утверждения из следующих:\n',
          'Выбери три самых верных утверждения из следующих:\n'] [num_zpr-1]
      Answer  = ask_gpt( ask_question+'\n' + zpr_lng, system_role = system_role, system_doc = ' ', verbose = verbo, temp = temp )
    else :         #  Новые способы выбора
      if not system_role :
        system_role = f'Ты консультант по техническим системам. Отвечай кратко. У тебя есть следующие варианты модификации технической системы:'
      if not ask_question:
        ask_question = [
          f'Выбери из имеющихся вариантов тот, который поможет {Ulutshit_eto}',
          f'Выбери из имеющихся вариантов два, которые помогут {Ulutshit_eto}',
          f'Выбери из имеющихся вариантов три, которые помогут {Ulutshit_eto}'] [num_zpr-1]
      Answer  = ask_gpt( ask_question, system_role = system_role, system_doc = zpr_lng, verbose = verbo, temp = temp )
    #>>--- if-else version>12
    answer =  Answer
    answer, answer_list = MakeList(answer) #, removeNotListLines=True)

    ZPR_Nums, ZPR_Nums_Lines = [],[]
    for ans in answer_list :
      try :
        ZPR_Nums_Lines.append(ans) # Если GPT выдаёт не стандартные формулировки - добавим пробел
        try:  ZPR_Nums.append(zpr_lng_list.index(ans)+1) # Пытаемся найти полное совпадение
        except:                                          # Пытаемся найти совпадение начала
              ZPR_Nums_Lines[-1] = ' '+ZPR_Nums_Lines[-1] # Запоминаем формулировку GPT если не совпадает полностью
              ZPR_Nums.append(zpr_lng_list_truncated.index(ans[:min_to_ts])+1)
              if ans[:min_to_ts] in zpr_lng_list_truncated[ZPR_Nums[-1]-1+1:] :
                if verbose>-1 : print('===== двойное распознавание===')
                ZPR_Nums    = ZPR_Nums   [:-1]
                raise
      except : # ------ Одно из утверждений GPT сформулировал совсем нестандартно
        if verbose>-1 :
          print(f'== Попытка распознать:"{ans}"')
          print(f'--zpr_lng_list_truncated ={zpr_lng_list_truncated} \n-- ans[:min_to_ts] ={ans[:min_to_ts]}')

        Answer_a = ask_gpt(
          f'Напиши порядковый номер похожего утверждения в списке: ' + zpr_lng_n,
          system_role = 'Ты консультант для поиска утверждений похожих на утверждение: ',
          system_doc = ans,
          verbose = verbo,
          temp = temp
        )
        try :    ZPR_Nums.append(int(re.findall(r'\d+', Answer_a)[0]))
        except :
          ZPR_Nums_Lines = ZPR_Nums_Lines[:-1]
          print(f'==не распознано:"{ans}"\nans>>"{Answer_a}" ')
    #>>>-- for ans in answer_list :
    if verbose : print(f'-------/choose_zpr/ ZPR_Nums={ZPR_Nums}=answer_list={answer_list}\n')


  #--------------------------------------------------- Deep Seek GPT
  else :
    if not system_role : system_role = 'Ты консультант для определения верности утверждений. Отвечай максимально кратко '
    if ask_question == ' ' :
      ask_question = [
        'Выбери самое верное утверждение из следующих и напиши его номер:\n',
        'Выбери два самых верных утверждения из следующих и напиши их номера:\n',
        'Выбери три самых верных утверждения из следующих и напиши их номера:\n'] [num_zpr-1]

    Answer  = ask_gpt( ask_question + zpr_lng_n, system_role = system_role, system_doc = ' ', verbose = verbo, temp = temp
    )

    try :    ZPR_Nums = [int(x) for x in re.findall(r'\d+', Answer)]
    except :
      print(f'==не распознано:\n ans>>"{Answer}" ')
      ZPR_Nums = []
  #--------------------------------------------------- end of if-else GPT

  # Привести утверждения к формату согласно маппингу
  ZPR_Nums_old = ZPR_Nums
  try :
    if shuffle :  ZPR_Nums = [shuffle[ZNum-1] for ZNum in ZPR_Nums]
    if mapping :  ZPR_Nums = [zpr_c_eq[x] if x in zpr_c_eq.keys() else x for x in ZPR_Nums]
  except:
    print(f'zpr_lng="{zpr_lng}"\nanswer="{Answer}"')
    print(f'ZPR_Nums_old={ZPR_Nums_old} ZPR_Nums={ZPR_Nums}\nshuffle={shuffle}')
    if shuffle :  ZPR_Nums = [shuffle[ZNum-1] for ZNum in ZPR_Nums]
  ### ZPR_Nums = [zpr_c_eq[x+1]-1 if x+1 in zpr_c_eq.keys() else x for x in ZPR_Nums]

  if verbose :  print(f'======== {ZPR_Nums}==Answer>>"{Answer}"')

  return ZPR_Nums, ZPR_Nums_Lines

"""#RUN"""

def getTS_ExtraInfo(TS_Original, Main_Func ='', analogs='', prilagatel='', getAnalogs=True, getPrilagatel=True, Razdelitel = ' | ' ) :

  if not analogs and getAnalogs :
    if not Main_Func :
      #---- Главная функция
      ans = ask_gpt(
          f'Исходя из этого определения Главной Функции, кратко, одной фразой ответь какая главная функция у технической системы "{TS_Original}"',
          assistant =  (
          'Исходя из этого определения Главной Функции, кратко, одной фразой ответь какая главная функция у технической системы "автомобиль"',
                          "Перемещать людей и грузы по твердой поверхности"),
          system_role = 'Ты консультант по техническим системам. У тебя есть следующий документ: ',
          system_doc = ask_main_fun)
      Main_Func = ans
      Main_Func = removeNonWords(Main_Func, lower = True)

    #---- Аналоги
    ans = ask_gpt(f'Перечисли названия технических систем, которые выполняют функцию "{Main_Func}"',
          system_role = 'Ты консультант по техническим системам. ')
    ans, ans_list = MakeList( ans, EOL=Razdelitel , removeNotListLines=True, lower=True )
    analogs = ans[:-len(Razdelitel)]

  if not prilagatel and getPrilagatel:
    #---- СВОЙСТВА - ПРИЛАГАТЕЛЬНЫЕ
    system_role = f'Ты консультант по развитию технических систем. Отвечай максимально кратко, в виде нумерованного списка. У тебя есть следующий документ: '
    user_text = f'Сформулируй новые свойства для технической системы "{TS_Original}", которые помогут её улучшить.'
    system_role = f'Ты консультант по развитию технических систем. Отвечай максимально кратко, в виде однородного списка. У тебя есть следующий документ: '
    user_text = f'Сформулируй свойства технической системы "{TS_Original}", которые могут её улучшить'
    ans = ask_gpt( user_text, system_role  = system_role, system_doc= Prilagatelnye )
    ans0,sep,ans1 = ans, '', '' # ans.partition('*')
    if ans1 : ans = sep + ans1
    else    : ans = ans0
    ans, ans_list = MakeList( ans, putNums = False, EOL=Razdelitel, removeStars=True, lower=True )
    prilagatel = ans[:-len(Razdelitel)]

  return Main_Func, analogs, prilagatel

#@title getTS_ExtraInfoOld
def getTS_ExtraInfoOld(TS_Original, Main_Func ='', getAnalogs=True, getPrilagatel=True, Razdelitel = ' | ' ) :
  analogs, prilagatel = '',''

  if getAnalogs :
      if not Main_Func :
        #---- Главная функция
        ans = ask_gpt(
            f'Исходя из этого определения Главной Функции, кратко, одной фразой ответь какая главная функция у технической системы "{TS_Original}"',
            assistant =  (
            'Исходя из этого определения Главной Функции, кратко, одной фразой ответь какая главная функция у технической системы "автомобиль"',
                            "Перемещать людей и грузы по твердой поверхности"),
            system_role = 'Ты консультант по техническим системам. У тебя есть следующий документ: ',
            system_doc = ask_main_fun)
        Main_Func = ans
        Main_Func = removeNonWords(Main_Func, lower = True)

      #---- Аналоги
      ans = ask_gpt(f'Перечисли названия технических систем, которые выполняют функцию "{Main_Func}"',
            system_role = 'Ты консультант по техническим системам. ')
      ans, ans_list = MakeList( ans, EOL=Razdelitel , removeNotListLines=True, lower=True )
      analogs = ans[:-len(Razdelitel)]

  if getPrilagatel :
      #---- СВОЙСТВА - ПРИЛАГАТЕЛЬНЫЕ
      system_role = f'Ты консультант по развитию технических систем. Отвечай максимально кратко, в виде нумерованного списка. У тебя есть следующий документ: '
      user_text = f'Сформулируй новые свойства для технической системы "{TS_Original}", которые помогут её улучшить.'
      system_role = f'Ты консультант по развитию технических систем. Отвечай максимально кратко, в виде однородного списка. У тебя есть следующий документ: '
      user_text = f'Сформулируй свойства технической системы "{TS_Original}", которые могут её улучшить'
      ans = ask_gpt( user_text, system_role  = system_role, system_doc= MK_Etap4 )
      ans0,sep,ans1 = ans, '', '' # ans.partition('*')
      if ans1 : ans = sep + ans1
      else    : ans = ans0
      ans, ans_list = MakeList( ans, putNums = False, EOL=Razdelitel, removeStars=True, lower=True )
      prilagatel = ans[:-len(Razdelitel)]
      '''
      user_text = f'Сформулируй новые свойства, которые помогут в реализации функции "{Main_Func}".'
      ans = ask_gpt( user_text, system_role  = system_role, system_doc= MK_Etap4 )
      ans0,sep,ans1 = ans, '', '' # ans.partition('*')
      if ans1 : ans = sep + ans1
      else    : ans = ans0
      ans, ans_list = MakeList( ans, putNums = False, EOL=Razdelitel )
      prilagatel += '\n------\n' + ans
      #'''

  return Main_Func, analogs, prilagatel

#@title OLD GetRecomm
def GetRecommOld(ZPR_Nums, TS_Original='',  Ulutshit_eto='', Main_Func_text= '', verbose=0) :

  AnswerAllZPR=list(range(0,13))


  ZPR_Nums_ = ZPR_Nums

  # for Main_Func_text in Main_Func_list: #---
  AnswerSum = ''
  for ZPR_Num in ZPR_Nums_ :     # <<<<<< ЗПР выбран

    this_zpr_text = zpr_array[ZPR_Num-1]

    if (verbose) : print(">>------- Выбраный закон развития ТС:", re.sub('\n','', this_zpr_text, count=1), sep='\n')

    system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. Для улучшения ТС используй имеющееся правило этапного развития технических систем, двигаясь либо в сторону увеличения этапа, либо в обратную сторону: '
    system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. Для улучшения ТС используй только имеющееся правило этапного развития технических систем, двигаясь либо в сторону увеличения этапа, либо в обратную сторону: '
    #------------- YANDEX GPT
    if GPT_mode == isYandex :
      user_text = f'Согласно только этому правилу, напиши номер этапа (в виде числа), на котором находится техническая система "{TS_Original}{Main_Func_text}"'
      Answer = ask_gpt(user_text,
         system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. У тебя есть следующее правило этапного развития технических систем: ',
         system_doc  = this_zpr_text, verbose=0 )
      Etap =  [int(num) for num in re.findall(r'\d+', Answer)][0]
      if (verbose) : print(f'>>"Этап ТС": {Etap} \n')

      #-----------------------

      if Ulutshit_eto :
        user_text = f'Если техническая система "{TS_Original}"{Main_Func_text} находится на этапе {Etap}, как она может развиться на других этапах, чтобы {Ulutshit_eto}? '
      else :
        user_text = f'Если техническая система "{TS_Original}"{Main_Func_text} находится на этапе {Etap}, как она может развиться на других этапах? '

      if (verbose) : print(f'>>>------user_text={user_text}\n>>>------system_role{system_role}')
      Answer = ask_gpt( user_text, system_role  = system_role, system_doc  = this_zpr_text, verbose=0 )


      if Ulutshit_eto :
        user_text = f'Если техническая система "{TS_Original}"{Main_Func_text} находится на этапе {Etap}, как можно её модифицировать на других этапах, чтобы {Ulutshit_eto} ? '
      else :
        user_text = f'Если техническая система "{TS_Original}"{Main_Func_text} находится на этапе {Etap}, как можно её модифицировать на других этапах? '
      Answer2 = ask_gpt( user_text, system_role  = system_role, system_doc  = this_zpr_text, verbose=0 )

    #------------- other GPT
    else :
      if Ulutshit_eto :
        user_text = f'Согласно только этому правилу, как можно развить техническую систему "{TS_Original}"{Main_Func_text} на других этапах, чтобы {Ulutshit_eto} ? '
      else :
        user_text = f'Согласно только этому правилу, как может развиться техническая система "{TS_Original}"{Main_Func_text} на других этапах? '
      Answer = ask_gpt( user_text, system_role  = system_role, system_doc  = this_zpr_text, verbose=0 )
      Answer2=''
    #<<---- if GPT_mode ==

    AnswerThisZPR = Answer+'\n'+Answer2
    AnswerAllZPR[ZPR_Num-1] = AnswerThisZPR #@@
    MakeList( AnswerThisZPR, removeStars = True)
    AnswerSum = AnswerSum + '\n'+ AnswerThisZPR
  #<<--- for ZPR_Num in

  if (verbose) : print(f'AnswerSum=\n{AnswerSum}')

  #-----------------------  СУММАРНЫЕ рекомендации по  ЗПР

  system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. У тебя есть следующий текст по модификации технической системы: '
  user_text = f'Выбери самые оригинальные предложения как можно модифицировать эту техническую систему, чтобы {Ulutshit_eto}'
  user_text = 'Выбери оригинальные предложения, избавься от дубликатов и переделай имеющийся текст в однородный список предложений без лишних символов и слов'
  #user_text = 'Переделай имеющийся текст в однородный список предложений без лишних символов и слов. Выбери оригинальные предложения, избавься от дубликатов'
  user_text = f'Переделай имеющийся текст в однородный ненумерованный список предложений без лишних символов, слов и дубликатов. Не упоминай этапы и не пиши "чтобы {Ulutshit_eto}".'
  user_text = f'Переделай имеющийся текст в однородный ненумерованный список рекомендаций без лишних символов. При этом комбинируй похожие рекомендаций в одну рекомендацию. Не упоминай этапы и правило этапного развития и не пиши вводные фразы, начинающиеся со "чтобы".'
  #user_text = f'Переделай имеющийся текст в однородный список недублирующихся предложений без лишних символов, слов. Не упоминай этапы, правило этапного развития и не пиши вводные фразы, начинающиеся со "чтобы".'
  user_text = f'Переделай текст в однородный, без лишних символов, список рекомендаций как {Ulutshit_eto} в ТС {TS_Original}. При этом комбинируй похожие рекомендаций в одну рекомендацию. Не упоминай этапы и правило этапного развития и не пиши вводные фразы, начинающиеся со "чтобы".'

  AnswerAll = ask_gpt( user_text, system_role  = system_role, system_doc  = AnswerSum )
  '''#'''
  #print(f'\033[36mTOKENS={total_numTokens}\033[0m') # ----- TOKENS
  AnswerAll_txt, AnswerAll_lst = MakeList(AnswerAll, putNums=True)
  AnswerAll, AnswerAll_lst = MakeList(AnswerAll, putNums=True, removeStars=True)


  if (verbose) : print(f'AnswerAll=\n{AnswerAll}')
  return AnswerSum, AnswerAll_txt

############@title Рекоммендации
def GetRecomm(ZPR_Nums, ZPR_Nums_Lines, TS_Original='',  Ulutshit_eto='', Main_Func_text= '', Etap = False, Answers=[1], verbose=0) :
  if verbose : verbo = verbose-1
  else :       verbo = 0
  version = 17
  ts_name = f'«{TS_Original}»'
  zpr_lng = zpr_c_list_long[version].format(TS=ts_name, Ulutshit_eto=Ulutshit_eto)
  zpr_lng,   zpr_lng_list = MakeList(zpr_lng)


  AnswerAllZPR=list(range(0,13))
  ZPR_Nums_ = [] #@@

  # for Main_Func_text in Main_Func_list: #---
  AnswerSum = ''
  for ZPR_Num_i, ZPR_Num in enumerate(ZPR_Nums) :     # <<<<<< ЗПР выбран

    this_zpr_text = zpr_array[ZPR_Num-1]
    this_zpr_text_no_ex =  re.sub(r'\(наприм[^)]*\)', '', this_zpr_text) # Удалить примеры из этапов
    this_zpr_text_short = ZPR_Nums_Lines[ZPR_Num_i]
    this_zpr_text_head, this_zpr_text_etaps = this_zpr_text.split('Различают следующие этапы развития:')
    this_zpr_text_etaps_no_ex               = this_zpr_text_no_ex.split('Различают следующие этапы развития:')[1]
    this_zpr_text___       = this_zpr_text_head + this_zpr_text_etaps
    this_zpr_text____no_ex = this_zpr_text_head + this_zpr_text_etaps_no_ex

    if (verbose) : print(">>------- Выбраный закон развития ТС:", re.sub('\n','', this_zpr_text, count=1), sep='\n')
    system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. Для улучшения ТС используй имеющееся правило этапного развития технических систем, двигаясь либо в сторону увеличения этапа, либо в обратную сторону: '
    #------------- YANDEX GPT
    if GPT_mode == isYandex :
      EtapTXT = f'находится на определенном этапе из списка'
      #---- Этап ----------------
      if Etap :
        user_text = f'Согласно только этому правилу, напиши номер этапа (в виде числа), на котором находится техническая система "{TS_Original}{Main_Func_text}"'
        Answer = ask_gpt(user_text,
          system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. У тебя есть следующее правило этапного развития технических систем: ',
          system_doc  = this_zpr_text, verbose=0 )
        if (verbose) : print(f'>>Answer: {Answer}')
        try:    Etap = [int(num) for num in re.findall(r'\d+', Answer)][0]
        except: Etap = False
      if Etap : EtapTXT = f'находится на этапе {Etap}'
      if (verbose) : print(f'>>Этап ТС: {Etap} ')
      #-----------------------

      system_role  = 'Ты консультант, предлагающий способы модификации определённой технической системы. Отвечай кратко. Для генерации вариантов используй правило модификации технических систем: '
      user_text = f'Приведи практичные примеры того, как можно модифицировать техническую систему {ts_name}{Main_Func_text} на разных этапах, чтобы {Ulutshit_eto}'
      user_text = f'Предложи несколько подходящих способов модификации технической системы {ts_name}{Main_Func_text} чтобы {Ulutshit_eto}. Используй инфинитивы, не пиши вводные фразы'
      Answer1 = ask_gpt( user_text, system_role  = system_role,
                        system_doc  = this_zpr_text____no_ex, temp=0.9, verbose=verbo ) if 1 in Answers else ''
      system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. Для улучшения ТС используй только имеющееся правило этапного развития технических систем, двигаясь либо в сторону увеличения этапа, либо в обратную сторону: '
      user_text = f'Если техническая система {ts_name}{Main_Func_text} {EtapTXT}, как можно её модифицировать на других этапах, чтобы {Ulutshit_eto} ? '
      Answer2 = ask_gpt( user_text, system_role  = system_role,
                        system_doc  = this_zpr_text, verbose=verbo ) if 2 in Answers else ''
      system_role  = 'Ты консультант по способам модификации технических систем согласно запросу. Отвечай кратко. Для модификации используй следующее правило:'
      user_text = f'Как нужно {this_zpr_text_short}, чтобы {Ulutshit_eto}?  '
      user_text = f'Приведи примеры того, как нужно {this_zpr_text_short}, чтобы {Ulutshit_eto}? '
      Answer3 = ask_gpt( user_text, system_role  = system_role,
                          system_doc  = this_zpr_text, verbose=0 ) if 3 in Answers else ''
      system_role  = 'Ты консультант, предлагающий варианты модификации определённой технической системы. Отвечай кратко. Для модификации используй следующее правило:'
      user_text = f'Чтобы {Ulutshit_eto} нужно {this_zpr_text_short}. Предложи несколько подходящих вариантов модификации:'
      Answer4 = ask_gpt( user_text, system_role  = system_role,
                        system_doc  = this_zpr_text____no_ex, verbose=0 ) if 4 in Answers else ''

    #------------- other GPT
    else :
      user_text = f'Согласно только этому правилу, как можно развить техническую систему "{TS_Original}"{Main_Func_text} на других этапах, чтобы {Ulutshit_eto} ? '
      Answer1 = ask_gpt( user_text, system_role  = system_role, system_doc  = this_zpr_text, verbose=verbo )
      Answer2=''
    #<<---- if GPT_mode ==

    if (verbose) :
      print('-----------------: this_zpr_text_short=', this_zpr_text_short)
      if Answer1 : print(f'Answer1-------------->> {(Answer1)}')
      if Answer2 : print(f'Answer2-------------->> {(Answer2)}')
      if Answer3 : print(f'Answer3-------------->> {(Answer3)}')
      if Answer4 : print(f'Answer4-------------->> {(Answer4)}')

    AnswerThisZPR = Answer1+'\n'+Answer2+'\n'+Answer3+'\n'+Answer4

    AnswerAllZPR[ZPR_Num-1] = AnswerThisZPR #@@
    #MakeList( AnswerThisZPR, removeStars = True)
    AnswerSum = AnswerSum + '\n'+ AnswerThisZPR
  #<<--- for ZPR_Num in


  ss = AnswerSum
  # ss  = re.sub( 'Этап[^\*]+\*+', '', ss)
  ss = re.sub(r'[^\n]+\*+', '', ss)
  ss = re.sub(r'[^\n]+:+', '', ss)
  AnswerAll = ss
  if (verbose) : print(f'AnswerSum=\n{AnswerSum}')

  #-----------------------  СУММАРНЫЕ рекомендации по  ЗПР
  '''
  system_role  = 'Ты консультант по развитию технических систем. Отвечай максимально кратко. У тебя есть следующий текст по модификации технической системы: '
  user_text = f'Выбери самые оригинальные предложения как можно модифицировать эту техническую систему, чтобы {Ulutshit_eto}'
  user_text = 'Выбери оригинальные предложения, избавься от дубликатов и переделай имеющийся текст в однородный список предложений без лишних символов и слов'
  #user_text = 'Переделай имеющийся текст в однородный список предложений без лишних символов и слов. Выбери оригинальные предложения, избавься от дубликатов'
  user_text = f'Переделай имеющийся текст в однородный ненумерованный список предложений без лишних символов, слов и дубликатов. Не упоминай этапы и не пиши "чтобы {Ulutshit_eto}".'
  user_text = f'Переделай имеющийся текст в однородный ненумерованный список рекомендаций без лишних символов. При этом комбинируй похожие рекомендаций в одну рекомендацию. Не упоминай этапы и правило этапного развития и не пиши вводные фразы, начинающиеся со "чтобы".'
  #user_text = f'Переделай имеющийся текст в однородный список недублирующихся предложений без лишних символов, слов. Не упоминай этапы, правило этапного развития и не пиши вводные фразы, начинающиеся со "чтобы".'
  user_text = f'Переделай текст в однородный, без лишних символов, список рекомендаций как {Ulutshit_eto} в ТС {TS_Original}. При этом комбинируй похожие рекомендаций в одну рекомендацию. Не упоминай этапы и правило этапного развития и не пиши вводные фразы, начинающиеся со "чтобы".'

  AnswerAll = ask_gpt( user_text, system_role  = system_role, system_doc  = AnswerSum )
  '''#'''
  #print(f'\033[36mTOKENS={total_numTokens}\033[0m') # ----- TOKENS
  AnswerAll_txt, AnswerAll_lst = MakeList(AnswerAll, putNums=True, lower=True)

  if (verbose) : print(f'AnswerAll=\n{AnswerAll}')
  return AnswerAll_txt, AnswerAll_lst

#GetRecomm(ZPR_Nums=[1,2,3], TS_Original='фен для волос',  Ulutshit_eto='уменьшить шум', Main_Func_text= '', verbose=1)

"""#MAIN"""

##############################################################################
#                                   M A I N                                  #
##############################################################################

total_numTokens = 0
verbose = 0


if is_running_in_colab() :
  init_gpt_api()

def gpt_edit(caption='GPT запрос:', query='') :
    return query


while is_running_in_colab() :

  #======================== Определение ТС

  TS_Original = ''
  Ulutshit_eto = ''

  system_role_dialog = f'Ты консультант по развитию технических систем. Вот твой предыдущий диалог с пользователем: '
  dialog_txt = ''
  if TS_Original : query = f'Опишите что вам не нравится в "{TS_Original}"?' # если ТС определена
  else           : query = f'Какая техническая система вас интересует:'
  skip_query = False

  while True : # ----- Цикл определения ТС
    if skip_query : skip_query = False
    else :
      user_ans = input(query+' ')
      if not user_ans : break
      dialog_txt = dialog_txt + f'\nКонсультант: {query}\nПользователь: {user_ans}'

    user_text = f'Определи какую техническую систему хочет изменить пользователь. Сформулируй название этой ТС в виде короткого словосочетания или слова '
    user_text = f'Определи какую техническую систему хочет изменить пользователь. Сформулируй название этой ТС в виде словосочетания или слова '
    #user_text = f'Определи какая техническая система интересует пользователя. Сформулируй название этой ТС в виде короткого словосочетания или слова '
    Answer_sum = ask_gpt( user_text, system_role  = system_role_dialog, system_doc  = dialog_txt, verbose=0 )
    TS_Original = removeNonWords(Answer_sum)
    #@@TS_Original = re.sub(r'[\d\s\.\*]*$', '', re.sub(r'^[\d\s\.\*]*', '', Answer_sum) ) # Убрать мусор вначале и в конце
    #@@TS_Original = TS_Original.lower()

    #--- Потдверждение
    query = f'Техническая система, которая Вас интересует, это "{TS_Original}"?'
    user_ans = input(query + ' ')#(<ВВОД> если ДА): ')
    user_ans = removeNonWords(user_ans)
    #@@try :
    if user_ans in daList :  break #-- если 'да' ----> ВЫХОД
    TS_Original = ''
    if user_ans in netList :     #-- если нет
      dialog_txt = dialog_txt + f'\nКонсультант: {query}\nПользователь: Неверно'
      query = 'Какая техническая система с вас интересует?'
      continue
                                  #-- если слова
    dialog_txt = dialog_txt + f'\nКонсультант: {query}\nПользователь: {user_ans}'
    skip_query = True
    continue
    #@@except : a=1 # ТС выбрана !!!
  #<< END - while True : # ----- Цикл определения ТС

  if not TS_Original : break

  #=========== ГЛАВНАЯ ФУНКЦИЯ, АНАЛОГИ и ПРИЛАГАТЕЛЬНЫЕ
  #'''
  Main_Func, analogs, prilagatel = getTS_ExtraInfo(TS_Original)
  Main_Func_text='' # НЕ ИСПОЛЬЗУЕМ !!!!!!!!!
  print(f'\033[31mАналоги выбранной технической системы, реализующие ту же функцию ({Main_Func}):\033[0m\n{analogs}')
  print(f'\033[31mВозможные улучшения технической системы "{TS_Original}", сформированные на основе "хороших" прилагательных:\033[0m\n{prilagatel}')
  '''#'''

  #======================== Что улучшить
  skip_query = True
  while True : # ----- Цикл определения  ЧТО УЛУЧШИТЬ
    if skip_query : skip_query = False
    else :
      user_ans = input(query+' ')
      if not user_ans : break
      dialog_txt = dialog_txt + f'\nКонсультант: {query}\nПользователь: {user_ans}'

    user_text = f'Сформулируй в виде глагольного словосочетания как нужно изменить эту техническую систему. В формулировке не должно быть название самой ТС.'
    unknown_str = 'неизвестно'
    user_text = f'Сформулируй в виде глагольного словосочетания как пользователь хочет изменить техническую систему "{TS_Original}", если такая информация есть в предыдущем диалоге, иначе ответь "{unknown_str}". В формулировке не должно быть название самой ТС.'
    ####user_text = f'Сформулируй в виде короткого словосочетания какие свойства ТС нужно изменить'

    Answer_sum = ask_gpt( user_text, system_role  = system_role_dialog, system_doc  = dialog_txt, verbose=0 )
    Ulutshit_eto = removeNonWords(Answer_sum)

    #--- Потдверждение
    if  Ulutshit_eto != unknown_str : # Если это похоже на то что мы ищем
      query = f'Вы хотите {Ulutshit_eto} в ТС "{TS_Original}" ?'
      user_ans = input(query + ' ')

      user_ans = removeNonWords(user_ans)
      if user_ans in daList : break #-- если 'да' ----> ВЫХОД
      if user_ans in netList :      #-- если нет
        dialog_txt = dialog_txt + f'\nКонсультант: {query}\nПользователь: Неверно'
        query = 'Что вы хотите улучшить в этой технической системе?'
        continue
                                    #-- если слова
      dialog_txt = dialog_txt + f'\nКонсультант: {query}\nПользователь: {user_ans}'

    #--- Задать пользователю вопрос от GPT
    user_text = f'Задай пользователю дополнительный вопрос, чтобы сформулировать в виде короткого словосочетания как нужно изменить ТС'
    user_text = f'Задай пользователю дополнительный вопрос, чтобы сформулировать в виде короткого словосочетания какие свойства ТС нужно изменить'
    user_text = f'Задай пользователю дополнительный вопрос, чтобы сформулировать в виде глагольного словосочетания какие свойства ТС нужно изменить'
    query = ask_gpt( user_text, system_role  = system_role_dialog, system_doc  = dialog_txt, verbose=0 )
  # конец -----while True : # ----- Цикл определения ЧТО УЛУЧШИТЬ


  #==========================  Вычисления по ЗПР

  print(f'\033[36mПодождите пожалуйста...\033[0m')
  #-----------------------  ЗПРё
  ZPR_Nums, ZPR_Nums_Lines = choose_zpr_global(TS_Original, Ulutshit_eto=Ulutshit_eto, verbose = 0)

  if Ulutshit_eto :
    print_str = f'\033[31mДля того чтобы {Ulutshit_eto} в TC "{TS_Original}", нейросеть рекомендует использовать следующие закономерности развития технических систем:\033[0m'
  else :
    print_str = f'\033[31mДля совершенствования ТС "{TS_Original}", нейросеть рекомендует использовать следующие закономерности развития технических систем:\033[0m'
  for i, ZPR_Num in enumerate(ZPR_Nums, start=1) : # Выдать список заголовков ЗПР
    line = wrap_text(f'{i}. ' + re.sub('\n', '', re.split(r'Различают', zpr_array[ZPR_Num-1])[0] ) )
    print_str = print_str + '\n' + line

  print(print_str)

  #-----------------------  Рекомендации по группе ЗПР

  print(f'\033[36mПодождите пожалуйста...\033[0m')

  AnswerAll_txt = GetRecomm(ZPR_Nums, ZPR_Nums_Lines, TS_Original = TS_Original, Ulutshit_eto=Ulutshit_eto, Main_Func_text= '')

  print(f'\033[31mНа основе этих закономерностей нейросеть предлагает следующие рекомендации по улучшению "{TS_Original}":\033[0m ')
  print(f'{AnswerAll_txt}')

"""#MAIN WWW"""

##############################################################################
#                                   M A I N   W W W                          #
##############################################################################
def getRandStr(lenght) : return "".join(chr(randint(33, 125)) for _ in range(lenght))

app = Flask(__name__)
app.secret_key = getRandStr(20) #'your_secret_key_here'  # Необходимо для работы сессий

def init_session():
    global Yandex_API_Key
    global Yandex_FolderID

    session['total_numTokens'] = 0
    session['verbose'] = 0
    session['TS_Original'] = ''
    session['TS_Original_YES'] = False
    session['Ulutshit_eto'] = ''
    session['dialog_txt'] = ''
    session['Main_Func'] = ''
    session['analogs'] = ''
    session['prilagatel'] = ''

    session['Protivorechie'] = ''
    session['Analogii'] = ''
    session['IKR'] = ''
    session['Glagoly'] = ''
    session['Resursi'] = ''
    session['Evristiki'] = '' # Информация по одной из предыдущих - нехватка памяти в куки для записи по отдельности

    Yandex_API_Key = os.environ.get('YANDEX_API_KEY')
    if Yandex_API_Key != None :
      session['Yandex_API_Key'] = Yandex_API_Key
      Yandex_FolderID = os.environ.get('YANDEX_FOLDER_ID')
      session['Yandex_FolderID'] = Yandex_FolderID
      init_gpt_api()
    else :
      session['Yandex_API_Key'] = ''
      session['Yandex_FolderID'] = ''

    print('====== init  Yandex_API_Key, Yandex_FolderID =', Yandex_API_Key, Yandex_FolderID)

    if 'mode' not in session       : session['mode']       = 'normal'
    session['debug_mode'] = False

    session['ZPR_Nums'] = []
    session['ZPR_revealed'] = 0
    session['ZPR_unintersected'] = []
    session["all_recommendations"] = []
    session["all_recommendations_selected"] = []


    session["zpr_list"]           = []
    session['current_query'] = 'Какая техническая система вас интересует?'
    session['debug_query'] = ''
    session['placeholder'] = ''
    session['skip_query'] = False
    session['stage'] = 'define_ts'  # define_ts, confirm_ts, define_improvement, confirm_improvement, show_results
    if 'show_analogs' not in session : # Если есть значения - оставляем их
      session['show_analogs']      = False
      session['show_improvements'] = False


@app.route('/', methods=['GET', 'POST'])
def index():
    global Yandex_API_Key
    global Yandex_FolderID

    if 'stage' not in session:  init_session()

    if request.method == 'POST':

      Yandex_API_Key = session['Yandex_API_Key']
      Yandex_FolderID = session['Yandex_FolderID']
      TS_Original = session['TS_Original']
      debug_mode = session['debug_mode']


      if 'api_key' in request.form : ###not Yandex_API_Key:            # Передача ключа с экранной формы
        Yandex_API_Key = request.form.get('api_key')
        Yandex_FolderID = request.form.get('folder_id')
        os.environ['YANDEX_API_KEY'] = Yandex_API_Key
        session['Yandex_API_Key']    = Yandex_API_Key
        os.environ['YANDEX_FOLDER_ID'] = Yandex_FolderID
        session['Yandex_FolderID']    = Yandex_FolderID

        init_gpt_api()
        return redirect(url_for('index'))


      #-----------------------------------------   MAIN

      session['placeholder'] = ''
      session['show_analogs']      = 'show_analogs' in request.form
      session['show_improvements'] = 'show_improvements' in request.form

      # Обработка переключения
      if 'mode_switch' in request.form :
        session['mode'] = 'normal' if session['mode'] == 'expert' else 'expert'
        return redirect(url_for('index'))

      if  ('TS_Original' in request.form) :
        session['TS_Original'] =  request.form.get('TS_Original')
        return redirect(url_for('index'))


      #---------------------- Эвристики -----------------------

      system_text0 = 'Ты консультант по техническим системам. Отвечай максимально кратко. У тебя есть следующая инструкция: '
      system_text = 'Ты консультант по развитию технических систем. Отвечай максимально кратко, в виде однородного списка. У тебя есть следующая инструкция: '

      if ('Potrebnosti' in request.form) :
        user_text = f'На основе данной инструкции найди способы модификации технической системы "{TS_Original}" для реализации каких-нибудь потребностей, в дополнение к уже реализуемым'
        ans       = handle_evristik(user_text, system_text + Potrebnosti_list_RAF)
        ans      += '\n------------------------ MK ----------------------\n'
        user_text = f'На основе данной инструкции найди способы модификации технической системы "{TS_Original}" для реализации каких-нибудь потребностей, в дополнение к уже реализуемым'
        ans      += handle_evristik(user_text, system_text + Potrebnosti_list)
        print(ans)
        session['Evristiki'] = removeNonWords( ans, lower= False, removeMany=False)
        return redirect(url_for('index'))

      if ('Prilagatelnye' in request.form) :
        system_role = f'Ты консультант по развитию технических систем. Отвечай максимально кратко, в виде однородного списка. У тебя есть следующий документ: '
        user_text = f'Сформулируй свойства технической системы "{TS_Original}", которые могут её улучшить'
        ans = ask_gpt( user_text, system_role  = system_role, system_doc= Prilagatelnye )
        print(ans)
        '''
        ans0,sep,ans1 = ans, '', '' # ans.partition('*')
        if ans1 : ans = sep + ans1
        else    : ans = ans0
        Razdelitel = '|'
        ans, ans_list = MakeList( ans, putNums = False, EOL=Razdelitel, removeStars=True, lower=True )
        prilagatel = ans[:-len(Razdelitel)]
        '''
        prilagatel = removeNonWords( ans, lower= False)
        session['Evristiki'] = prilagatel
        return redirect(url_for('index'))

      if ('Glagoly' in request.form) :
        user_text = f'На основе данной инструкции сгенерируй список полезных и вредных функций технической системы "{TS_Original}"'+\
                    ', а также список новых возможных полезных функций'
        ans       = handle_evristik(user_text, system_text0 + Glagoly)
        ans      += '\n------------------------ Glagoly2 ----------------------\n'
        ans      += handle_evristik(user_text, system_text0 + Glagoly2)
        session['Evristiki'] = removeNonWords( ans, lower= False, removeMany=False)
        return redirect(url_for('index'))

      if ('Protivorechie' in request.form) :
        user_text = f'На основе данной инструкции сформулируй усиленное противоречие в технической системе "{TS_Original}" и предложи способы его разрешения'
        ans = handle_evristik(user_text, system_text0 + Protivorechie)
        session['Evristiki'] = removeNonWords( ans, lower= False, removeMany=False)
        return redirect(url_for('index'))

      if ('Analogii' in request.form) :
        user_text = f'На основе данной инструкции найди аналоги технической системы "{TS_Original}" в технике и природе'+\
                    ', и напиши список соответствующих способов модификации этой технической системы, не упоминая виды аналогий'
        user_text = f'Использую данную инструкцию найди способы модификации технической системы "{TS_Original}" на основе аналогий в технике и природе'
        ans = handle_evristik(user_text, system_text + Analogii0)
        ans      += '\n-------- 3 -----------\n'
        ans     += handle_evristik(user_text, system_text + Analogii3)
        session['Evristiki'] = removeNonWords( ans, lower= False, removeMany=False)
        return redirect(url_for('index'))

      if ('IKR' in request.form) :
        user_text = f'На основе данной инструкции сформулируй идеальный конечный результат для технической системы "{TS_Original}" и опиши возможные способы его реализации'
        ans        = handle_evristik(user_text, system_text0 + IKR1)
        session['Evristiki'] = removeNonWords( ans, lower= False, removeMany=False)
        return redirect(url_for('index'))

      if ('Resursi' in request.form) :
        user_text = f'На основе данной инструкции найди скрытые ресурсы для технической системы "{TS_Original}" и придумай как их использовать в этой технической системе или вне её'
        user_text = f'На основе данной инструкции найди способы использования скрытых ресурсов технической системы "{TS_Original}"'
        user_text = f'На основе данной инструкции найди скрытые ресурсы и способы их использования для технической системы "{TS_Original}"' +\
                    ''#, не упоминай классы ресурсов '
        user_text = f'На основе данной инструкции найди способы использования скрытых ресурсов для технической системы "{TS_Original}"'
        ans        = handle_evristik(user_text, system_text + Resursi1)
        session['Evristiki'] = removeNonWords( ans, lower= False, removeMany=False)
        return redirect(url_for('index'))


      if not ('show_extra_info' in request.form or 'Main_Func_text' in request.form) : #-- Если НЕ   кнопка доп.инфо -     идем на следующий шаг

        user_ans = request.form.get('user_ans', '').strip()
        if 'load-more-zpr' in request.form:                return get_recommendations()
        elif 'select_rec_btn'in request.form:              return set_recommendations_selected()
        elif session['stage'] == 'define_ts' and user_ans: return handle_define_ts(user_ans)
        elif session['stage'] == 'confirm_ts':             return handle_confirm_ts(user_ans)
        elif session['stage'] == 'define_improvement':     return handle_define_improvement(user_ans)
        elif session['stage'] == 'confirm_improvement':    return handle_confirm_improvement(user_ans)
        ##### elif session['stage'] == 'show_results':           return reset()

      return redirect(url_for('index'))
    #<<if request.method == 'POST':

    #--- Получаем дополнительную информацию о ТС
    if session['TS_Original_YES'] :
      session['Main_Func'], session['analogs'], session['prilagatel'] =  getTS_ExtraInfo(
                                                session['TS_Original'],  session['Main_Func'],  session['analogs'],  session['prilagatel'],
                                                session['show_analogs'], session['show_improvements'])

    ##if session['stage'] == 'show_results_waiting' :
      ###return get_recommendations(init=True) # Получаем РЕКОМЕНДАЦИИ

    return render_template('index.html')
    ''',
                         query=session['current_query'],
                         ts_original=session['TS_Original'],
                         stage=session['stage'])
    '''


@app.route('/toggle_mode', methods=['POST'])
def toggle_mode():
    # Переключаем режим
    session['mode'] = 'normal' if session['mode'] == 'expert' else 'expert'
    print('=------ toggle mode_switch=', session['mode'])
    return redirect(url_for('index'))


@app.route('/debug_mode', methods=['POST'])
def debug_mode():
    # Переключаем режим
    session['debug_mode'] =  not session['debug_mode']
    print("=------ session['debug_mode'] = ", session['debug_mode'])
    return redirect(url_for('index'))


from queue import Queue
data_queue = Queue()

@app.route('/gpt-request', methods=['POST'])
def gpt_request() :
    global data_queue

    gpt_query = request.form.get('gpt_query')
    data_queue.put(gpt_query)

    print (gpt_query)
    # return redirect(url_for('index'))


def gpt_edit(caption='GPT запрос:', query='') :

    if is_running_in_colab() : return query
    if not session['debug_mode'] : return query

    print(f'-------------- {caption}\n', query)
    new_val =  input()

    if not new_val : new_val = query

    '''
    global data_queue
    session['debug_query'] = query
    return render_template('debug.html',  caption = caption)
    print('========= after render', caption, query)
    value = data_queue.get()  # Блокируется до появления данных
    print(f"========== Получено: {value}")
    '''
    return new_val



def handle_evristik(user_text, system_role):
  user_ans = ask_gpt( user_text,
                      system_role=system_role,
                      verbose=0)
  ans = user_ans
  return ans

  # user_ans = removeNonWords(user_ans)
  Razdelitel = '\n'
  ans, ans_list = MakeList( user_ans, EOL=Razdelitel ) # , removeNotListLines=True, lower=True )
  ans = ans[:-len(Razdelitel)]





def handle_define_ts(user_ans): #--------Обработка определения технической системы

    session['dialog_txt'] += f'\nКонсультант: {session["current_query"]}\nПользователь: {user_ans}'

    user_text = 'Определи какая техническая система интересует пользователя. Сформулируй название этой технической системы в виде словосочетания или слова, максимально близко к ответу пользователя на прямой вопрос'
    user_text = 'Определи какая техническая система интересует пользователя. Сформулируй название этой технической системы в виде словосочетания или слова, не используй слово "система"'
    user_ans = ask_gpt(user_text,
                        system_role='Ты консультант по техническим системам. Техническая система это некое устройство, объект, процесс или явление. Вот твой предыдущий диалог с пользователем: ',
                        system_doc=session['dialog_txt'],
                        verbose=0)
    user_ans = removeNonWords(user_ans)
    if isListInStr(unknownList, user_ans) :
      session['current_query'] = f'Это не похоже на техническую систему. Какая техническая система вас интересует?'
      return redirect(url_for('index'))


    session['TS_Original'] = user_ans
    session['current_query'] = f'Техническая система, которая вас интересует, это "{session["TS_Original"]}"?'
    session['stage'] = 'confirm_ts'
    session['placeholder'] = 'да'
    return redirect(url_for('index'))

def handle_confirm_ts(user_ans): #------------ Обработка подтверждения технической системы"
    user_ans  = removeNonWords(user_ans)

    if user_ans  in daList:  # да - следующий этап + Получаем дополнительную информацию о ТС

        session['current_query'] = f'Какие характеристики технической системы "{session["TS_Original"]}" вы хотите улучшить?'
        session['stage'] = 'define_improvement'
        session['TS_Original_YES'] = True
    elif user_ans  in netList:                      # нет - начинаем сначала
        session['TS_Original'] = ''
        session['dialog_txt'] += f'\nКонсультант: {session["current_query"]}\nПользователь: Неверно'
        session['current_query'] = 'Какая техническая система вас интересует?'
        session['stage'] = 'define_ts'
    else:                                           # слово - пытаемся определить ТС (пропускаем вопрос)
        session['TS_Original'] = ''
        return handle_define_ts(user_ans) # session['stage'] = 'define_ts'


    return redirect(url_for('index'))

def handle_define_improvement(user_ans): #---------- Обработка  определения улучшений
    session['dialog_txt'] += f'\nКонсультант: {session["current_query"]}\nПользователь: {user_ans}'

    user_text = f'Сформулируй в виде глагольного словосочетания как пользователь хочет изменить техническую систему "{session["TS_Original"]}", если такая информация есть в предыдущем диалоге, иначе ответь "не могу". В формулировке не должно быть названия самой технической системы.'
    user_text = f'Если исходя из диалога можно уверенно понять как пользователь хочет изменить техническую систему "{session["TS_Original"]}", сформулируй это в виде глагольного словосочетания, иначе ответь "не могу". В формулировке не должно быть названия самой технической системы.'
    user_text = f'Если исходя из диалога можно уверенно понять как пользователь хочет изменить техническую систему, сформулируй это в виде глагольного словосочетания, иначе ответь "не могу". В формулировке не должно быть названия самой технической системы.'
    Answer_sum = ask_gpt(user_text,
                        system_role='Ты консультант по развитию технических систем. Вот твой предыдущий диалог с пользователем: ',
                        system_doc=session['dialog_txt'],
                        verbose=0)
    Answer_sum = removeNonWords(Answer_sum)
    Ulutshit_eto = Answer_sum

    if isListInStr(unknownList, Answer_sum) :
        user_text = 'Задай пользователю дополнительный вопрос, чтобы сформулировать в виде глагольного словосочетания какие свойства технической системы нужно изменить'
        user_text = 'Задай пользователю дополнительный вопрос, чтобы уточнить какие свойства технической системы нужно изменить'
        session['current_query'] = ask_gpt(user_text,
                                         system_role='Ты консультант по развитию технических систем. Вот твой предыдущий диалог с пользователем: ',
                                         system_doc=session['dialog_txt'],
                                         verbose=0)
    else:
        session['Ulutshit_eto'] = Ulutshit_eto
        session['current_query'] = f'Вы хотите {session["Ulutshit_eto"]} в технической системе "{session["TS_Original"]}"?'
        session['stage'] = 'confirm_improvement'
        session['placeholder'] = 'да'

    return redirect(url_for('index'))

def handle_confirm_improvement(user_ans): #---------- Обработка подтверждения улучшения
    user_ans  = removeNonWords(user_ans)

    if user_ans  in daList:                         # да - следующий этап
        return get_recommendations(init=True)
        #### session['stage'] = 'show_results_waiting'
    elif user_ans  in netList:                      # нет - начинаем сначала
        session['dialog_txt'] += f'\nКонсультант: {session["current_query"]}\nПользователь: Неверно'
        session['current_query'] = 'Что вам не нравится в этой технической системе?'
        session['stage'] = 'define_improvement'
    else:                                           # слово - пытаемся определить (пропускаем вопрос)
        return handle_define_improvement(user_ans) # session['stage'] = 'define_improvement'

    return redirect(url_for('index'))

def get_recommendations(init=False): #---- Получение и отображение рекомендаций
    if init :
      session['ZPR_Nums'] = []
      session['ZPR_revealed'] = 0
      session['ZPR_unintersected'] = []
      session["all_recommendations"] = []
      session["all_recommendations_selected"] = []

    ZPR_Nums              = session['ZPR_Nums']
    ZPR_Nums_unitersected = session['ZPR_unintersected']
    revealed              = session['ZPR_revealed']

    nums_zprs_more = 2  # Это пожелание добавить столько, а не требование
    if not ZPR_Nums : nums_zprs_more = 3

    if len(ZPR_Nums) <= revealed :    # Если раскрыли все zpr что есть - ищем новые
      ZPR_Nums, ZPR_Nums_Lines, ZPR_Nums_unitersected = choose_zpr_global(  session['TS_Original'], session['Ulutshit_eto'],
                                                          ZPR_Nums = ZPR_Nums, ZPR_Nums_unitersected = ZPR_Nums_unitersected )
      session['ZPR_Nums']           = ZPR_Nums
      session['ZPR_unintersected']  = ZPR_Nums_unitersected


    # Получаем рекомендации
    we_have = len(ZPR_Nums)
    revealed_new = (revealed+nums_zprs_more) if we_have > (revealed+nums_zprs_more) else we_have
    slice_more = slice(revealed,  revealed_new)
    _, AnswersMore_lst = GetRecomm(ZPR_Nums[slice_more], ZPR_Nums_Lines[slice_more],
                                 TS_Original = session['TS_Original'], Ulutshit_eto=session['Ulutshit_eto'], Main_Func_text= '')
    print('revealed,revealed_new =', revealed , revealed_new)

    if revealed == revealed_new : return get_recommendations() # Не добавилось ничего!!! - рекурсивно вызываем опять

    revealed = revealed_new
    session['ZPR_revealed'] = revealed

    # Формируем список ЗПР для отображения
    zpr_list = []
    for i, ZPR_Num in enumerate(session['ZPR_Nums'], start=1):
        if i>revealed : break
        #line = wrap_text(f'{i}. ' + re.sub('\n', '', re.split(r'Различают', zpr_array[ZPR_Num-1])[0]))
        line = wrap_text(re.sub('\n', '', re.split(r'Различают', zpr_array[ZPR_Num-1])[0]))
        line = removeNonWords(line, lower=True)
        zpr_list.append(line)

    session["zpr_list"]            = zpr_list
    session["all_recommendations"] += AnswersMore_lst
    session['stage'] = 'show_results'
    print('total_numTokens', session['total_numTokens'])
    return redirect(url_for('index'))

def set_recommendations_selected() :
    sel = []
    for i in range(len(session['all_recommendations'])) :
      sel += [i] if 'select_rec_'+str(i) in request.form else []
    session['all_recommendations_selected'] = sel
    return redirect(url_for('index'))

@app.route('/update_checkboxes', methods=['POST'])
def update_checkboxes(): # Обновляем состояние чекбоксов в сессии

    session['show_analogs'] = 'show_analogs' in request.form
    session['show_improvements'] = 'show_improvements' in request.form
    return redirect(url_for('index'))


@app.route('/reset')
def reset(): # Сброс сессии и начало нового диалога
    init_session()
    return redirect(url_for('index'))

@app.route('/reset_all')
def reset_all(): # Сброс сессии и API КЛЮЧА
    os.environ['YANDEX_API_KEY'] = ''
    init_session()
    return redirect(url_for('index'))

@app.route('/reset_to_improve')
def reset_to_improve(): # Сброс сессии и начало нового диалога
    session['dialog_txt'] = ''
    return handle_confirm_ts('да')

@app.route('/edit_mainfun')
def edit_mainfun():

    return f'''
     <input hx-target="this" hx-swap="outerHTML" type="text"  size="60" name="Main_Func_text" value="{ session['Main_Func'] }"
               hx-post="/save_mainfun" hx-trigger="blur, keyup[key=='Enter']">
    '''

@app.route('/save_mainfun', methods=['POST'])
def save_mainfun():
    new_text = request.form.get('Main_Func_text')


    session['Main_Func'] = new_text  # Сохраните new_text в базу данных или куда вам нужно
    session['analogs'] = ''

    if len(new_text)>2 : pass #and new_text != session['Main_Func'] :

    return f'<a hx-target="this" hx-swap="outerHTML" href="#" hx-get="/edit_mainfun">{ new_text }</a>'

    return                                      f'<a href="#" hx-get="/edit_mainfun">{ new_text }</a>'


    return f'<span id="link-text">{new_text}</span><a href="#" hx-get="/edit_mainfun">Изменить</a>'

if not is_running_in_colab() :
  if __name__ == '__main__':
      app.run(debug=True)

ask = input('Запрос: ')
system_role = 'Ты консультант по техническим системам. У тебя есть следующий запрос от пользователя: ' + ask
user_text='Определи из имеющегося запроса 1) Техническая система 2) Что нужно изменить в этой технической системе'
user_text='Определи из имеющегося запроса  какую техническую систему имеет ввиду пользователь и что пользователь хочет изменить в этой технической системе'
user_text='Определи из имеющегося запроса 1) Техническая система 2) Что пользователь хочет изменить в этой технической системе'
user_ans = ask_gpt( user_text,
                      system_role=system_role,
                      verbose=0)
print(user_ans)